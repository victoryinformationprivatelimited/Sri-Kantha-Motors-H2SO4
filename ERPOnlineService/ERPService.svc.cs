using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using ERPData;
using System.Data;
using System.Data.Objects;
using System.Configuration;
using System.Data.Objects.DataClasses;
using System.Globalization;


namespace ERPOnlineService
{
    // NOTE: You can use the "Rename" command on the "Refactor" menu to change the class name "ERPService" in code, svc and config file together.
    // NOTE: In order to launch WCF Test Client for testing this service, please select ERPService.svc or ERPService.svc.cs at the Solution Explorer and start debugging.
    [ServiceContract]
    public class ERPService
    {
        [OperationContract]
        public IEnumerable<usr_User> GetUsers()
        {
            using (var context = new ERPEntities())
            {
                var result = context.usr_User.Where(c => c.isAcvtive == true).ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public void saveUsers(usr_User User)
        {
            if (User != null)
            {
                using (var context = new ERPEntities())
                {
                    usr_User newUser = new usr_User();
                    newUser.user_id = User.user_id;
                    newUser.user_level_id = User.user_level_id;
                    newUser.user_name = User.user_name;
                    newUser.name = User.name;
                    newUser.image = User.image;
                    newUser.user_password = User.user_password;
                    newUser.isAcvtive = User.isAcvtive;
                    newUser.is_App_User = User.is_App_User;
                    newUser.is_Web_Portal_User = User.is_Web_Portal_User;
                    newUser.is_mobile_app_user = User.is_mobile_app_user;
                    context.usr_User.AddObject(newUser);
                    context.SaveChanges();
                }
            }
        }

        [OperationContract]
        public string GET_LOGIN_date()
        {

            {
                using (var context = new ERPEntities())
                {
                    //string value = context.dtl_LoginDate.Where(c=> c.LID== new Guid(""))
                    string value = context.dtl_LoginDate.Where(d => d.LID == new Guid("e3b36b7f-2ac2-4988-87c6-e4847de11c56")).Select(c => c.logindate).FirstOrDefault().ToString();
                    return value;
                }
            }
        }
        [OperationContract]
        public void updateLOGIN_date(string Logindate)
        {
            if (Logindate != null)
            {
                try
                {
                    using (var context = new ERPEntities())
                    {
                        dtl_LoginDate updated = context.dtl_LoginDate.Where(c => c.LID == new Guid("e3b36b7f-2ac2-4988-87c6-e4847de11c56")).FirstOrDefault();
                        updated.logindate = Logindate;
                        context.SaveChanges();
                    }
                }
                catch (Exception)
                {

                    throw;
                }
            }
        }

        [OperationContract]
        public void updateUser(usr_User User)
        {
            if (User != null)
            {
                using (var context = new ERPEntities())
                {
                    usr_User newUser = context.usr_User.First(c => c.user_id == User.user_id);
                    newUser.user_id = User.user_id;
                    newUser.user_level_id = User.user_level_id;
                    newUser.user_name = User.user_name;
                    newUser.name = User.name;
                    newUser.image = User.image;
                    newUser.user_password = User.user_password;
                    newUser.isAcvtive = User.isAcvtive;
                    newUser.is_App_User = User.is_App_User;
                    newUser.is_Web_Portal_User = User.is_Web_Portal_User;
                    newUser.is_mobile_app_user = User.is_mobile_app_user;
                    context.SaveChanges();
                }
            }
        }

        [OperationContract]
        public void deleteUser(usr_User User)
        {
            if (User != null)
            {
                using (var context = new ERPEntities())
                {
                    usr_User newUser = context.usr_User.First(c => c.user_id == User.user_id);
                    context.usr_User.DeleteObject(newUser);
                    context.SaveChanges();
                }
            }
        }

        //[OperationContract]
        //public List<usr_User> GetUserDetails()
        //{
        //    List<usr_User> oUserDetails = new List<usr_User>();
        //    using (var context = new ERPEntities())
        //    {
        //        var result = from a in context.usr_User
        //                     join b in context.usr_UserLevel on a.user_level_id equals b.user_level_id
        //                     select new
        //                     {
        //                         a.user_id,
        //                         a.user_level_id,
        //                         a.user_name,
        //                         a.name,
        //                         a.user_password,
        //                         a.isAcvtive,
        //                         b.user_level
        //                     };

        //        foreach (var item in result)
        //        {
        //            usr_User newUser = new usr_User();
        //            newUser.user_id = item.user_id;
        //            newUser.user_level_id = item.user_level_id;
        //            newUser.user_name = item.user_name;
        //            newUser.user_password = item.user_password;
        //            newUser.name = item.name;

        //            usr_UserLevel newLevel = new usr_UserLevel();
        //            newLevel.user_level_id = (Guid)item.user_level_id;
        //            newLevel.user_level = item.user_level;


        //            //newUser.usr_UserLevel = newLevel;
        //            oUserDetails.Add(newUser);
        //        }
        //    }
        //    return oUserDetails;
        //}

        [OperationContract]
        public IEnumerable<usr_UserPermission> GetUserPermission(Guid userId)
        {
            using (var context = new ERPEntities())
            {
                var result = context.usr_UserPermission.Where(c => c.user_id == userId).ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<usr_UserLevel> GetUserLevel()
        {
            using (var context = new ERPEntities())
            {
                var results = context.usr_UserLevel.ToList();
                results.ForEach(e => context.Detach(e));
                return results;
            }
        }

        [OperationContract]
        public IEnumerable<usr_UserLevel> GetUserLevelById(Guid userLevelId)
        {
            using (var context = new ERPEntities())
            {
                var results = context.usr_UserLevel.Where(c => c.user_level_id == userLevelId).ToList();
                results.ForEach(e => context.Detach(e));
                return results;
            }
        }

        [OperationContract]
        public IEnumerable<z_CivilState> GetCivilStatus()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_CivilState.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public void saveUserLevel(usr_UserLevel UserLevel)
        {
            if (UserLevel != null)
            {
                using (var context = new ERPEntities())
                {
                    if (context != null)
                    {
                        usr_UserLevel newUserLevel = new usr_UserLevel();
                        newUserLevel = UserLevel;
                        context.usr_UserLevel.AddObject(newUserLevel);
                        context.SaveChanges();
                    }
                }
            }
        }

        [OperationContract]
        public void updateUserLevel(usr_UserLevel UserLevel)
        {
            if (UserLevel != null)
            {
                using (var context = new ERPEntities())
                {
                    if (context != null)
                    {
                        usr_UserLevel oldUserLevel = context.usr_UserLevel.First(z => z.user_level_id.Equals(UserLevel.user_level_id));
                        oldUserLevel.user_level_id = UserLevel.user_level_id;
                        oldUserLevel.user_level = UserLevel.user_level;
                        oldUserLevel.modified_datetime = System.DateTime.Now;
                        oldUserLevel.modified_user_id = UserLevel.modified_user_id;
                        context.SaveChanges();
                    }
                }
            }
        }

        [OperationContract]
        public void deleteUserLevel(usr_UserLevel UserLevel)
        {
            if (UserLevel != null)
            {
                using (var context = new ERPEntities())
                {
                    if (context != null)
                    {
                        usr_UserLevel oldUserLevel = context.usr_UserLevel.First(z => z.user_level_id.Equals(UserLevel.user_level_id));
                        if (oldUserLevel != null)
                        {
                            context.usr_UserLevel.DeleteObject(oldUserLevel);
                            context.SaveChanges();
                        }
                    }
                }
            }
        }

        [OperationContract]
        public List<usr_UserLevel> GetSearchResultUserLevel(string SearchString)
        {

            using (var context = new ERPEntities())
            {
                List<usr_UserLevel> luserLevel = new List<usr_UserLevel>();
                var usrLevels = context.usr_UserLevel.Where(z => z.user_level.Contains(SearchString));
                foreach (usr_UserLevel usrLevel in usrLevels)
                {
                    usr_UserLevel searchUserLevel = new usr_UserLevel();
                    searchUserLevel.user_level_id = usrLevel.user_level_id;
                    searchUserLevel.user_level = usrLevel.user_level;
                    luserLevel.Add(searchUserLevel);
                }

                return luserLevel;
            }
        }

        [OperationContract]
        public bool GetServiceReceponce()
        {
            return true;
        }

        [OperationContract]
        public IEnumerable<mas_Employee> GetEmployees()
        {
            using (var context = new ERPEntities())
            {
                var Results = context.mas_Employee.Where(c => c.dtl_Employee.isActive == true && c.isdelete == false).ToList();
                Results.ForEach(e => context.Detach(e));
                return Results;
            }
        }

        [OperationContract]
        public string GetNewEmployee_emp_id()
        {
            using (var context = new ERPEntities())
            {
                var Results = context.mas_Employee.Max(e => e.emp_id);
                return Results;
            }
        }

        #region Employee Check (New Emp or Existing One)

        [OperationContract]
        int IsEmployeeExists(mas_Employee addingEmp)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var currentEmp = context.mas_Employee.FirstOrDefault(c => c.employee_id == addingEmp.employee_id);
                    if (currentEmp == null)
                    {
                        // trying to add new employee
                        return 0;
                    }
                    else
                    {
                        // employee id is existing but verify that same employee not otherwise
                        if (currentEmp.emp_id.Trim() == currentEmp.emp_id.Trim())
                        {
                            // employee is already added and should be updated
                            return 1;
                        }
                        {
                            // rare scenario generated guid could be conflicted with already existing employee's ID
                            return -2;
                        }
                    }
                }
            }
            catch (Exception)
            {
                return -1;
            }
        }

        #endregion

        [OperationContract]
        public bool SaveEmployee(mas_Employee Employee, DateTime? ContractStdate, DateTime? ContractEndDate)
        {
            bool isSucess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    FirstSaveEmplyeeTransaction(Employee, context, ContractEndDate, ContractStdate);
                    mas_Employee newEmployee = new mas_Employee();
                    newEmployee = Employee;
                    context.mas_Employee.AddObject(newEmployee);

                    if (ContractEndDate != null || ContractStdate != null)
                    {
                        dtl_EmployeeContractDates newContract = new dtl_EmployeeContractDates();
                        newContract.employee_id = Employee.employee_id;
                        newContract.contract_end_date = ContractEndDate;
                        newContract.contract_start_date = ContractStdate;
                        newContract.Is_Active = Employee.dtl_Employee.isActive;

                        context.dtl_EmployeeContractDates.AddObject(newContract);
                    }

                    int i = context.SaveChanges();
                    isSucess = validateSaveUpdate(i);
                }
            }
            catch
            {
                return isSucess = false;
            }
            return isSucess;
        }

        private void FirstSaveEmplyeeTransaction(mas_Employee Employee, ERPEntities context, DateTime? ContractEndDate, DateTime? ContractStdate)
        {
            try
            {
                // mas_Employee newEmployee = context.mas_Employee.FirstOrDefault(c => c.employee_id == Employee.employee_id);
                //  dtl_Employee dtlemp = context.dtl_Employee.First(e => e.employee_id == Employee.employee_id);
                List<his_Employee> empHistoryList = new List<his_Employee>();


                //Personal Profile Category


                if (true)
                {
                    his_Employee hisEmp = new his_Employee();
                    hisEmp.Employee_Id = Employee.employee_id;
                    hisEmp.Sub_Category_Id = 1;
                    hisEmp.New_Value = Employee.address_01 + " " + Employee.address_02 + " " + Employee.address_03;
                    hisEmp.Old_Value = "INITIAL ADDRESS";
                    hisEmp.Save_User_Id = Employee.dtl_Employee.save_user_id;
                    hisEmp.SaveDate = (DateTime)Employee.dtl_Employee.save_datetime;
                    empHistoryList.Add(hisEmp);


                }


                if (true)
                {
                    his_Employee hisEmp = new his_Employee();
                    hisEmp.Employee_Id = Employee.employee_id;
                    hisEmp.Sub_Category_Id = 3;
                    hisEmp.New_Value = context.z_CompanyBranches.FirstOrDefault(c => c.companyBranch_id == Employee.dtl_Employee.branch_id).companyBranch_Name == null ? "INVALID BRANCH NAME" : context.z_CompanyBranches.FirstOrDefault(c => c.companyBranch_id == Employee.dtl_Employee.branch_id).companyBranch_Name;
                    hisEmp.Old_Value = "INITIAL COMPANY BRANCH NAME";
                    hisEmp.Save_User_Id = Employee.dtl_Employee.save_user_id;
                    hisEmp.SaveDate = (DateTime)Employee.dtl_Employee.save_datetime;
                    empHistoryList.Add(hisEmp);

                }


                if (true)
                {
                    his_Employee hisEmp = new his_Employee();
                    hisEmp.Employee_Id = Employee.employee_id;
                    hisEmp.Sub_Category_Id = 5;
                    hisEmp.New_Value = context.z_Department.FirstOrDefault(c => c.department_id == Employee.dtl_Employee.department_id).department_name == null ? "INVALID DAPARTMENT NAME" : context.z_Department.FirstOrDefault(c => c.department_id == Employee.dtl_Employee.department_id).department_name;
                    hisEmp.Old_Value = "INITIAL DEPARTMENT NAME";
                    hisEmp.Save_User_Id = Employee.dtl_Employee.save_user_id;
                    hisEmp.SaveDate = (DateTime)Employee.dtl_Employee.save_datetime;
                    empHistoryList.Add(hisEmp);


                }


                if (true)
                {
                    his_Employee hisEmp = new his_Employee();
                    hisEmp.Employee_Id = Employee.dtl_Employee.employee_id;
                    hisEmp.Sub_Category_Id = 2;
                    hisEmp.New_Value = context.z_Designation.FirstOrDefault(c => c.designation_id == Employee.dtl_Employee.designation_id).designation == null ? "INVALID DESIGNATION" : context.z_Designation.FirstOrDefault(c => c.designation_id == Employee.dtl_Employee.designation_id).designation;
                    hisEmp.Old_Value = "INITIAL DESIGNATION ";
                    hisEmp.SaveDate = (DateTime)Employee.dtl_Employee.save_datetime;
                    hisEmp.Save_User_Id = Employee.dtl_Employee.save_user_id;
                    empHistoryList.Add(hisEmp);


                }

                if (true)
                {
                    his_Employee hisEmp = new his_Employee();
                    hisEmp.Employee_Id = Employee.dtl_Employee.employee_id;
                    hisEmp.Sub_Category_Id = 4;
                    hisEmp.New_Value = context.z_Section.FirstOrDefault(c => c.section_id == Employee.dtl_Employee.section_id).section_name == null ? "INVALID SECTION VALUE" : context.z_Section.FirstOrDefault(c => c.section_id == Employee.dtl_Employee.section_id).section_name;
                    hisEmp.Old_Value = "INITIAL SECTION VALUE";
                    hisEmp.Save_User_Id = Employee.dtl_Employee.save_user_id;
                    hisEmp.SaveDate = (DateTime)Employee.dtl_Employee.save_datetime;
                    empHistoryList.Add(hisEmp);

                }


                if (true)
                {
                    his_Employee hisEmp = new his_Employee();
                    hisEmp.Employee_Id = Employee.dtl_Employee.employee_id;
                    hisEmp.Sub_Category_Id = 6;
                    hisEmp.New_Value = context.z_Grade.FirstOrDefault(c => c.grade_id == Employee.dtl_Employee.grade_id).grade == null ? "INVALID GRADE" : context.z_Grade.FirstOrDefault(c => c.grade_id == Employee.dtl_Employee.grade_id).grade;
                    hisEmp.Old_Value = "INITIAL GRADE";
                    hisEmp.Save_User_Id = Employee.dtl_Employee.save_user_id;
                    hisEmp.SaveDate = (DateTime)Employee.dtl_Employee.save_datetime;
                    empHistoryList.Add(hisEmp);
                }

                if (true)
                {
                    his_Employee hisEmp = new his_Employee();
                    hisEmp.Employee_Id = Employee.dtl_Employee.employee_id;
                    hisEmp.Sub_Category_Id = 7;
                    hisEmp.New_Value = context.z_PaymentMethod.FirstOrDefault(c => c.paymet_method_id == Employee.dtl_Employee.payment_methord_id).payment_method == null ? "INVALID PAYMENT METHOD" : hisEmp.New_Value = context.z_PaymentMethod.FirstOrDefault(c => c.paymet_method_id == Employee.dtl_Employee.payment_methord_id).payment_method;
                    hisEmp.Old_Value = "INITIAL PAYMENT METHOD";
                    hisEmp.Save_User_Id = Employee.dtl_Employee.save_user_id;
                    hisEmp.SaveDate = (DateTime)Employee.dtl_Employee.save_datetime;
                    empHistoryList.Add(hisEmp);
                }

                if (true)
                {
                    his_Employee hisEmp = new his_Employee();
                    hisEmp.Employee_Id = Employee.employee_id;
                    hisEmp.Sub_Category_Id = 11;
                    hisEmp.New_Value = Employee.first_name == null ? "INVALID FIRST NAME" : Employee.first_name;
                    hisEmp.Old_Value = "INITIAL FIRSTNAME";
                    hisEmp.Save_User_Id = Employee.dtl_Employee.save_user_id;
                    hisEmp.SaveDate = (DateTime)Employee.dtl_Employee.save_datetime;
                    empHistoryList.Add(hisEmp);

                }

                if (true)
                {
                    his_Employee hisEmp = new his_Employee();
                    hisEmp.Employee_Id = Employee.employee_id;
                    hisEmp.Sub_Category_Id = 12;
                    hisEmp.New_Value = Employee.second_name == null ? "INVALID SECOND NAME" : Employee.second_name;
                    hisEmp.Old_Value = "INITIAL SECOND NAME";
                    hisEmp.Save_User_Id = Employee.modified_user_id;
                    hisEmp.SaveDate = (DateTime)Employee.dtl_Employee.save_datetime;
                    empHistoryList.Add(hisEmp);

                }

                if (true)
                {
                    his_Employee hisEmp = new his_Employee();
                    hisEmp.Employee_Id = Employee.employee_id;
                    hisEmp.Sub_Category_Id = 13;
                    hisEmp.New_Value = Employee.surname == null ? "INVALID SURNAME" : Employee.surname;
                    hisEmp.Old_Value = "INITIAL SURNAME";
                    hisEmp.Save_User_Id = Employee.dtl_Employee.save_user_id;
                    hisEmp.SaveDate = (DateTime)Employee.dtl_Employee.save_datetime;
                    empHistoryList.Add(hisEmp);

                }

                if (true)
                {
                    his_Employee hisEmp = new his_Employee();
                    hisEmp.Employee_Id = Employee.employee_id;
                    hisEmp.Sub_Category_Id = 16;
                    hisEmp.New_Value = context.z_Town.FirstOrDefault(c => c.town_id == Employee.town_id).town_name == null ? "INVALID TOWN" : context.z_Town.FirstOrDefault(c => c.town_id == Employee.town_id).town_name;
                    hisEmp.Old_Value = "INITIAL TOWN NAME";
                    hisEmp.Save_User_Id = Employee.dtl_Employee.save_user_id;
                    hisEmp.SaveDate = (DateTime)Employee.dtl_Employee.save_datetime;
                    empHistoryList.Add(hisEmp);

                }

                if (true)
                {
                    his_Employee hisEmp = new his_Employee();
                    hisEmp.Employee_Id = Employee.employee_id;
                    hisEmp.Sub_Category_Id = 15;
                    hisEmp.New_Value = context.z_City.FirstOrDefault(c => c.city_id == Employee.city_id).city == null ? "INVALID CITY" : context.z_City.FirstOrDefault(c => c.city_id == Employee.city_id).city;
                    hisEmp.Old_Value = "INITIAL CITY NAME";
                    hisEmp.Save_User_Id = Employee.dtl_Employee.save_user_id;
                    hisEmp.SaveDate = (DateTime)Employee.dtl_Employee.save_datetime;
                    empHistoryList.Add(hisEmp);

                }


                if (true)
                {
                    his_Employee hisEmp = new his_Employee();
                    hisEmp.Employee_Id = Employee.employee_id;
                    hisEmp.Sub_Category_Id = 14;
                    hisEmp.New_Value = context.z_Gender.FirstOrDefault(c => c.gender_id == Employee.gender_id).gender == null ? "INVALID GENDER" : context.z_Gender.FirstOrDefault(c => c.gender_id == Employee.gender_id).gender;
                    hisEmp.Old_Value = "INITIAL GENDER";
                    hisEmp.Save_User_Id = Employee.dtl_Employee.save_user_id;
                    hisEmp.SaveDate = (DateTime)Employee.dtl_Employee.save_datetime;
                    empHistoryList.Add(hisEmp);

                }

                if (true)
                {
                    his_Employee hisEmp = new his_Employee();
                    hisEmp.Employee_Id = Employee.employee_id;
                    hisEmp.Sub_Category_Id = 17;
                    hisEmp.New_Value = Employee.birthday == null ? "DOB UNAVAILABLE" : Employee.birthday.ToString();
                    hisEmp.Old_Value = "INITIAL DOB";
                    hisEmp.Save_User_Id = Employee.dtl_Employee.save_user_id;
                    hisEmp.SaveDate = (DateTime)Employee.dtl_Employee.save_datetime;
                    empHistoryList.Add(hisEmp);

                }

                if (true)
                {
                    his_Employee hisEmp = new his_Employee();
                    hisEmp.Employee_Id = Employee.employee_id;
                    hisEmp.Sub_Category_Id = 18;
                    hisEmp.New_Value = Employee.nic == null ? "NIC UNAVAILABLE" : Employee.nic;
                    hisEmp.Old_Value = "INITIAL NIC";
                    hisEmp.Save_User_Id = Employee.dtl_Employee.save_user_id;
                    hisEmp.SaveDate = (DateTime)Employee.dtl_Employee.save_datetime;
                    empHistoryList.Add(hisEmp);

                }


                if (true)
                {
                    his_Employee hisEmp = new his_Employee();
                    hisEmp.Employee_Id = Employee.employee_id;
                    hisEmp.Sub_Category_Id = 19;
                    hisEmp.New_Value = context.z_CivilState.FirstOrDefault(c => c.civi_status_id == Employee.civil_status_id).civil_status == null ? "CIVIL STATUS VALUE UNAVAILABLE" : context.z_CivilState.FirstOrDefault(c => c.civi_status_id == Employee.civil_status_id).civil_status;
                    hisEmp.Old_Value = "INITIAL CIVIL STATUS";
                    hisEmp.Save_User_Id = Employee.dtl_Employee.save_user_id;
                    hisEmp.SaveDate = (DateTime)Employee.dtl_Employee.save_datetime;
                    empHistoryList.Add(hisEmp);

                }

                if (true)
                {
                    his_Employee hisEmp = new his_Employee();
                    hisEmp.Employee_Id = Employee.employee_id;
                    hisEmp.Sub_Category_Id = 20;
                    hisEmp.New_Value = Employee.telephone == null ? "TELEPHONE NUMBER UNAVAILABLE" : Employee.telephone.ToString();
                    hisEmp.Old_Value = "INITIAL TELEPHONE NUMBER";
                    hisEmp.Save_User_Id = Employee.dtl_Employee.save_user_id;
                    hisEmp.SaveDate = (DateTime)Employee.dtl_Employee.save_datetime;
                    empHistoryList.Add(hisEmp);

                }


                if (true)
                {
                    his_Employee hisEmp = new his_Employee();
                    hisEmp.Employee_Id = Employee.employee_id;
                    hisEmp.Sub_Category_Id = 21;
                    hisEmp.New_Value = Employee.mobile == null ? "MOBILE NUMBER UNAVAIALBLE" : Employee.mobile.ToString();
                    hisEmp.Old_Value = "INITIAL MOBILE NUMBER ";
                    hisEmp.Save_User_Id = Employee.dtl_Employee.save_user_id;
                    hisEmp.SaveDate = (DateTime)Employee.dtl_Employee.save_datetime;
                    empHistoryList.Add(hisEmp);

                }



                if (true)
                {
                    his_Employee hisEmp = new his_Employee();
                    hisEmp.Employee_Id = Employee.employee_id;
                    hisEmp.Sub_Category_Id = 22;
                    hisEmp.New_Value = Employee.email == null ? "E-MAIL NOT AVAILABLE" : Employee.email;
                    hisEmp.Old_Value = "INITIAL E-MAIL ";
                    hisEmp.Save_User_Id = Employee.dtl_Employee.save_user_id;
                    hisEmp.SaveDate = (DateTime)Employee.dtl_Employee.save_datetime;
                    empHistoryList.Add(hisEmp);

                }

                if (true)
                {
                    his_Employee hisEmp = new his_Employee();
                    hisEmp.Employee_Id = Employee.employee_id;
                    hisEmp.Sub_Category_Id = 23;
                    hisEmp.New_Value = Employee.dtl_Employee.join_date == null ? "JOIN DATE NOT AVAILABLE" : Employee.dtl_Employee.join_date.Value.ToShortDateString();
                    hisEmp.Old_Value = "INITIAL JOIN DATE ";
                    hisEmp.Save_User_Id = Employee.dtl_Employee.save_user_id;
                    hisEmp.SaveDate = (DateTime)Employee.dtl_Employee.save_datetime;
                    empHistoryList.Add(hisEmp);

                }

                if (true)
                {
                    his_Employee hisEmp = new his_Employee();
                    hisEmp.Employee_Id = Employee.employee_id;
                    hisEmp.Sub_Category_Id = 24;
                    hisEmp.New_Value = Employee.dtl_Employee.resign_date == null ? "RESIGN DATE NOT AVAILABLE" : Employee.dtl_Employee.resign_date.Value.ToShortDateString();
                    hisEmp.Old_Value = "INITIAL RESIGN DATE ";
                    hisEmp.Save_User_Id = Employee.dtl_Employee.save_user_id;
                    hisEmp.SaveDate = (DateTime)Employee.dtl_Employee.save_datetime;
                    empHistoryList.Add(hisEmp);

                }

                if (true)
                {
                    // DateTime? OlCondate = context.dtl_EmployeeContractDates.FirstOrDefault(c => c.employee_id == Employee.employee_id).contract_end_date;

                    his_Employee hisEmp = new his_Employee();
                    hisEmp.Employee_Id = Employee.employee_id;
                    hisEmp.Sub_Category_Id = 24;
                    hisEmp.New_Value = ContractEndDate == null ? "CONTRACT END DATE NOT AVAILABLE" : ContractEndDate.Value.ToShortDateString();
                    hisEmp.Old_Value = "INITIAL CONTRACT END DATE ";
                    hisEmp.Save_User_Id = Employee.dtl_Employee.save_user_id;
                    hisEmp.SaveDate = (DateTime)Employee.dtl_Employee.save_datetime;
                    empHistoryList.Add(hisEmp);
                }

                if (true)
                {
                    //  DateTime? OlCondate = context.dtl_EmployeeContractDates.FirstOrDefault(c => c.employee_id == Employee.employee_id).contract_start_date;

                    his_Employee hisEmp = new his_Employee();
                    hisEmp.Employee_Id = Employee.employee_id;
                    hisEmp.Sub_Category_Id = 24;
                    hisEmp.New_Value = ContractStdate == null ? "CONTRACT END DATE NOT AVAILABLE" : ContractEndDate.Value.ToShortDateString();
                    hisEmp.Old_Value = "INITIAL CONTRACT START DATE ";
                    hisEmp.Save_User_Id = Employee.dtl_Employee.save_user_id;
                    hisEmp.SaveDate = (DateTime)Employee.dtl_Employee.save_datetime;
                    empHistoryList.Add(hisEmp);
                }


                if (true)
                {
                    his_Employee hisEmp = new his_Employee();
                    hisEmp.Employee_Id = Employee.employee_id;
                    hisEmp.Sub_Category_Id = 26;
                    hisEmp.New_Value = Employee.initials == null ? "EMPLOYEE INITIALS NOT AVAILABLE" : Employee.initials;
                    hisEmp.Old_Value = "INITIAL NAME-INITIALS ";
                    hisEmp.Save_User_Id = Employee.dtl_Employee.save_user_id;
                    hisEmp.SaveDate = (DateTime)Employee.dtl_Employee.save_datetime;
                    empHistoryList.Add(hisEmp);

                }

                if (true)
                {
                    his_Employee hisEmp = new his_Employee();
                    hisEmp.Employee_Id = Employee.employee_id;
                    hisEmp.Sub_Category_Id = 25;
                    hisEmp.New_Value = context.z_Title.FirstOrDefault(c => c.title_id == Employee.title_id).title_name == null ? "TITLE NAME NOT AVAILABLE" : context.z_Title.FirstOrDefault(c => c.title_id == Employee.title_id).title_name;
                    hisEmp.Old_Value = "INITIAL TITLE DATE ";
                    hisEmp.Save_User_Id = Employee.dtl_Employee.save_user_id;
                    hisEmp.SaveDate = (DateTime)Employee.dtl_Employee.save_datetime;
                    empHistoryList.Add(hisEmp);

                }





                //Payroll Category

                if (true)
                {
                    his_Employee hisEmp = new his_Employee();
                    hisEmp.Employee_Id = Employee.dtl_Employee.employee_id;
                    hisEmp.Sub_Category_Id = 8;
                    hisEmp.New_Value = Employee.dtl_Employee.basic_salary == null ? "BASIC SALARY NOT AVAILABLE" : Employee.dtl_Employee.basic_salary.ToString();
                    hisEmp.Old_Value = "INITIAL BASIC SALARY";
                    hisEmp.Save_User_Id = Employee.dtl_Employee.save_user_id;
                    hisEmp.SaveDate = (DateTime)Employee.dtl_Employee.save_datetime;
                    empHistoryList.Add(hisEmp);
                }

                if (true)
                {
                    his_Employee hisEmp = new his_Employee();
                    hisEmp.Employee_Id = Employee.employee_id;
                    hisEmp.Sub_Category_Id = 9;
                    hisEmp.New_Value = Employee.epf_no == null ? "ETF NUMBER NOT AVAILABLE" : Employee.epf_no;
                    hisEmp.Old_Value = "INITIAL EPF NUMBER ";
                    hisEmp.Save_User_Id = Employee.dtl_Employee.save_user_id;
                    hisEmp.SaveDate = (DateTime)Employee.dtl_Employee.save_datetime;
                    empHistoryList.Add(hisEmp);
                }

                if (true)
                {
                    his_Employee hisEmp = new his_Employee();
                    hisEmp.Employee_Id = Employee.employee_id;
                    hisEmp.Sub_Category_Id = 10;
                    hisEmp.New_Value = Employee.etf_no == null ? "" : Employee.etf_no;
                    hisEmp.Old_Value = "INITIAL ETF NUMBER ";
                    hisEmp.Save_User_Id = Employee.dtl_Employee.save_user_id;
                    hisEmp.SaveDate = (DateTime)Employee.dtl_Employee.save_datetime;
                    empHistoryList.Add(hisEmp);


                }


                if (empHistoryList.Count > 0)
                {
                    foreach (his_Employee item in empHistoryList)
                    {
                        context.his_Employee.AddObject(item);
                    }
                }



            }
            catch (Exception)
            {


            }
        }

        [OperationContract]
        public bool UpdateEmployee(mas_Employee Employee, DateTime? ContractStdate, DateTime? ContractEndDate)
        {
            bool isSucess = false;
            try
            {
                if (Employee.employee_id != null)
                {
                    using (var context = new ERPEntities())
                    {
                        mas_Employee oldEmployee = context.mas_Employee.First(e => e.employee_id.Equals(Employee.employee_id));
                        dtl_EmployeeContractDates oldcontract = context.dtl_EmployeeContractDates.FirstOrDefault(c => c.employee_id == Employee.employee_id);
                        if (oldEmployee != null)
                        {
                            //SaveEmplyeeTransaction(Employee, context, ContractStdate, ContractEndDate);

                            oldEmployee.employee_id = Employee.employee_id;
                            oldEmployee.emp_id = Employee.emp_id;
                            oldEmployee.epf_no = Employee.epf_no;
                            oldEmployee.etf_no = Employee.etf_no;
                            oldEmployee.initials = Employee.initials;
                            oldEmployee.first_name = Employee.first_name;
                            oldEmployee.second_name = Employee.second_name;
                            oldEmployee.surname = Employee.surname;
                            oldEmployee.address_01 = Employee.address_01;
                            oldEmployee.address_02 = Employee.address_02;
                            oldEmployee.address_03 = Employee.address_03;
                            oldEmployee.image = Employee.image;
                            oldEmployee.portalImage = Employee.portalImage;
                            oldEmployee.town_id = Employee.town_id;
                            oldEmployee.city_id = Employee.city_id;
                            oldEmployee.gender_id = Employee.gender_id;
                            oldEmployee.birthday = Employee.birthday;
                            oldEmployee.nic = Employee.nic;
                            oldEmployee.civil_status_id = Employee.civil_status_id;
                            oldEmployee.telephone = Employee.telephone;
                            oldEmployee.mobile = Employee.mobile;
                            oldEmployee.email = Employee.email;
                            oldEmployee.religen_id = Employee.religen_id;
                            oldEmployee.save_user_id = Employee.save_user_id;
                            oldEmployee.save_datetime = Employee.save_datetime;
                            oldEmployee.modified_user_id = Employee.modified_user_id;
                            oldEmployee.modified_datetime = Employee.modified_datetime;
                            oldEmployee.delete_user_id = Employee.delete_user_id;
                            oldEmployee.delete_datetime = Employee.delete_datetime;
                            oldEmployee.isdelete = Employee.isdelete;
                            oldEmployee.office_email = Employee.office_email;
                            oldEmployee.office_mobile = Employee.office_mobile;
                            oldEmployee.title_id = Employee.title_id;

                            if (Employee.his_Employee != null && Employee.his_Employee.Count > 0)
                            {
                                foreach (var Record in Employee.his_Employee)
                                {
                                    his_Employee SaveObj = new his_Employee();
                                    SaveObj.Employee_Id = Record.Employee_Id;
                                    SaveObj.Sub_Category_Id = Record.Sub_Category_Id;
                                    SaveObj.Old_Value = Record.Old_Value;
                                    SaveObj.New_Value = Record.New_Value;
                                    SaveObj.Save_User_Id = Record.Save_User_Id;
                                    SaveObj.SaveDate = Record.SaveDate;
                                    SaveObj.EffectiveDate = Record.EffectiveDate;
                                    oldEmployee.his_Employee.Add(SaveObj);
                                }
                            }


                            dtl_Employee dtlemp = context.dtl_Employee.First(e => e.employee_id.Equals(Employee.dtl_Employee.employee_id));

                            dtlemp.basic_salary = Employee.dtl_Employee.basic_salary;
                            dtlemp.department_id = Employee.dtl_Employee.department_id;
                            dtlemp.designation_id = Employee.dtl_Employee.designation_id;
                            dtlemp.grade_id = Employee.dtl_Employee.grade_id;
                            dtlemp.section_id = Employee.dtl_Employee.section_id;
                            dtlemp.join_date = Employee.dtl_Employee.join_date;
                            dtlemp.prmernant_active_date = Employee.dtl_Employee.prmernant_active_date;
                            dtlemp.isActive = Employee.dtl_Employee.isActive;
                            dtlemp.modified_datetime = Employee.dtl_Employee.modified_datetime;
                            dtlemp.modified_user_id = Employee.dtl_Employee.modified_user_id;
                            dtlemp.payment_methord_id = Employee.dtl_Employee.payment_methord_id;
                            dtlemp.branch_id = Employee.dtl_Employee.branch_id;
                            dtlemp.isActive = Employee.dtl_Employee.isActive;
                            dtlemp.isdelete = Employee.dtl_Employee.isdelete;
                            dtlemp.isExecutive = Employee.dtl_Employee.isExecutive;
                            dtlemp.cost_center_id = Employee.dtl_Employee.cost_center_id;
                            dtlemp.division_id = Employee.dtl_Employee.division_id;
                            dtlemp.tea_amount = Employee.dtl_Employee.tea_amount;
                            dtlemp.dust_amount = Employee.dtl_Employee.dust_amount;
                            dtlemp.resign_date = Employee.dtl_Employee.resign_date;
                            dtlemp.auto_ot = Employee.dtl_Employee.auto_ot;
                            dtlemp.salary_scale_id = Employee.dtl_Employee.salary_scale_id;
                            dtlemp.leave_end_date = Employee.dtl_Employee.leave_end_date;
                            if (oldcontract != null)
                            {
                                oldcontract.contract_start_date = ContractStdate;
                                oldcontract.contract_end_date = ContractEndDate;
                                oldcontract.Is_Active = Employee.dtl_Employee.isActive;
                            }
                            else
                            {
                                if (ContractStdate != null && ContractEndDate != null)
                                {
                                    dtl_EmployeeContractDates newContract = new dtl_EmployeeContractDates();
                                    newContract.employee_id = Employee.employee_id;
                                    newContract.contract_start_date = ContractStdate;
                                    newContract.contract_end_date = ContractEndDate;
                                    newContract.Is_Active = Employee.dtl_Employee.isActive;

                                    context.dtl_EmployeeContractDates.AddObject(newContract);
                                }
                            }

                            #region EmployeeUniversity

                            if (Employee.dtl_Employee_ProfessionalQualifications != null && Employee.dtl_Employee_ProfessionalQualifications.Count > 0)
                            {
                                foreach (var item in Employee.dtl_Employee_ProfessionalQualifications)
                                {
                                    if (context.dtl_Employee_ProfessionalQualifications.Count(c => c.professional_qualification_id == item.professional_qualification_id) == 0)
                                    {
                                        dtl_Employee_ProfessionalQualifications temp = new dtl_Employee_ProfessionalQualifications();
                                        temp.employee_id = item.employee_id;
                                        temp.gradeclass_id = item.gradeclass_id;
                                        temp.univercity_Course_id = item.univercity_Course_id;
                                        temp.isActive = item.isActive;
                                        temp.isdelete = item.isdelete;
                                        temp.save_datetime = item.save_datetime;
                                        temp.save_user_id = item.save_user_id;
                                        temp.gpa = item.gpa;
                                        temp.duration = item.duration;

                                        context.dtl_Employee_ProfessionalQualifications.AddObject(temp);
                                    }
                                    else
                                    {
                                        dtl_Employee_ProfessionalQualifications temp = context.dtl_Employee_ProfessionalQualifications.FirstOrDefault(c => c.professional_qualification_id == item.professional_qualification_id);
                                        temp.employee_id = item.employee_id;
                                        temp.gradeclass_id = item.gradeclass_id;
                                        temp.univercity_Course_id = item.univercity_Course_id;
                                        temp.isActive = item.isActive;
                                        temp.isdelete = item.isdelete;
                                        temp.modified_datetime = item.modified_datetime;
                                        temp.modified_user_id = item.modified_user_id;
                                        temp.gpa = item.gpa;
                                        temp.duration = item.duration;
                                    }
                                }
                            }

                            #endregion

                            #region EmployeeExtraCurricular

                            if (Employee.dtl_EmployeeExtraCurricularActivities != null && Employee.dtl_EmployeeExtraCurricularActivities.Count > 0)
                            {
                                foreach (var item in Employee.dtl_EmployeeExtraCurricularActivities)
                                {
                                    if (context.dtl_EmployeeExtraCurricularActivities.Count(c => c.emp_extra_curricular_id == item.emp_extra_curricular_id) == 0)
                                    {
                                        dtl_EmployeeExtraCurricularActivities temp = new dtl_EmployeeExtraCurricularActivities();
                                        temp.employee_id = item.employee_id;
                                        temp.activities_category_id = item.activities_category_id;
                                        temp.activities_category_name = item.activities_category_name;
                                        temp.isActive = item.isActive;
                                        temp.isdelete = item.isdelete;
                                        temp.save_datetime = item.save_datetime;
                                        temp.save_user_id = item.save_user_id;

                                        context.dtl_EmployeeExtraCurricularActivities.AddObject(temp);
                                    }

                                    else
                                    {
                                        dtl_EmployeeExtraCurricularActivities temp = context.dtl_EmployeeExtraCurricularActivities.FirstOrDefault(c => c.emp_extra_curricular_id == item.emp_extra_curricular_id);
                                        temp.employee_id = item.employee_id;
                                        temp.activities_category_id = item.activities_category_id;
                                        temp.activities_category_name = item.activities_category_name;
                                        temp.isActive = item.isActive;
                                        temp.isdelete = item.isdelete;
                                        temp.modified_datetime = item.modified_datetime;
                                        temp.modified_user_id = item.modified_user_id;
                                    }
                                }
                            }

                            #endregion

                            #region EmployeeSocialMedia

                            if (Employee.dtl_EmployeeSocialMediaDetails != null && Employee.dtl_EmployeeSocialMediaDetails.Count > 0)
                            {
                                foreach (var item in Employee.dtl_EmployeeSocialMediaDetails)
                                {
                                    if (context.dtl_EmployeeSocialMediaDetails.Count(c => c.emp_social_media_id == item.emp_social_media_id) == 0)
                                    {
                                        dtl_EmployeeSocialMediaDetails temp = new dtl_EmployeeSocialMediaDetails();
                                        temp.employee_id = item.employee_id;
                                        temp.social_media_id = item.social_media_id;
                                        temp.social_media_links = item.social_media_links;
                                        temp.isActive = item.isActive;
                                        temp.isdelete = item.isdelete;
                                        temp.save_datetime = item.save_datetime;
                                        temp.save_user_id = item.save_user_id;

                                        context.dtl_EmployeeSocialMediaDetails.AddObject(temp);
                                    }
                                    else
                                    {
                                        dtl_EmployeeSocialMediaDetails temp = context.dtl_EmployeeSocialMediaDetails.FirstOrDefault(c => c.emp_social_media_id == item.emp_social_media_id);
                                        temp.employee_id = item.employee_id;
                                        temp.social_media_id = item.social_media_id;
                                        temp.social_media_links = item.social_media_links;
                                        temp.isActive = item.isActive;
                                        temp.isdelete = item.isdelete;
                                        temp.modified_user_id = item.save_user_id;
                                        temp.modified_datetime = item.modified_datetime;
                                    }

                                }
                            }

                            #endregion

                            #region EmployeeAcadamic

                            if (Employee.dtl_EmployeeAcadamicQualification != null && Employee.dtl_EmployeeAcadamicQualification.Count > 0)
                            {
                                foreach (var item in Employee.dtl_EmployeeAcadamicQualification)
                                {
                                    if (context.dtl_EmployeeAcadamicQualification.Count(c => c.academic_qualification_id == item.academic_qualification_id) == 0)
                                    {
                                        dtl_EmployeeAcadamicQualification temp = new dtl_EmployeeAcadamicQualification();
                                        temp.employee_id = item.employee_id;
                                        temp.school_grade_id = item.school_grade_id;
                                        temp.schoolsubject_id = item.schoolsubject_id;
                                        temp.school_name = item.school_name;
                                        temp.isActive = item.isActive;
                                        temp.isdelete = item.isdelete;
                                        temp.save_datetime = item.save_datetime;
                                        temp.save_user_id = item.save_user_id;
                                        temp.school_name = item.school_name;

                                        context.dtl_EmployeeAcadamicQualification.AddObject(temp);

                                    }
                                    else
                                    {
                                        dtl_EmployeeAcadamicQualification temp = context.dtl_EmployeeAcadamicQualification.FirstOrDefault(c => c.academic_qualification_id == item.academic_qualification_id);
                                        temp.employee_id = item.employee_id;
                                        temp.school_grade_id = item.school_grade_id;
                                        temp.schoolsubject_id = item.schoolsubject_id;
                                        temp.school_name = item.school_name;
                                        temp.isActive = item.isActive;
                                        temp.school_name = item.school_name;
                                        temp.modified_datetime = item.modified_datetime;
                                        temp.modified_user_id = item.modified_user_id;
                                    }

                                }
                            }

                            #endregion

                            #region InterstDetails

                            if (Employee.dtl_EmployeeInterestDetails != null && Employee.dtl_EmployeeInterestDetails.Count > 0)
                            {
                                foreach (var item in Employee.dtl_EmployeeInterestDetails)
                                {
                                    if (context.dtl_EmployeeInterestDetails.Count(c => c.emp_interest_id == item.emp_interest_id) == 0)
                                    {
                                        dtl_EmployeeInterestDetails temp = new dtl_EmployeeInterestDetails();
                                        temp.employee_id = item.employee_id;
                                        temp.interest_field_id = item.interest_field_id;
                                        temp.description = item.description;
                                        temp.isActive = item.isActive;
                                        temp.isdelete = item.isdelete;
                                        temp.save_datetime = item.save_datetime;
                                        temp.save_user_id = item.save_user_id;

                                        context.dtl_EmployeeInterestDetails.AddObject(temp);
                                    }
                                    else
                                    {
                                        dtl_EmployeeInterestDetails temp = context.dtl_EmployeeInterestDetails.FirstOrDefault(c => c.emp_interest_id == item.emp_interest_id);
                                        temp.employee_id = item.employee_id;
                                        temp.interest_field_id = item.interest_field_id;
                                        temp.description = item.description;
                                        temp.isActive = item.isActive;
                                        temp.isdelete = item.isdelete;
                                        temp.modified_datetime = item.modified_datetime;
                                        temp.modified_user_id = item.modified_user_id;
                                    }

                                }
                            }


                            #endregion

                            #region EmployeeSkill

                            if (Employee.dtl_EmployeeSkillType != null && Employee.dtl_EmployeeSkillType.Count > 0)
                            {
                                foreach (var item in Employee.dtl_EmployeeSkillType)
                                {
                                    if (context.dtl_EmployeeSkillType.Count(c => c.emp_skill_id == item.emp_skill_id) == 0)
                                    {
                                        dtl_EmployeeSkillType temp = new dtl_EmployeeSkillType();
                                        temp.employee_id = item.employee_id;
                                        temp.skill_type_id = item.skill_type_id;
                                        temp.description = item.description;
                                        temp.isActive = item.isActive;
                                        temp.isdelete = item.isdelete;
                                        temp.save_datetime = item.save_datetime;
                                        temp.save_user_id = item.save_user_id;

                                        context.dtl_EmployeeSkillType.AddObject(temp);
                                    }
                                    else
                                    {
                                        dtl_EmployeeSkillType temp = context.dtl_EmployeeSkillType.FirstOrDefault(c => c.emp_skill_id == item.emp_skill_id);

                                        temp.employee_id = item.employee_id;
                                        temp.skill_type_id = item.skill_type_id;
                                        temp.description = item.description;
                                        temp.isActive = item.isActive;
                                        temp.isdelete = item.isdelete;
                                        temp.modified_datetime = item.modified_datetime;
                                        temp.modified_user_id = item.modified_user_id;

                                    }
                                }
                            }

                            #endregion

                            #region work experience

                            if (Employee.dtl_WorkExperienceDetails != null && Employee.dtl_WorkExperienceDetails.Count > 0)
                            {
                                foreach (var item in Employee.dtl_WorkExperienceDetails)
                                {
                                    if (context.dtl_WorkExperienceDetails.Count(c => c.work_experience_id == item.work_experience_id) == 0)
                                    {
                                        dtl_WorkExperienceDetails temp = new dtl_WorkExperienceDetails();
                                        temp.employee_id = item.employee_id;
                                        temp.work_experience_id = item.work_experience_id;
                                        temp.workDuration = item.workDuration;
                                        temp.designation = item.designation;
                                        temp.joinDate = item.joinDate;
                                        temp.previous_company_name = item.previous_company_name;
                                        temp.resign_reason = item.resign_reason;
                                        temp.resignDate = item.resignDate;
                                        temp.isActive = item.isActive;
                                        temp.isdelete = item.isdelete;
                                        temp.save_datetime = item.delete_datetime;
                                        temp.save_user_id = item.save_user_id;

                                        context.dtl_WorkExperienceDetails.AddObject(temp);

                                    }

                                    else
                                    {
                                        dtl_WorkExperienceDetails temp = context.dtl_WorkExperienceDetails.FirstOrDefault(c => c.work_experience_id == item.work_experience_id);
                                        temp.employee_id = item.employee_id;
                                        temp.work_experience_id = item.work_experience_id;
                                        temp.workDuration = item.workDuration;
                                        temp.joinDate = item.joinDate;
                                        temp.designation = item.designation;
                                        temp.previous_company_name = item.previous_company_name;
                                        temp.resign_reason = item.resign_reason;
                                        temp.resignDate = item.resignDate;
                                        temp.isActive = item.isActive;
                                        temp.modified_datetime = item.modified_datetime;
                                        temp.modified_user_id = item.modified_user_id;
                                    }

                                }
                            }
                            #endregion

                            #region FamilyDetails

                            if (Employee.dtl_EmployeeFamilyDetails != null && Employee.dtl_EmployeeFamilyDetails.Count > 0)
                            {
                                foreach (var item in Employee.dtl_EmployeeFamilyDetails)
                                {
                                    if (context.dtl_EmployeeFamilyDetails.Count(c => c.family_member_id == item.family_member_id) == 0)
                                    {
                                        dtl_EmployeeFamilyDetails temp = new dtl_EmployeeFamilyDetails();
                                        temp.employee_id = item.employee_id;
                                        temp.birthday = item.birthday;
                                        temp.employee_state = item.employee_state;
                                        temp.first_name = item.first_name;
                                        temp.is_depend = item.is_depend;
                                        temp.relationship = item.relationship;
                                        temp.work_place = item.work_place;
                                        temp.second_name = item.second_name;
                                        temp.isActive = item.isActive;
                                        temp.isdelete = item.isdelete;
                                        temp.save_user_id = item.save_user_id;
                                        temp.save_datetime = item.save_datetime;

                                        context.dtl_EmployeeFamilyDetails.AddObject(temp);

                                    }
                                    else
                                    {
                                        dtl_EmployeeFamilyDetails temp = context.dtl_EmployeeFamilyDetails.FirstOrDefault(c => c.family_member_id == item.family_member_id);
                                        temp.employee_id = item.employee_id;
                                        temp.birthday = item.birthday;
                                        temp.employee_state = item.employee_state;
                                        temp.first_name = item.first_name;
                                        temp.is_depend = item.is_depend;
                                        temp.relationship = item.relationship;
                                        temp.work_place = item.work_place;
                                        temp.second_name = item.second_name;
                                        temp.isActive = item.isActive;
                                        temp.modified_datetime = item.modified_datetime;
                                        temp.modified_user_id = item.modified_user_id;

                                    }
                                }
                            }

                            #endregion

                            #region Awords Details

                            if (Employee.dtl_EmployeeAwardsDetails != null && Employee.dtl_EmployeeAwardsDetails.Count > 0)
                            {
                                foreach (var item in Employee.dtl_EmployeeAwardsDetails)
                                {
                                    if (context.dtl_EmployeeAwardsDetails.Count(c => c.award_id == item.award_id) == 0)
                                    {
                                        dtl_EmployeeAwardsDetails temp = new dtl_EmployeeAwardsDetails();
                                        temp.employee_id = item.employee_id;

                                        temp.award_name = item.award_name;
                                        temp.award_description = item.award_description;
                                        temp.awards_announcement_date = item.awards_announcement_date;
                                        temp.isActive = item.isActive;
                                        temp.isdelete = item.isdelete;
                                        temp.save_datetime = item.save_datetime;
                                        temp.save_user_id = item.save_user_id;

                                        context.dtl_EmployeeAwardsDetails.AddObject(temp);
                                    }
                                    else
                                    {
                                        dtl_EmployeeAwardsDetails temp = context.dtl_EmployeeAwardsDetails.FirstOrDefault(c => c.award_id == item.award_id);

                                        temp.award_name = item.award_name;
                                        temp.award_description = item.award_description;
                                        temp.awards_announcement_date = item.awards_announcement_date;
                                        temp.isActive = item.isActive;
                                        temp.modified_datetime = item.modified_datetime;
                                        temp.modified_user_id = item.modified_user_id;
                                    }
                                }
                            }

                            #endregion

                            #region BloodType

                            if (Employee.dtl_Employee_Blood_and_Health != null && Employee.dtl_Employee_Blood_and_Health.Count > 0)
                            {
                                foreach (var item in Employee.dtl_Employee_Blood_and_Health)
                                {
                                    if (context.dtl_Employee_Blood_and_Health.Count(c => c.emp_blood_type_id == item.emp_blood_type_id) == 0)
                                    {
                                        dtl_Employee_Blood_and_Health temp = new dtl_Employee_Blood_and_Health();
                                        temp.employee_id = item.employee_id;
                                        temp.bloodGroupType_id = item.bloodGroupType_id;
                                        temp.bloodGroupType = item.bloodGroupType;
                                        temp.diagnosis = item.diagnosis;
                                        temp.isActive = item.isActive;
                                        temp.isdelete = item.isdelete;
                                        temp.save_datetime = item.save_datetime;
                                        temp.save_user_id = item.save_user_id;

                                        context.dtl_Employee_Blood_and_Health.AddObject(temp);
                                    }
                                    else
                                    {
                                        dtl_Employee_Blood_and_Health temp = context.dtl_Employee_Blood_and_Health.FirstOrDefault(c => c.emp_blood_type_id == item.emp_blood_type_id);

                                        temp.bloodGroupType_id = item.bloodGroupType_id;
                                        temp.bloodGroupType = item.bloodGroupType;
                                        temp.diagnosis = item.diagnosis;
                                        temp.isActive = item.isActive;
                                        temp.modified_datetime = item.modified_datetime;
                                        temp.modified_user_id = item.modified_user_id;
                                    }
                                }
                            }


                            #endregion

                            #region OtherOfficialDetails

                            if (Employee.dtl_EmployeeOtherOfficialDetails != null)
                            {

                                var CurrentEmployeeOtherOfficitalDetails = context.dtl_EmployeeOtherOfficialDetails.FirstOrDefault(c => c.employee_id == Employee.dtl_EmployeeOtherOfficialDetails.employee_id);

                                if (CurrentEmployeeOtherOfficitalDetails == null)
                                {
                                    dtl_EmployeeOtherOfficialDetails temp = new dtl_EmployeeOtherOfficialDetails();
                                    temp.employee_id = Employee.dtl_EmployeeOtherOfficialDetails.employee_id;
                                    temp.account_name = Employee.dtl_EmployeeOtherOfficialDetails.account_name;
                                    temp.display_name = Employee.dtl_EmployeeOtherOfficialDetails.display_name;
                                    temp.epf_name = Employee.dtl_EmployeeOtherOfficialDetails.epf_name;
                                    temp.etf_name = Employee.dtl_EmployeeOtherOfficialDetails.etf_name;
                                    temp.fingerprint_device_ID = Employee.dtl_EmployeeOtherOfficialDetails.fingerprint_device_ID;
                                    temp.isActive = Employee.dtl_EmployeeOtherOfficialDetails.isActive;
                                    temp.isdelete = Employee.dtl_EmployeeOtherOfficialDetails.isdelete;
                                    temp.save_datetime = Employee.dtl_EmployeeOtherOfficialDetails.save_datetime;
                                    temp.save_user_id = Employee.dtl_EmployeeOtherOfficialDetails.save_user_id;

                                    context.dtl_EmployeeOtherOfficialDetails.AddObject(temp);

                                }
                                else
                                {

                                    CurrentEmployeeOtherOfficitalDetails.account_name = Employee.dtl_EmployeeOtherOfficialDetails.account_name;
                                    CurrentEmployeeOtherOfficitalDetails.display_name = Employee.dtl_EmployeeOtherOfficialDetails.display_name;
                                    CurrentEmployeeOtherOfficitalDetails.epf_name = Employee.dtl_EmployeeOtherOfficialDetails.epf_name;
                                    CurrentEmployeeOtherOfficitalDetails.etf_name = Employee.dtl_EmployeeOtherOfficialDetails.etf_name;
                                    CurrentEmployeeOtherOfficitalDetails.fingerprint_device_ID = Employee.dtl_EmployeeOtherOfficialDetails.fingerprint_device_ID;
                                    CurrentEmployeeOtherOfficitalDetails.isActive = Employee.dtl_EmployeeOtherOfficialDetails.isActive;
                                    CurrentEmployeeOtherOfficitalDetails.modified_datetime = Employee.dtl_EmployeeOtherOfficialDetails.modified_datetime;
                                    CurrentEmployeeOtherOfficitalDetails.modified_user_id = Employee.dtl_EmployeeOtherOfficialDetails.modified_user_id;

                                }

                            }

                            #endregion

                            #region Employee OtherContactDetails

                            if (Employee.dtl_Employee_ContactDetails != null)
                            {
                                var CurrentOtherContactDetails = context.dtl_Employee_ContactDetails.FirstOrDefault(c => c.employee_id == Employee.dtl_Employee_ContactDetails.employee_id);

                                if (CurrentOtherContactDetails == null)
                                {
                                    dtl_Employee_ContactDetails temp = new dtl_Employee_ContactDetails();
                                    temp.employee_id = Employee.dtl_Employee_ContactDetails.employee_id;
                                    temp.permant_addr_line1 = Employee.dtl_Employee_ContactDetails.permant_addr_line1;
                                    temp.permant_addr_line2 = Employee.dtl_Employee_ContactDetails.permant_addr_line2;
                                    temp.permant_addr_line3 = Employee.dtl_Employee_ContactDetails.permant_addr_line3;
                                    temp.mobile_number1 = Employee.dtl_Employee_ContactDetails.mobile_number1;
                                    temp.mobile_number2 = Employee.dtl_Employee_ContactDetails.mobile_number2;
                                    temp.perment_addr_tp = Employee.dtl_Employee_ContactDetails.perment_addr_tp;
                                    temp.office_mobile = Employee.dtl_Employee_ContactDetails.office_mobile;
                                    temp.persanal_email = Employee.dtl_Employee_ContactDetails.persanal_email;
                                    temp.emg_contact_name1 = Employee.dtl_Employee_ContactDetails.emg_contact_name1;
                                    temp.emg_contact_number1 = Employee.dtl_Employee_ContactDetails.emg_contact_number1;
                                    temp.office_tp = Employee.dtl_Employee_ContactDetails.office_tp;
                                    temp.office_email = Employee.dtl_Employee_ContactDetails.office_email;
                                    temp.emg_contact_name2 = Employee.dtl_Employee_ContactDetails.emg_contact_name2;
                                    temp.emg_contact_number2 = Employee.dtl_Employee_ContactDetails.emg_contact_number2;
                                    temp.isActive = Employee.dtl_Employee_ContactDetails.isActive;
                                    temp.isdelete = Employee.dtl_Employee_ContactDetails.isdelete;
                                    temp.save_datetime = Employee.dtl_Employee_ContactDetails.save_datetime;
                                    temp.save_user_id = Employee.dtl_Employee_ContactDetails.save_user_id;

                                    context.dtl_Employee_ContactDetails.AddObject(temp);
                                }
                                else
                                {


                                    CurrentOtherContactDetails.permant_addr_line1 = Employee.dtl_Employee_ContactDetails.permant_addr_line1;
                                    CurrentOtherContactDetails.permant_addr_line2 = Employee.dtl_Employee_ContactDetails.permant_addr_line2;
                                    CurrentOtherContactDetails.permant_addr_line3 = Employee.dtl_Employee_ContactDetails.permant_addr_line3;
                                    CurrentOtherContactDetails.mobile_number1 = Employee.dtl_Employee_ContactDetails.mobile_number1;
                                    CurrentOtherContactDetails.mobile_number2 = Employee.dtl_Employee_ContactDetails.mobile_number2;
                                    CurrentOtherContactDetails.perment_addr_tp = Employee.dtl_Employee_ContactDetails.perment_addr_tp;
                                    CurrentOtherContactDetails.office_mobile = Employee.dtl_Employee_ContactDetails.office_mobile;
                                    CurrentOtherContactDetails.persanal_email = Employee.dtl_Employee_ContactDetails.persanal_email;
                                    CurrentOtherContactDetails.emg_contact_name1 = Employee.dtl_Employee_ContactDetails.emg_contact_name1;
                                    CurrentOtherContactDetails.emg_contact_number1 = Employee.dtl_Employee_ContactDetails.emg_contact_number1;
                                    CurrentOtherContactDetails.office_tp = Employee.dtl_Employee_ContactDetails.office_tp;
                                    CurrentOtherContactDetails.office_email = Employee.dtl_Employee_ContactDetails.office_email;
                                    CurrentOtherContactDetails.emg_contact_name2 = Employee.dtl_Employee_ContactDetails.emg_contact_name2;
                                    CurrentOtherContactDetails.emg_contact_number2 = Employee.dtl_Employee_ContactDetails.emg_contact_number2;
                                    CurrentOtherContactDetails.isActive = Employee.dtl_Employee_ContactDetails.isActive;
                                    CurrentOtherContactDetails.modified_datetime = Employee.dtl_Employee_ContactDetails.modified_datetime;
                                    CurrentOtherContactDetails.modified_user_id = Employee.dtl_Employee_ContactDetails.modified_user_id;


                                }
                            }



                            #endregion

                            #region Employee Other Basic Details

                            if (Employee.dtl_EmployeeOtherBasicDetails != null)
                            {
                                var currentOtherBasicDetails = context.dtl_EmployeeOtherBasicDetails.FirstOrDefault(c => c.employee_id == Employee.dtl_EmployeeOtherBasicDetails.employee_id);

                                if (currentOtherBasicDetails == null)
                                {
                                    dtl_EmployeeOtherBasicDetails temp = new dtl_EmployeeOtherBasicDetails();
                                    temp.employee_id = Employee.dtl_EmployeeOtherBasicDetails.employee_id;
                                    temp.driving_license_no = Employee.dtl_EmployeeOtherBasicDetails.driving_license_no;
                                    temp.license_expiry_date = Employee.dtl_EmployeeOtherBasicDetails.license_expiry_date;
                                    temp.Nationality = Employee.dtl_EmployeeOtherBasicDetails.Nationality;
                                    temp.passport_expiry_date = Employee.dtl_EmployeeOtherBasicDetails.passport_expiry_date;
                                    temp.passport_no = Employee.dtl_EmployeeOtherBasicDetails.passport_no;
                                    temp.Race = Employee.dtl_EmployeeOtherBasicDetails.Race;
                                    temp.isActive = Employee.dtl_EmployeeOtherBasicDetails.isActive;
                                    temp.isdelete = Employee.dtl_EmployeeOtherBasicDetails.isdelete;
                                    temp.save_datetime = Employee.dtl_EmployeeOtherBasicDetails.save_datetime;
                                    temp.save_user_id = Employee.dtl_EmployeeOtherBasicDetails.save_user_id;

                                    context.dtl_EmployeeOtherBasicDetails.AddObject(temp);
                                }
                                else
                                {
                                    currentOtherBasicDetails.driving_license_no = Employee.dtl_EmployeeOtherBasicDetails.driving_license_no;
                                    currentOtherBasicDetails.license_expiry_date = Employee.dtl_EmployeeOtherBasicDetails.license_expiry_date;
                                    currentOtherBasicDetails.Nationality = Employee.dtl_EmployeeOtherBasicDetails.Nationality;
                                    currentOtherBasicDetails.passport_expiry_date = Employee.dtl_EmployeeOtherBasicDetails.passport_expiry_date;
                                    currentOtherBasicDetails.passport_no = Employee.dtl_EmployeeOtherBasicDetails.passport_no;
                                    currentOtherBasicDetails.Race = Employee.dtl_EmployeeOtherBasicDetails.Race;
                                    currentOtherBasicDetails.isActive = Employee.dtl_EmployeeOtherBasicDetails.isActive;
                                    currentOtherBasicDetails.isdelete = Employee.dtl_EmployeeOtherBasicDetails.isdelete;
                                    currentOtherBasicDetails.modified_datetime = Employee.dtl_EmployeeOtherBasicDetails.modified_datetime;
                                    currentOtherBasicDetails.modified_user_id = Employee.dtl_EmployeeOtherBasicDetails.modified_user_id;

                                }
                            }

                            #endregion

                            #region Employee Additional Details

                            if (Employee.dtl_employee_Additional_details != null)
                            {
                                var currentAdditionalDetails = context.dtl_employee_Additional_details.FirstOrDefault(c => c.employee_id == Employee.dtl_employee_Additional_details.employee_id);

                                if (currentAdditionalDetails == null)
                                {
                                    dtl_employee_Additional_details temp = new dtl_employee_Additional_details();
                                    temp.employee_id = Employee.dtl_employee_Additional_details.employee_id;
                                    temp.electorial_divition_id = Employee.dtl_employee_Additional_details.electorial_divition_id;
                                    temp.election_center_id = Employee.dtl_employee_Additional_details.election_center_id;
                                    temp.grama_niladhari_devision_id = Employee.dtl_employee_Additional_details.grama_niladhari_devision_id;
                                    temp.nearest_police_station_id = Employee.dtl_employee_Additional_details.nearest_police_station_id;
                                    temp.race_id = Employee.dtl_employee_Additional_details.race_id;
                                    temp.nationality_id = Employee.dtl_employee_Additional_details.nationality_id;
                                    temp.dis_between_resident_to_hometown = Employee.dtl_employee_Additional_details.dis_between_resident_to_hometown;
                                    temp.isactive = Employee.dtl_employee_Additional_details.isactive;
                                    temp.isdelete = Employee.dtl_employee_Additional_details.isdelete;
                                    temp.save_user_id = Employee.dtl_employee_Additional_details.save_user_id;
                                    temp.save_datetime = Employee.dtl_employee_Additional_details.save_datetime;

                                    context.dtl_employee_Additional_details.AddObject(temp);
                                }

                                else
                                {
                                    currentAdditionalDetails.electorial_divition_id = Employee.dtl_employee_Additional_details.electorial_divition_id;
                                    currentAdditionalDetails.election_center_id = Employee.dtl_employee_Additional_details.election_center_id;
                                    currentAdditionalDetails.grama_niladhari_devision_id = Employee.dtl_employee_Additional_details.grama_niladhari_devision_id;
                                    currentAdditionalDetails.nearest_police_station_id = Employee.dtl_employee_Additional_details.nearest_police_station_id;
                                    currentAdditionalDetails.race_id = Employee.dtl_employee_Additional_details.race_id;
                                    currentAdditionalDetails.nationality_id = Employee.dtl_employee_Additional_details.nationality_id;
                                    currentAdditionalDetails.dis_between_resident_to_hometown = Employee.dtl_employee_Additional_details.dis_between_resident_to_hometown;
                                    currentAdditionalDetails.isactive = Employee.dtl_employee_Additional_details.isactive;
                                    currentAdditionalDetails.isdelete = Employee.dtl_employee_Additional_details.isdelete;
                                    currentAdditionalDetails.modified_user_id = Employee.dtl_employee_Additional_details.save_user_id;
                                    currentAdditionalDetails.modified_datetime = Employee.dtl_employee_Additional_details.save_datetime;
                                }
                            }


                            #endregion

                            int i = context.SaveChanges();
                            isSucess = validateSaveUpdate(i);
                            return isSucess;
                        }
                    }
                }
            }
            catch (Exception)
            {
                return isSucess = false;
            }
            return isSucess;
        }

        private void SaveEmplyeeTransaction(mas_Employee Employee, ERPEntities context, DateTime? contractStart, DateTime? contarctEnd)
        {
            try
            {

                mas_Employee OldEmployee = context.mas_Employee.FirstOrDefault(c => c.employee_id == Employee.employee_id);
                dtl_Employee dtlemp = context.dtl_Employee.First(e => e.employee_id == Employee.employee_id);
                List<his_Employee> empHistoryList = new List<his_Employee>();

                if (OldEmployee != null)
                {

                    //Personal Profile Category

                    if (OldEmployee.address_01 != Employee.address_01 || OldEmployee.address_02 != Employee.address_02 || OldEmployee.address_03 != Employee.address_03)
                    {
                        his_Employee hisEmp = new his_Employee();
                        hisEmp.Employee_Id = Employee.employee_id;
                        hisEmp.Sub_Category_Id = 1;
                        hisEmp.New_Value = Employee.address_01 + " " + Employee.address_02 + " " + Employee.address_03;
                        hisEmp.Old_Value = OldEmployee.address_01 + " " + OldEmployee.address_02 + " " + OldEmployee.address_03;
                        hisEmp.Save_User_Id = Employee.modified_user_id;
                        hisEmp.SaveDate = (DateTime)Employee.modified_datetime;
                        empHistoryList.Add(hisEmp);


                    }

                    if (dtlemp.branch_id != Employee.dtl_Employee.branch_id)
                    {
                        his_Employee hisEmp = new his_Employee();
                        hisEmp.Employee_Id = Employee.employee_id;
                        hisEmp.Sub_Category_Id = 3;
                        hisEmp.New_Value = context.z_CompanyBranches.FirstOrDefault(c => c.companyBranch_id == Employee.dtl_Employee.branch_id).companyBranch_Name;
                        hisEmp.Old_Value = context.z_CompanyBranches.FirstOrDefault(c => c.companyBranch_id == OldEmployee.dtl_Employee.branch_id).companyBranch_Name;
                        hisEmp.Save_User_Id = Employee.modified_user_id;
                        hisEmp.SaveDate = (DateTime)Employee.modified_datetime;
                        empHistoryList.Add(hisEmp);

                    }


                    if (dtlemp.department_id != Employee.dtl_Employee.department_id)
                    {
                        his_Employee hisEmp = new his_Employee();
                        hisEmp.Employee_Id = Employee.employee_id;
                        hisEmp.Sub_Category_Id = 5;
                        hisEmp.New_Value = context.z_Department.FirstOrDefault(c => c.department_id == Employee.dtl_Employee.department_id).department_name;
                        hisEmp.Old_Value = context.z_Department.FirstOrDefault(c => c.department_id == OldEmployee.dtl_Employee.department_id).department_name;
                        hisEmp.Save_User_Id = Employee.modified_user_id;
                        hisEmp.SaveDate = (DateTime)Employee.modified_datetime;
                        empHistoryList.Add(hisEmp);


                    }


                    if (dtlemp.designation_id != Employee.dtl_Employee.designation_id)
                    {
                        his_Employee hisEmp = new his_Employee();
                        hisEmp.Employee_Id = Employee.dtl_Employee.employee_id;
                        hisEmp.Sub_Category_Id = 2;
                        hisEmp.New_Value = context.z_Designation.FirstOrDefault(c => c.designation_id == Employee.dtl_Employee.designation_id).designation;
                        hisEmp.Old_Value = context.z_Designation.FirstOrDefault(c => c.designation_id == OldEmployee.dtl_Employee.designation_id).designation;
                        hisEmp.SaveDate = (DateTime)Employee.modified_datetime;
                        hisEmp.Save_User_Id = Employee.modified_user_id;
                        empHistoryList.Add(hisEmp);


                    }

                    if (dtlemp.section_id != Employee.dtl_Employee.section_id)
                    {
                        his_Employee hisEmp = new his_Employee();
                        hisEmp.Employee_Id = Employee.dtl_Employee.employee_id;
                        hisEmp.Sub_Category_Id = 4;
                        hisEmp.New_Value = context.z_Section.FirstOrDefault(c => c.section_id == Employee.dtl_Employee.section_id).section_name;
                        hisEmp.Old_Value = context.z_Section.FirstOrDefault(c => c.section_id == OldEmployee.dtl_Employee.section_id).section_name;
                        hisEmp.Save_User_Id = Employee.modified_user_id;
                        hisEmp.SaveDate = (DateTime)Employee.modified_datetime;
                        empHistoryList.Add(hisEmp);

                    }


                    if (dtlemp.grade_id != Employee.dtl_Employee.grade_id)
                    {
                        his_Employee hisEmp = new his_Employee();
                        hisEmp.Employee_Id = Employee.dtl_Employee.employee_id;
                        hisEmp.Sub_Category_Id = 6;
                        hisEmp.New_Value = context.z_Grade.FirstOrDefault(c => c.grade_id == Employee.dtl_Employee.grade_id).grade;
                        hisEmp.Old_Value = context.z_Grade.FirstOrDefault(c => c.grade_id == OldEmployee.dtl_Employee.grade_id).grade;
                        hisEmp.Save_User_Id = Employee.modified_user_id;
                        hisEmp.SaveDate = (DateTime)Employee.modified_datetime;
                        empHistoryList.Add(hisEmp);
                    }

                    if (dtlemp.payment_methord_id != Employee.dtl_Employee.payment_methord_id)
                    {
                        his_Employee hisEmp = new his_Employee();
                        hisEmp.Employee_Id = Employee.dtl_Employee.employee_id;
                        hisEmp.Sub_Category_Id = 7;
                        hisEmp.New_Value = context.z_PaymentMethod.FirstOrDefault(c => c.paymet_method_id == Employee.dtl_Employee.payment_methord_id).payment_method;
                        hisEmp.Old_Value = context.z_PaymentMethod.FirstOrDefault(c => c.paymet_method_id == OldEmployee.dtl_Employee.payment_methord_id).payment_method;
                        hisEmp.Save_User_Id = Employee.modified_user_id;
                        hisEmp.SaveDate = (DateTime)Employee.modified_datetime;
                        empHistoryList.Add(hisEmp);
                    }

                    if (OldEmployee.first_name != Employee.first_name)
                    {
                        his_Employee hisEmp = new his_Employee();
                        hisEmp.Employee_Id = Employee.employee_id;
                        hisEmp.Sub_Category_Id = 11;
                        hisEmp.New_Value = Employee.first_name;
                        hisEmp.Old_Value = OldEmployee.first_name;
                        hisEmp.Save_User_Id = Employee.modified_user_id;
                        hisEmp.SaveDate = (DateTime)Employee.modified_datetime;
                        empHistoryList.Add(hisEmp);

                    }

                    if (OldEmployee.second_name != Employee.second_name)
                    {
                        his_Employee hisEmp = new his_Employee();
                        hisEmp.Employee_Id = Employee.employee_id;
                        hisEmp.Sub_Category_Id = 12;
                        hisEmp.New_Value = Employee.second_name;
                        hisEmp.Old_Value = OldEmployee.second_name;
                        hisEmp.Save_User_Id = Employee.modified_user_id;
                        hisEmp.SaveDate = (DateTime)Employee.modified_datetime;
                        empHistoryList.Add(hisEmp);

                    }

                    if (OldEmployee.surname != Employee.surname)
                    {
                        his_Employee hisEmp = new his_Employee();
                        hisEmp.Employee_Id = Employee.employee_id;
                        hisEmp.Sub_Category_Id = 13;
                        hisEmp.New_Value = Employee.surname;
                        hisEmp.Old_Value = OldEmployee.surname;
                        hisEmp.Save_User_Id = Employee.modified_user_id;
                        hisEmp.SaveDate = (DateTime)Employee.modified_datetime;
                        empHistoryList.Add(hisEmp);

                    }

                    if (OldEmployee.town_id != Employee.town_id)
                    {
                        his_Employee hisEmp = new his_Employee();
                        hisEmp.Employee_Id = Employee.employee_id;
                        hisEmp.Sub_Category_Id = 16;
                        hisEmp.New_Value = context.z_Town.FirstOrDefault(c => c.town_id == Employee.town_id).town_name;
                        hisEmp.Old_Value = context.z_Town.FirstOrDefault(c => c.town_id == OldEmployee.town_id).town_name;
                        hisEmp.Save_User_Id = Employee.modified_user_id;
                        hisEmp.SaveDate = (DateTime)Employee.modified_datetime;
                        empHistoryList.Add(hisEmp);

                    }

                    if (OldEmployee.city_id != Employee.city_id)
                    {
                        his_Employee hisEmp = new his_Employee();
                        hisEmp.Employee_Id = Employee.employee_id;
                        hisEmp.Sub_Category_Id = 15;
                        hisEmp.New_Value = context.z_City.FirstOrDefault(c => c.city_id == Employee.city_id).city;
                        hisEmp.Old_Value = context.z_City.FirstOrDefault(c => c.city_id == OldEmployee.city_id).city;
                        hisEmp.Save_User_Id = Employee.modified_user_id;
                        hisEmp.SaveDate = (DateTime)Employee.modified_datetime;
                        empHistoryList.Add(hisEmp);

                    }


                    if (OldEmployee.gender_id != Employee.gender_id)
                    {
                        his_Employee hisEmp = new his_Employee();
                        hisEmp.Employee_Id = Employee.employee_id;
                        hisEmp.Sub_Category_Id = 14;
                        hisEmp.New_Value = context.z_Gender.FirstOrDefault(c => c.gender_id == Employee.gender_id).gender;
                        hisEmp.Old_Value = context.z_Gender.FirstOrDefault(c => c.gender_id == OldEmployee.gender_id).gender;
                        hisEmp.Save_User_Id = Employee.modified_user_id;
                        hisEmp.SaveDate = (DateTime)Employee.modified_datetime;
                        empHistoryList.Add(hisEmp);

                    }

                    if (OldEmployee.birthday != Employee.birthday)
                    {
                        his_Employee hisEmp = new his_Employee();
                        hisEmp.Employee_Id = Employee.employee_id;
                        hisEmp.Sub_Category_Id = 17;
                        hisEmp.New_Value = Convert.ToString(Employee.birthday);
                        hisEmp.Old_Value = Convert.ToString(OldEmployee.birthday);
                        hisEmp.Save_User_Id = Employee.modified_user_id;
                        hisEmp.SaveDate = (DateTime)Employee.modified_datetime;
                        empHistoryList.Add(hisEmp);

                    }

                    if (OldEmployee.nic != Employee.nic)
                    {
                        his_Employee hisEmp = new his_Employee();
                        hisEmp.Employee_Id = Employee.employee_id;
                        hisEmp.Sub_Category_Id = 18;
                        hisEmp.New_Value = Convert.ToString(Employee.nic);
                        hisEmp.Old_Value = Convert.ToString(OldEmployee.nic);
                        hisEmp.Save_User_Id = Employee.modified_user_id;
                        hisEmp.SaveDate = (DateTime)Employee.modified_datetime;
                        empHistoryList.Add(hisEmp);

                    }


                    if (OldEmployee.civil_status_id != Employee.civil_status_id)
                    {
                        his_Employee hisEmp = new his_Employee();
                        hisEmp.Employee_Id = Employee.employee_id;
                        hisEmp.Sub_Category_Id = 19;
                        hisEmp.New_Value = context.z_CivilState.FirstOrDefault(c => c.civi_status_id == Employee.civil_status_id).civil_status;
                        hisEmp.Old_Value = context.z_CivilState.FirstOrDefault(c => c.civi_status_id == OldEmployee.civil_status_id).civil_status;
                        hisEmp.Save_User_Id = Employee.modified_user_id;
                        hisEmp.SaveDate = (DateTime)Employee.modified_datetime;
                        empHistoryList.Add(hisEmp);

                    }

                    if (OldEmployee.telephone != Employee.telephone)
                    {
                        his_Employee hisEmp = new his_Employee();
                        hisEmp.Employee_Id = Employee.employee_id;
                        hisEmp.Sub_Category_Id = 20;
                        hisEmp.New_Value = Convert.ToString(Employee.telephone);
                        hisEmp.Old_Value = Convert.ToString(OldEmployee.telephone);
                        hisEmp.Save_User_Id = Employee.modified_user_id;
                        hisEmp.SaveDate = (DateTime)Employee.modified_datetime;
                        empHistoryList.Add(hisEmp);

                    }

                    if (OldEmployee.mobile != Employee.mobile)
                    {
                        his_Employee hisEmp = new his_Employee();
                        hisEmp.Employee_Id = Employee.employee_id;
                        hisEmp.Sub_Category_Id = 21;
                        hisEmp.New_Value = Convert.ToString(Employee.mobile);
                        hisEmp.Old_Value = Convert.ToString(OldEmployee.mobile);
                        hisEmp.Save_User_Id = Employee.modified_user_id;
                        hisEmp.SaveDate = (DateTime)Employee.modified_datetime;
                        empHistoryList.Add(hisEmp);

                    }



                    if (OldEmployee.email != Employee.email)
                    {
                        his_Employee hisEmp = new his_Employee();
                        hisEmp.Employee_Id = Employee.employee_id;
                        hisEmp.Sub_Category_Id = 22;
                        hisEmp.New_Value = Employee.email;
                        hisEmp.Old_Value = OldEmployee.email;
                        hisEmp.Save_User_Id = Employee.modified_user_id;
                        hisEmp.SaveDate = (DateTime)Employee.modified_datetime;
                        empHistoryList.Add(hisEmp);

                    }

                    if (OldEmployee.dtl_Employee.join_date != Employee.dtl_Employee.join_date)
                    {
                        his_Employee hisEmp = new his_Employee();
                        hisEmp.Employee_Id = Employee.employee_id;
                        hisEmp.Sub_Category_Id = 23;
                        hisEmp.New_Value = Convert.ToString(Employee.dtl_Employee.join_date);
                        hisEmp.Old_Value = Convert.ToString(OldEmployee.dtl_Employee.join_date);
                        hisEmp.Save_User_Id = Employee.modified_user_id;
                        hisEmp.SaveDate = (DateTime)Employee.modified_datetime;
                        empHistoryList.Add(hisEmp);

                    }

                    if (OldEmployee.dtl_Employee.resign_date != Employee.dtl_Employee.resign_date)
                    {
                        his_Employee hisEmp = new his_Employee();
                        hisEmp.Employee_Id = Employee.employee_id;
                        hisEmp.Sub_Category_Id = 24;
                        hisEmp.New_Value = Convert.ToString(Employee.dtl_Employee.resign_date);
                        hisEmp.Old_Value = Convert.ToString(OldEmployee.dtl_Employee.resign_date);
                        hisEmp.Save_User_Id = Employee.modified_user_id;
                        hisEmp.SaveDate = (DateTime)Employee.modified_datetime;
                        empHistoryList.Add(hisEmp);

                    }

                    if (contractStart != null)
                    {
                        DateTime? OlCondate = context.dtl_EmployeeContractDates.FirstOrDefault(c => c.employee_id == Employee.employee_id).contract_start_date;

                        his_Employee hisEmp = new his_Employee();
                        hisEmp.Employee_Id = Employee.employee_id;
                        hisEmp.Sub_Category_Id = 24;
                        hisEmp.New_Value = Convert.ToString(contractStart);
                        hisEmp.Old_Value = Convert.ToString(OlCondate);
                        hisEmp.Save_User_Id = Employee.modified_user_id;
                        hisEmp.SaveDate = (DateTime)Employee.modified_datetime;
                        empHistoryList.Add(hisEmp);
                    }

                    if (contarctEnd != null)
                    {
                        DateTime? OlCondate = context.dtl_EmployeeContractDates.FirstOrDefault(c => c.employee_id == Employee.employee_id).contract_end_date;

                        his_Employee hisEmp = new his_Employee();
                        hisEmp.Employee_Id = Employee.employee_id;
                        hisEmp.Sub_Category_Id = 24;
                        hisEmp.New_Value = Convert.ToString(contarctEnd);
                        hisEmp.Old_Value = Convert.ToString(OlCondate);
                        hisEmp.Save_User_Id = Employee.modified_user_id;
                        hisEmp.SaveDate = (DateTime)Employee.modified_datetime;
                        empHistoryList.Add(hisEmp);
                    }

                    if (OldEmployee.initials != Employee.initials)
                    {
                        his_Employee hisEmp = new his_Employee();
                        hisEmp.Employee_Id = Employee.employee_id;
                        hisEmp.Sub_Category_Id = 26;
                        hisEmp.New_Value = Employee.initials;
                        hisEmp.Old_Value = OldEmployee.initials;
                        hisEmp.Save_User_Id = Employee.modified_user_id;
                        hisEmp.SaveDate = (DateTime)Employee.modified_datetime;
                        empHistoryList.Add(hisEmp);

                    }

                    if (OldEmployee.title_id != Employee.title_id)
                    {
                        his_Employee hisEmp = new his_Employee();
                        hisEmp.Employee_Id = Employee.employee_id;
                        hisEmp.Sub_Category_Id = 25;
                        hisEmp.New_Value = context.z_Title.FirstOrDefault(c => c.title_id == Employee.title_id).title_name;
                        hisEmp.Old_Value = context.z_Title.FirstOrDefault(c => c.title_id == OldEmployee.title_id).title_name;
                        hisEmp.Save_User_Id = Employee.modified_user_id;
                        hisEmp.SaveDate = (DateTime)Employee.modified_datetime;
                        empHistoryList.Add(hisEmp);

                    }

                    //Payroll Category

                    if (dtlemp.basic_salary != Employee.dtl_Employee.basic_salary)
                    {
                        his_Employee hisEmp = new his_Employee();
                        hisEmp.Employee_Id = Employee.dtl_Employee.employee_id;
                        hisEmp.Sub_Category_Id = 8;
                        hisEmp.New_Value = Convert.ToString(Employee.dtl_Employee.basic_salary);
                        hisEmp.Old_Value = Convert.ToString(OldEmployee.dtl_Employee.basic_salary);
                        hisEmp.Save_User_Id = Employee.modified_user_id;
                        hisEmp.SaveDate = (DateTime)Employee.modified_datetime;
                        empHistoryList.Add(hisEmp);
                    }

                    if (OldEmployee.epf_no != Employee.epf_no)
                    {
                        his_Employee hisEmp = new his_Employee();
                        hisEmp.Employee_Id = Employee.employee_id;
                        hisEmp.Sub_Category_Id = 9;
                        hisEmp.New_Value = Employee.etf_no;
                        hisEmp.Old_Value = OldEmployee.etf_no;
                        hisEmp.Save_User_Id = Employee.modified_user_id;
                        hisEmp.SaveDate = (DateTime)Employee.modified_datetime;
                        empHistoryList.Add(hisEmp);
                    }

                    if (OldEmployee.etf_no != Employee.etf_no)
                    {
                        his_Employee hisEmp = new his_Employee();
                        hisEmp.Employee_Id = Employee.employee_id;
                        hisEmp.Sub_Category_Id = 10;
                        hisEmp.New_Value = Employee.etf_no;
                        hisEmp.Old_Value = OldEmployee.etf_no;
                        hisEmp.Save_User_Id = Employee.modified_user_id;
                        hisEmp.SaveDate = (DateTime)Employee.modified_datetime;
                        empHistoryList.Add(hisEmp);


                    }



                    if (empHistoryList.Count > 0)
                    {
                        foreach (his_Employee item in empHistoryList)
                        {
                            context.his_Employee.AddObject(item);
                        }
                    }




                }





            }
            catch (Exception)
            {

            }
        }

        [OperationContract]
        public bool DeleteEmployee(dtl_Employee Employee)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    dtl_Employee oldEmployee = context.dtl_Employee.First(c => c.employee_id == Employee.employee_id);

                    if (oldEmployee != null)
                    {
                        oldEmployee.isdelete = true;
                        oldEmployee.delete_datetime = Employee.delete_datetime;
                        oldEmployee.delete_user_id = Employee.delete_user_id;
                        oldEmployee.mas_Employee.isdelete = true;
                        oldEmployee.mas_Employee.delete_datetime = Employee.delete_datetime;
                        oldEmployee.mas_Employee.delete_user_id = Employee.delete_user_id;
                        oldEmployee.isActive = false;

                        if (oldEmployee.mas_Employee.dtl_Employee_ProfessionalQualifications != null)
                        {
                            oldEmployee.mas_Employee.dtl_Employee_ProfessionalQualifications.ToList().ForEach(c => { c.isdelete = true; c.isActive = false; });
                        }

                        if (oldEmployee.mas_Employee.dtl_EmployeeExtraCurricularActivities != null)
                        {
                            oldEmployee.mas_Employee.dtl_EmployeeExtraCurricularActivities.ToList().ForEach(c => { c.isdelete = true; c.isActive = false; });
                        }

                        if (oldEmployee.mas_Employee.dtl_EmployeeSocialMediaDetails != null)
                        {
                            oldEmployee.mas_Employee.dtl_EmployeeSocialMediaDetails.ToList().ForEach(c => { c.isdelete = true; c.isActive = false; });
                        }

                        if (oldEmployee.mas_Employee.dtl_EmployeeSkillType != null)
                        {
                            oldEmployee.mas_Employee.dtl_EmployeeSkillType.ToList().ForEach(c => { c.isdelete = true; c.isActive = false; });
                        }

                        if (oldEmployee.mas_Employee.dtl_EmployeeInterestDetails != null)
                        {
                            oldEmployee.mas_Employee.dtl_EmployeeInterestDetails.ToList().ForEach(c => { c.isdelete = true; c.isActive = false; });
                        }

                        if (oldEmployee.mas_Employee.dtl_EmployeeAcadamicQualification != null)
                        {
                            oldEmployee.mas_Employee.dtl_EmployeeAcadamicQualification.ToList().ForEach(c => { c.isdelete = true; c.isActive = false; });
                        }

                        if (oldEmployee.mas_Employee.dtl_EmployeeFamilyDetails != null)
                        {
                            oldEmployee.mas_Employee.dtl_EmployeeFamilyDetails.ToList().ForEach(c => { c.isdelete = true; c.isActive = false; });
                        }

                        if (oldEmployee.mas_Employee.dtl_EmployeeAwardsDetails != null)
                        {
                            oldEmployee.mas_Employee.dtl_EmployeeAwardsDetails.ToList().ForEach(c => { c.isdelete = true; c.isActive = false; });
                        }

                        if (oldEmployee.mas_Employee.dtl_Employee_Blood_and_Health != null)
                        {
                            oldEmployee.mas_Employee.dtl_Employee_Blood_and_Health.ToList().ForEach(c => { c.isdelete = true; c.isActive = false; });
                        }

                        if (oldEmployee.mas_Employee.dtl_EmployeeOtherOfficialDetails != null)
                        {
                            oldEmployee.mas_Employee.dtl_EmployeeOtherOfficialDetails.isActive = false;
                            oldEmployee.mas_Employee.dtl_EmployeeOtherOfficialDetails.isdelete = true;
                        }

                        if (oldEmployee.mas_Employee.dtl_Employee_ContactDetails != null)
                        {
                            oldEmployee.mas_Employee.dtl_Employee_ContactDetails.isActive = false;
                            oldEmployee.mas_Employee.dtl_Employee_ContactDetails.isdelete = true;
                        }

                        if (oldEmployee.mas_Employee.dtl_EmployeeOtherBasicDetails != null)
                        {
                            oldEmployee.mas_Employee.dtl_EmployeeOtherBasicDetails.isActive = false;
                            oldEmployee.mas_Employee.dtl_EmployeeOtherBasicDetails.isdelete = true;
                        }

                        if (oldEmployee.mas_Employee.dtl_EmployeeWorkexperienceDetails != null)
                        {
                            oldEmployee.mas_Employee.dtl_EmployeeWorkexperienceDetails.isActive = false;
                            oldEmployee.mas_Employee.dtl_EmployeeWorkexperienceDetails.isdelete = true;
                        }

                        return validateSaveUpdate(context.SaveChanges());
                    }
                    else
                        return false;
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        [OperationContract]
        public IEnumerable<z_Gender> getGenders()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_Gender.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<z_CivilState> getCivilStates()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_CivilState.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<z_Town> GetTowns()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_Town.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        #region dtlEmployeeBenifit Operation
        [OperationContract]
        public IEnumerable<EmployeeBinifitView> GetEmployeeBenifitByEmployee(mas_Employee emp)
        {
            try
            {
                if (emp != null)
                {
                    using (var context = new ERPEntities())
                    {
                        var result = context.EmployeeBinifitViews.Where(e => e.employee_id == emp.employee_id).ToList();
                        result.ForEach(e => context.Detach(e));
                        return result;
                    }
                }
            }
            catch (Exception)
            {
                return null;
            }
            return null;
        }

        [OperationContract]
        public IEnumerable<mas_Benifit> GetBenifits()
        {
            using (var context = new ERPEntities())
            {
                var Result = context.mas_Benifit.ToList();
                Result.ForEach(e => context.Detach(e));
                return Result;
            }
        }

        [OperationContract]
        public bool SaveEmployeeBenifits(EmployeeBinifitView empBinifit)
        {
            bool isSucuess = false;
            try
            {
                if (empBinifit != null)
                {
                    using (var context = new ERPEntities())
                    {
                        dtl_EmployeeBenifilt dtlempben = new dtl_EmployeeBenifilt();
                        dtlempben.employee_id = empBinifit.employee_id;
                        dtlempben.benifit_id = empBinifit.benifit_id;
                        context.dtl_EmployeeBenifilt.AddObject(dtlempben);
                        int i = context.SaveChanges();
                        isSucuess = (this.validateSaveUpdate(i));
                    }

                }
            }
            catch (Exception)
            {
                return false;
            }

            return isSucuess;
        }

        //[OperationContract]
        //public bool UpdateEmployeeBenifits(EmployeeBinifitView empBinifit)
        //{
        //    bool isSucess = false;
        //    try
        //    {
        //        if (empBinifit != null)
        //        {
        //            using (var context = new ERPEntities())
        //            {
        //                dtl_EmployeeBenifilt oldRecode = context.dtl_EmployeeBenifilt.First(e => e.employee_id.Equals(empBinifit.employee_id) && e.benifit_id.Equals(empBinifit.benifit_id));
        //                if (oldRecode != null)
        //                {
        //                    context.dtl_EmployeeBenifilt.DeleteObject(oldRecode);
        //                    context.SaveChanges();
        //                    dtl_EmployeeBenifilt newRecode = new dtl_EmployeeBenifilt();
        //                    newRecode.employee_id = empBinifit.employee_id;
        //                    newRecode.benifit_id = empBinifit.benifit_id;
        //                    context.dtl_EmployeeBenifilt.AddObject(newRecode);
        //                    int i = context.SaveChanges();
        //                    isSucess = validateSaveUpdate(i);
        //                }
        //            }
        //        }
        //    }
        //    catch (Exception)
        //    {
        //        return false;
        //    }

        //    return isSucess;
        //}

        [OperationContract]
        public bool DeleteEmplyeeBenifits(EmployeeBinifitView empBinifit)
        {
            bool isSucess = false;
            try
            {
                if (empBinifit != null)
                {
                    using (var context = new ERPEntities())
                    {
                        dtl_EmployeeBenifilt oldRecode = context.dtl_EmployeeBenifilt.First(e => e.employee_id.Equals(empBinifit.employee_id) && e.benifit_id.Equals(empBinifit.benifit_id));
                        context.dtl_EmployeeBenifilt.DeleteObject(oldRecode);
                        int i = context.SaveChanges();
                        isSucess = validateSaveUpdate(i);
                        return isSucess;
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }

            return isSucess;
        }
        #endregion

        [OperationContract]
        public IEnumerable<UserPermissionsMasterView> GetUserPermissionsByEmployee(Guid user_id)
        {
            using (var context = new ERPEntities())
            {
                var results = context.UserPermissionsMasterViews.Where(e => e.user_id.Equals(user_id)).ToList();
                results.ForEach(e => context.Detach(e));
                return results;
            }
        }

        [OperationContract]
        public IEnumerable<UserPermissionsMasterView> GetUserPermissionsByUserLevel(Guid usr_lvl_id)
        {
            using (var context = new ERPEntities())
            {
                var results = context.UserPermissionsMasterViews.Where(e => e.user_level_id.Equals(usr_lvl_id)).ToList();
                results.ForEach(e => context.Detach(e));
                return results;
            }
        }

        [OperationContract]
        public bool SaveUserPermissions(IEnumerable<UserPermissionsMasterView> permissionView)
        {
            bool isSucess = false;
            try
            {
                if (permissionView != null)
                {
                    using (var context = new ERPEntities())
                    {
                        int i = 0;
                        foreach (UserPermissionsMasterView ps in permissionView)
                        {
                            usr_UserPermission per = context.usr_UserPermission.First(e => e.user_id.Equals(ps.user_id) && e.module_id.Equals(ps.module_id));
                            if (per != null)
                            {
                                context.usr_UserPermission.DeleteObject(per);

                                usr_UserPermission oldPer = new usr_UserPermission();
                                oldPer.user_id = ps.user_id;
                                oldPer.module_id = ps.module_id;
                                //oldPer.cansave = ps.cansave;
                                //oldPer.canview = ps.canview;
                                //oldPer.canmodify = ps.canmodify;
                                //oldPer.candelete = ps.candelete;
                                //context.usr_UserPermission.AddObject(oldPer);
                                //i = context.SaveChanges();
                            }
                            else
                            {
                                usr_UserPermission newPer = new usr_UserPermission();
                                newPer.user_id = ps.user_id;
                                newPer.module_id = ps.module_id;
                                //newPer.cansave = ps.cansave;
                                //newPer.canview = ps.canview;
                                //newPer.canmodify = ps.canmodify;
                                //newPer.candelete = ps.candelete;
                                //context.usr_UserPermission.AddObject(newPer);
                                //i = context.SaveChanges();

                            }
                        }
                        isSucess = validateSaveUpdate(i);
                        return isSucess;
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }
            return isSucess;
        }

        #region dtl_EmployeeBank Operations
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        /// 

        [OperationContract]
        public IEnumerable<EmployeeBankBranchView> newGetBankDetail(mas_Employee emp)
        {
            using (var context = new ERPEntities())
            {
                var result = context.EmployeeBankBranchViews.Where(e => e.employee_id.Equals(emp.employee_id)).ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<z_BankBranch> GetBranches()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_BankBranch.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<dtl_EmployeeBank> GetEmployeeBank()
        {
            using (var context = new ERPEntities())
            {
                var result = context.dtl_EmployeeBank.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public List<dtl_EmployeeBank> GetSearchBankDetails(mas_Employee emp)
        {
            List<dtl_EmployeeBank> BankDetails = new List<dtl_EmployeeBank>();
            using (var context = new ERPEntities())
            {
                var Result = (from Employees in context.dtl_EmployeeBank.Where(z => z.employee_id.Equals(emp.employee_id))
                              join MasEmployee in context.mas_Employee on Employees.employee_id equals MasEmployee.employee_id
                              join Banks in context.z_Bank on Employees.bank_id equals Banks.bank_id
                              join Branches in context.z_BankBranch on Employees.branch_id equals Branches.branch_id

                              select new
                              {
                                  Employees.employee_id,
                                  Employees.account_no,
                                  Employees.bank_id,
                                  Banks.bank_name,
                                  Employees.branch_id,
                                  Branches.name,
                                  MasEmployee.image,
                                  MasEmployee.initials,
                                  MasEmployee.first_name,
                                  MasEmployee.second_name
                              }).ToList();
                foreach (var items in Result)
                {
                    dtl_EmployeeBank newBankDetails = new dtl_EmployeeBank();
                    newBankDetails.employee_id = items.employee_id;
                    newBankDetails.account_no = items.account_no;

                    mas_Employee newEmployee = new mas_Employee();
                    newEmployee.initials = items.initials;
                    newEmployee.image = items.image;
                    newEmployee.first_name = items.first_name;
                    newEmployee.second_name = items.second_name;

                    z_Bank newBank = new z_Bank();
                    newBank.bank_id = items.bank_id;
                    newBank.bank_name = items.bank_name;

                    z_BankBranch newBranch = new z_BankBranch();
                    newBranch.branch_id = items.branch_id;
                    newBranch.name = items.name;

                    newBankDetails.mas_Employee = newEmployee;
                    newBankDetails.z_Bank = newBank;
                    newBankDetails.z_BankBranch = newBranch;

                    BankDetails.Add(newBankDetails);

                }
                return BankDetails;
            }
        }

        [OperationContract]
        public bool SaveBankDetails(dtl_EmployeeBank BankDetails)
        {
            bool isSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    dtl_EmployeeBank newBankDetails = new dtl_EmployeeBank();
                    newBankDetails = BankDetails;
                    context.dtl_EmployeeBank.AddObject(newBankDetails);
                    int i = context.SaveChanges();
                    isSuccess = validateSaveUpdate(i);
                    return isSuccess;
                }
            }
            catch (Exception)
            {

                return isSuccess = false;
            }
        }

        [OperationContract]
        public bool UpdateBankDetails(dtl_EmployeeBank OldBankDetail)
        {
            bool isSuccess = false;

            using (var context = new ERPEntities())
            {
                dtl_EmployeeBank oldBank = context.dtl_EmployeeBank.First(e => e.employee_id.Equals(OldBankDetail.employee_id));
                if (OldBankDetail != null)
                {
                    oldBank.employee_id = OldBankDetail.employee_id;
                    oldBank.bank_id = OldBankDetail.bank_id;
                    oldBank.branch_id = OldBankDetail.branch_id;
                    oldBank.account_no = OldBankDetail.account_no;
                    oldBank.isDefault = OldBankDetail.isDefault;
                    int i = context.SaveChanges();
                    isSuccess = validateSaveUpdate(i);
                    return isSuccess;

                }
            }

            return isSuccess;
        }


        [OperationContract]
        public bool DeleteBankDetails(EmployeeBankBranchView BankDetails)
        {
            bool isSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    EmployeeBankBranchView newBankDetails =
                        context.EmployeeBankBranchViews.First(c => c.employee_id == BankDetails.employee_id && c.bank_id == BankDetails.bank_id
                         && c.branch_id == BankDetails.branch_id);
                    if (newBankDetails != null)
                    {
                        context.EmployeeBankBranchViews.DeleteObject(newBankDetails);
                        int i = context.SaveChanges();
                        isSuccess = validateSaveUpdate(i);
                        return isSuccess;
                    }

                }
            }
            catch (Exception)
            {

                return isSuccess = false;
            }
            return isSuccess;
        }
        #endregion

        #region mas_benifits Operations

        [OperationContract]
        public List<mas_Benifit> GetSearchBenifits(string SearchString)
        {
            using (var context = new ERPEntities())
            {
                List<mas_Benifit> SBenifits = new List<mas_Benifit>();
                var benifits = context.mas_Benifit.Where(z => z.benifit_name.Contains(SearchString));
                {
                    foreach (mas_Benifit benifit_name in benifits)
                    {
                        mas_Benifit SearchBenifit = new mas_Benifit();
                        SearchBenifit.benifit_id = benifit_name.benifit_id;
                        SearchBenifit.benifit_name = benifit_name.benifit_name;
                        SearchBenifit.isActive = benifit_name.isActive;
                        SBenifits.Add(SearchBenifit);
                    }
                }
                return SBenifits;
            }
        }

        [OperationContract]
        public bool SaveBenifits(mas_Benifit Benifits)
        {
            bool isSuccess = false;
            try
            {
                if (Benifits != null)
                {
                    using (var context = new ERPEntities())
                    {
                        mas_Benifit newBenifits = new mas_Benifit();
                        newBenifits.benifit_id = Benifits.benifit_id;
                        newBenifits.benifit_name = Benifits.benifit_name;
                        newBenifits.isActive = Benifits.isActive;
                        newBenifits.save_datetime = Benifits.save_datetime;
                        newBenifits.save_user_id = Benifits.save_user_id;
                        newBenifits.modified_datetime = Benifits.modified_datetime;
                        newBenifits.modified_user_id = Benifits.modified_user_id;
                        newBenifits.delete_datetime = Benifits.delete_datetime;
                        newBenifits.delete_user_id = Benifits.delete_user_id;
                        newBenifits.isdelete = false;
                        context.mas_Benifit.AddObject(newBenifits);
                        int i = context.SaveChanges();
                        isSuccess = validateSaveUpdate(i);
                        return isSuccess;
                    }
                }
            }
            catch (Exception)
            {

                return isSuccess = false;
            }
            return isSuccess;
        }

        [OperationContract]
        public bool UpdateBenifits(mas_Benifit Benifits)
        {
            bool isSuccess = false;
            try
            {
                if (Benifits != null)
                {
                    using (var context = new ERPEntities())
                    {
                        mas_Benifit newBenifits = context.mas_Benifit.First(c => c.benifit_id == Benifits.benifit_id);
                        if (newBenifits != null)
                        {
                            newBenifits.benifit_name = Benifits.benifit_name;
                            newBenifits.isActive = Benifits.isActive;
                            newBenifits.modified_datetime = Benifits.modified_datetime;
                            newBenifits.modified_user_id = Benifits.modified_user_id;
                            int i = context.SaveChanges();
                            isSuccess = validateSaveUpdate(i);
                            return isSuccess;
                        }
                    }
                }
            }
            catch (Exception)
            {

                return isSuccess = false;
            }
            return isSuccess;
        }

        [OperationContract]
        public bool DeleteBenifits(mas_Benifit Benifits)
        {
            bool isSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    mas_Benifit newBenifits = context.mas_Benifit.First(c => c.benifit_id == Benifits.benifit_id);
                    if (newBenifits != null)
                    {
                        newBenifits.isdelete = true;
                        newBenifits.delete_datetime = Benifits.delete_datetime;
                        newBenifits.delete_user_id = Benifits.delete_user_id;
                        int i = context.SaveChanges();
                        isSuccess = validateSaveUpdate(i);
                        return isSuccess;
                    }
                }
            }
            catch (Exception)
            {

                return isSuccess = false;
            }
            return isSuccess;
        }

        #endregion

        #region mas_deduction Operations
        [OperationContract]
        public IEnumerable<mas_Deduction> GetDeductions()
        {
            using (var context = new ERPEntities())
            {
                var result = context.mas_Deduction.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public List<mas_Deduction> GetSearchDeductions(string SearchString)
        {
            using (var context = new ERPEntities())
            {
                List<mas_Deduction> SDeductions = new List<mas_Deduction>();
                var deductions = context.mas_Deduction.Where(z => z.deduction_name.Contains(SearchString));
                {
                    foreach (mas_Deduction deduction_name in deductions)
                    {
                        mas_Deduction SearchDeduction = new mas_Deduction();
                        SearchDeduction.deduction_id = deduction_name.deduction_id;
                        SearchDeduction.deduction_name = deduction_name.deduction_name;
                        SearchDeduction.isActive = deduction_name.isActive;
                        SDeductions.Add(SearchDeduction);
                    }
                }
                return SDeductions;
            }
        }

        [OperationContract]
        public bool SaveDeductions(mas_Deduction Deductions)
        {
            bool isSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    mas_Deduction newDeduction = new mas_Deduction();
                    newDeduction.deduction_id = Deductions.deduction_id;
                    newDeduction.deduction_name = Deductions.deduction_name;
                    newDeduction.isActive = Deductions.isActive;
                    newDeduction.save_datetime = Deductions.save_datetime;
                    newDeduction.save_user_id = Deductions.save_user_id;
                    newDeduction.modified_user_id = Deductions.modified_user_id;
                    newDeduction.modified_datetime = Deductions.modified_datetime;
                    newDeduction.delete_user_id = Deductions.delete_user_id;
                    newDeduction.delete_datetime = Deductions.delete_datetime;
                    newDeduction.isdelete = false;
                    context.mas_Deduction.AddObject(newDeduction);
                    int i = context.SaveChanges();
                    isSuccess = validateSaveUpdate(i);
                    return isSuccess;
                }
            }
            catch (Exception)
            {

                return isSuccess = false;
            }
        }

        [OperationContract]
        public bool UpdateDeductions(mas_Deduction Deduction)
        {
            bool isSuccess = false;
            using (var context = new ERPEntities())
            {
                try
                {
                    if (Deduction != null)
                    {
                        mas_Deduction newDeduction = context.mas_Deduction.First(c => c.deduction_id == Deduction.deduction_id);
                        if (newDeduction != null)
                        {
                            newDeduction.deduction_name = Deduction.deduction_name;
                            newDeduction.isActive = Deduction.isActive;
                            newDeduction.modified_datetime = Deduction.modified_datetime;
                            newDeduction.modified_user_id = Deduction.modified_user_id;
                            int i = context.SaveChanges();
                            isSuccess = validateSaveUpdate(i);
                            return isSuccess;
                        }
                    }
                }
                catch (Exception)
                {
                    return isSuccess = false;
                }
            }
            return isSuccess;
        }

        [OperationContract]
        public bool DeleteDeductions(mas_Deduction Deduction)
        {
            bool issuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    mas_Deduction newDeduction = context.mas_Deduction.First(c => c.deduction_id == Deduction.deduction_id);
                    if (newDeduction != null)
                    {
                        newDeduction.isdelete = true;
                        newDeduction.delete_datetime = Deduction.delete_datetime;
                        newDeduction.delete_user_id = Deduction.delete_user_id;
                        int i = context.SaveChanges();
                        issuccess = validateSaveUpdate(i);
                        return issuccess;
                    }
                }
            }
            catch (Exception)
            {

                return issuccess = false;
            }
            return issuccess;
        }
        #endregion

        #region mas_Company rules Oparations
        [OperationContract]
        public IEnumerable<mas_CompanyRule> GetCompanyRules()
        {
            using (var context = new ERPEntities())
            {
                var result = context.mas_CompanyRule.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public bool SaveCompanyRules(mas_CompanyRule CompanyRule)
        {
            bool isSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    mas_CompanyRule newRuleRate = new mas_CompanyRule();
                    newRuleRate = CompanyRule;
                    context.mas_CompanyRule.AddObject(newRuleRate);
                    int i = context.SaveChanges();
                    isSuccess = validateSaveUpdate(i);
                    return isSuccess;
                }
            }
            catch (Exception)
            {
                return isSuccess = false;
            }
        }

        [OperationContract]
        public bool UpdateCompanyRules(mas_CompanyRule CompanyRule)
        {
            bool isSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    if (CompanyRule != null)
                    {
                        mas_CompanyRule newCompanyRule = context.mas_CompanyRule.First(c => c.rule_id == CompanyRule.rule_id);
                        if (newCompanyRule != null)
                        {
                            newCompanyRule.department_id = CompanyRule.department_id;
                            newCompanyRule.benifit_id = CompanyRule.benifit_id;
                            newCompanyRule.deduction_id = CompanyRule.deduction_id;
                            newCompanyRule.unit_id = CompanyRule.unit_id;
                            newCompanyRule.rate = CompanyRule.rate;
                            newCompanyRule.rule_name = CompanyRule.rule_name;
                            newCompanyRule.minimum_value = CompanyRule.minimum_value;
                            newCompanyRule.maximum_value = CompanyRule.maximum_value;
                            newCompanyRule.isActive = CompanyRule.isActive;
                            newCompanyRule.isEffecToTheCompanyVariable = CompanyRule.isEffecToTheCompanyVariable;
                            newCompanyRule.modified_datetime = System.DateTime.Now;
                            newCompanyRule.modified_user_id = CompanyRule.modified_user_id;
                            int i = context.SaveChanges();
                            isSuccess = validateSaveUpdate(i);
                            return isSuccess;
                        }
                    }
                }
            }
            catch (Exception)
            {

                return isSuccess = false;
            }
            return isSuccess;
        }

        [OperationContract]
        public IEnumerable<CompanyRuleView> GetCompanyRuleView()
        {
            using (var context = new ERPEntities())
            {
                var result = context.CompanyRuleViews.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }
        #endregion

        #region z_bank operations
        [OperationContract]
        public IEnumerable<z_Bank> GetBanks()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_Bank.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public bool UpdateBanks(z_Bank bank)
        {
            bool isSuccess = false;
            try
            {
                if (bank != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_Bank newbank = context.z_Bank.First(c => c.bank_id == bank.bank_id);
                        if (newbank != null)
                        {
                            newbank.bank_name = bank.bank_name;
                            newbank.modified_datetime = bank.modified_datetime;
                            newbank.bank_code = bank.bank_code;
                            newbank.modified_user_id = bank.modified_user_id;
                            int i = context.SaveChanges();
                            isSuccess = validateSaveUpdate(i);
                            return isSuccess;
                        }
                    }
                }
            }

            catch (Exception)
            {
                return isSuccess = false;
            }
            return isSuccess;
        }

        [OperationContract]
        public bool Savebanks(z_Bank bank)
        {
            bool isSuccess = false;
            try
            {
                if (bank != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_Bank newbank = new z_Bank();
                        newbank.bank_id = bank.bank_id;
                        newbank.bank_code = bank.bank_code;
                        newbank.bank_name = bank.bank_name;
                        newbank.save_datetime = bank.save_datetime;
                        newbank.save_user_id = bank.save_user_id;
                        newbank.modified_datetime = bank.modified_datetime;
                        newbank.modified_user_id = bank.modified_user_id;
                        newbank.delete_datetime = bank.delete_datetime;
                        newbank.delete_user_id = bank.delete_user_id;
                        newbank.isdelete = false;
                        context.z_Bank.AddObject(newbank);
                        int i = context.SaveChanges();
                        isSuccess = validateSaveUpdate(i);
                        return isSuccess;
                    }
                }
            }
            catch (Exception)
            {
                return isSuccess = false;
            }
            return isSuccess;
        }

        [OperationContract]
        public bool DeleteBanks(z_Bank bank)
        {
            bool isSuccess = false;
            try
            {
                if (bank != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_Bank DeleteBanks = context.z_Bank.First(c => c.bank_id == bank.bank_id);
                        DeleteBanks.isdelete = true;
                        DeleteBanks.delete_datetime = bank.delete_datetime;
                        DeleteBanks.delete_user_id = bank.delete_user_id;
                        int i = context.SaveChanges();
                        isSuccess = validateSaveUpdate(i);
                        return isSuccess;
                    }
                }
            }
            catch (Exception)
            {
                return isSuccess = false;
            }
            return isSuccess;
        }

        [OperationContract]
        public List<z_Bank> GetBankSearchResult(string SearchString)
        {
            using (var context = new ERPEntities())
            {
                List<z_Bank> iGrade = new List<z_Bank>();
                var Banks = context.z_Bank.Where(z => z.bank_name.Contains(SearchString));
                foreach (z_Bank bank in Banks)
                {
                    z_Bank searchbank = new z_Bank();
                    searchbank.bank_id = bank.bank_id;
                    searchbank.bank_name = bank.bank_name;
                    iGrade.Add(searchbank);
                }
                return iGrade;
            }
        }
        #endregion

        #region z_City Operation
        [OperationContract]
        public IEnumerable<z_City> GetCities()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_City.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public bool UpdateCities(z_City city)
        {
            bool isSuccess = false;
            try
            {
                if (city != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_City newcity = context.z_City.First(c => c.city_id == city.city_id);
                        if (newcity != null)
                        {
                            newcity.city = city.city;
                            newcity.modified_datetime = city.modified_datetime;
                            newcity.modified_user_id = city.modified_user_id;
                            int i = context.SaveChanges();
                            isSuccess = validateSaveUpdate(i);
                            return isSuccess;
                        }
                    }
                }
            }
            catch (Exception)
            {
                return isSuccess = false;
            }
            return isSuccess;
        }

        [OperationContract]
        public bool SaveCites(z_City city)
        {
            bool isSuccess = false;
            try
            {
                if (city != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_City newcity = new z_City();
                        newcity = city;
                        context.z_City.AddObject(newcity);
                        int i = context.SaveChanges();
                        isSuccess = validateSaveUpdate(i);
                        return isSuccess;
                    }
                }
            }
            catch (Exception)
            {
                return isSuccess = false;
            }
            return isSuccess;
        }



        [OperationContract]
        public bool DeleteCities(z_City city)
        {
            bool isSuccess = false;
            try
            {
                if (city != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_City DeleteCities = context.z_City.First(c => c.city_id == city.city_id);
                        DeleteCities.delete_datetime = city.delete_datetime;
                        DeleteCities.delete_user_id = city.delete_user_id;
                        DeleteCities.isdelete = true;
                        int i = context.SaveChanges();
                        isSuccess = validateSaveUpdate(i);
                        return isSuccess;
                    }
                }
            }
            catch (Exception)
            {
                return isSuccess = false;
            }
            return isSuccess;
        }

        #endregion

        #region z_desination Operation

        [OperationContract]
        public IEnumerable<z_Designation> GetDesignations()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_Designation.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public bool UpdateDesignation(z_Designation des)
        {
            bool isSuccess = false;
            try
            {
                if (des != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_Designation newdes = context.z_Designation.First(c => c.designation_id == des.designation_id);
                        if (newdes != null)
                        {
                            newdes.designation = des.designation;
                            newdes.modified_datetime = des.modified_datetime;
                            newdes.modified_user_id = des.modified_user_id;
                            newdes.Emp_Count = des.Emp_Count;
                            newdes.Description = des.Description;
                            int i = context.SaveChanges();
                            isSuccess = validateSaveUpdate(i);
                            return isSuccess;
                        }
                    }
                }
            }
            catch (Exception)
            {
                return isSuccess = false;
            }
            return isSuccess;
        }

        [OperationContract]
        public bool SaveDesignation(z_Designation des)
        {
            bool isSuccess = false;
            try
            {
                if (des != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_Designation newdes = new z_Designation();
                        newdes = des;
                        context.z_Designation.AddObject(newdes);
                        int i = context.SaveChanges();
                        isSuccess = validateSaveUpdate(i);
                        return isSuccess;

                    }
                }
            }
            catch (Exception)
            {
                return isSuccess = false;
            }
            return isSuccess;
        }

        [OperationContract]
        public bool DeletetDesignations(z_Designation des)
        {
            bool isSuccess = false;
            try
            {
                if (des != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_Designation DeletetDesignations = context.z_Designation.First(c => c.designation_id == des.designation_id);
                        DeletetDesignations.isdelete = true;
                        DeletetDesignations.delete_datetime = des.delete_datetime;
                        DeletetDesignations.delete_user_id = des.delete_user_id;
                        int i = context.SaveChanges();
                        isSuccess = validateSaveUpdate(i);
                        return isSuccess;
                    }
                }
            }
            catch (Exception)
            {
                return isSuccess = false;
            }
            return isSuccess;
        }

        [OperationContract]
        public List<z_Designation> GetDesignationSearchResult(string SearchString)
        {
            using (var context = new ERPEntities())
            {
                List<z_Designation> IGrade = new List<z_Designation>();
                var Designations = context.z_Designation.Where(z => z.designation.Contains(SearchString));
                foreach (z_Designation designation in Designations)
                {
                    z_Designation searchDesignation = new z_Designation();
                    searchDesignation.designation_id = designation.designation_id;
                    searchDesignation.designation = designation.designation;
                    IGrade.Add(searchDesignation);
                }
                return IGrade;
            }
        }

        #endregion

        #region z_paymentmethod Operations
        /// <summary>
        /// *   Author     : Heshantha Lakshitha
        /// *   Date       : 2013-04-19 
        /// *   Purpose    : Payment Method Service     
        /// *   Module     : ERP System => Service => Payment Method   
        /// </summary>
        /// <returns></returns>

        [OperationContract]
        public IEnumerable<z_PaymentMethod> GetPaymentMethods()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_PaymentMethod.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public bool SavePaymentMethods(z_PaymentMethod paymentmethod)
        {
            bool isSuccess = false;
            try
            {
                if (paymentmethod != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_PaymentMethod newpaymentmethod = new z_PaymentMethod();
                        newpaymentmethod.paymet_method_id = paymentmethod.paymet_method_id;
                        newpaymentmethod.payment_method = paymentmethod.payment_method;
                        context.z_PaymentMethod.AddObject(newpaymentmethod);
                        int i = context.SaveChanges();
                        isSuccess = validateSaveUpdate(i);
                        return isSuccess;
                    }
                }
            }
            catch (Exception)
            {
                return isSuccess = false;
            }
            return isSuccess;
        }

        [OperationContract]
        public bool UpdatePaymentMethods(z_PaymentMethod paymentmethod)
        {
            bool isSuccess = false;
            try
            {
                if (paymentmethod != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_PaymentMethod newpaymentmethod = context.z_PaymentMethod.First(c => c.paymet_method_id == paymentmethod.paymet_method_id);
                        if (newpaymentmethod != null)
                        {
                            newpaymentmethod.payment_method = paymentmethod.payment_method;
                            int i = context.SaveChanges();
                            isSuccess = validateSaveUpdate(i);
                            return isSuccess;
                        }
                    }
                }

            }
            catch (Exception)
            {
                return isSuccess = false;
            }
            return isSuccess;
        }

        [OperationContract]
        public bool DeletePaymentMethods(z_PaymentMethod paymentmethod)
        {
            bool isSuccess = false;
            try
            {
                if (paymentmethod != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_PaymentMethod DeletePaymentMethods = context.z_PaymentMethod.First(c => c.paymet_method_id == paymentmethod.paymet_method_id);
                        context.z_PaymentMethod.DeleteObject(DeletePaymentMethods);
                        int i = context.SaveChanges();
                        isSuccess = validateSaveUpdate(i);
                        return isSuccess;
                    }

                }
            }
            catch (Exception)
            {
                return isSuccess = false;
            }
            return isSuccess;
        }

        [OperationContract]
        public List<z_PaymentMethod> RefreshPaymentMethodresult(string SearchString)
        {
            using (var context = new ERPEntities())
            {
                List<z_PaymentMethod> IGrade = new List<z_PaymentMethod>();
                var PaymentMethods = context.z_PaymentMethod.Where(z => z.payment_method.Contains(SearchString));
                foreach (z_PaymentMethod paymentmethod in PaymentMethods)
                {
                    z_PaymentMethod searchPaymentMethod = new z_PaymentMethod();
                    searchPaymentMethod.paymet_method_id = paymentmethod.paymet_method_id;
                    searchPaymentMethod.payment_method = paymentmethod.payment_method;
                    IGrade.Add(searchPaymentMethod);
                }
                return IGrade;
            }
        }
        #endregion

        #region z_depatment Operations

        /// <summary>
        ///   Author     : Akalanka Kasun                                                                                                
        ///*   Date       : 2013-04-19                                                                                                
        ///*   Purpose    : Department View Model                                                                                                
        ///*   Module     : ERP System => Masters => Payroll 
        /// </summary>
        /// <returns></returns>

        [OperationContract]
        public IEnumerable<z_Department> GetDepartments()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_Department.Where(c => c.isdelete == false).ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }
        //[OperationContract]
        //public IEnumerable<z_Department> GetDepartmentsForDepartmentID()
        //{
        //    using (var context = new ERPEntities())
        //    {
        //        var result = context.z_Department.Wh;
        //        result.ForEach(e => context.Detach(e));
        //        return result;
        //    }
        //}
        [OperationContract]
        public List<z_Department> GetSearchDepartment(string SeatchString)
        {
            using (var context = new ERPEntities())
            {
                List<z_Department> SDepartment = new List<z_Department>();
                var departments = context.z_Department.Where(z => z.department_name.Contains(SeatchString));
                {
                    foreach (z_Department department_name in departments)
                    {
                        z_Department SearchDepartment = new z_Department();
                        SearchDepartment.department_id = department_name.department_id;
                        SearchDepartment.department_name = department_name.department_name;
                        SearchDepartment.telephone_01 = department_name.telephone_01;
                        SearchDepartment.telephone_02 = department_name.telephone_02;
                        SearchDepartment.fax = department_name.fax;
                        SDepartment.Add(SearchDepartment);
                    }
                }
                return SDepartment;
            }
        }

        [OperationContract]
        public bool UpdateDepartment(z_Department Department)
        {
            bool isSuccess = false;
            try
            {
                if (Department != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_Department newDept = context.z_Department.First(c => c.department_id == Department.department_id);
                        if (newDept != null)
                        {
                            newDept.department_name = Department.department_name;
                            newDept.telephone_01 = Department.telephone_01;
                            newDept.telephone_02 = Department.telephone_02;
                            newDept.branch_id = Department.branch_id;
                            newDept.modified_user_id = Department.modified_user_id;
                            newDept.modified_datetime = Department.modified_datetime;
                            newDept.fax = Department.fax;
                            newDept.Emp_Count = Department.Emp_Count;
                            newDept.Description = Department.Description;
                            int i = context.SaveChanges();
                            isSuccess = validateSaveUpdate(i);
                            return isSuccess;
                        }
                    }
                }
            }
            catch (Exception)
            {

                return isSuccess = false;
            }
            return isSuccess;
        }

        [OperationContract]
        public bool SaveDepartment(z_Department Department)
        {
            bool isSuccess = false;
            try
            {
                if (Department != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_Department newDept = new z_Department();
                        newDept = Department;
                        context.z_Department.AddObject(newDept);
                        int i = context.SaveChanges();
                        isSuccess = validateSaveUpdate(i);
                    }
                }
            }
            catch (Exception)
            {

                return isSuccess = false;
            }
            return isSuccess;
        }

        [OperationContract]
        public bool DeleteDepartment(z_Department Department)
        {
            bool isSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    z_Department newDept = context.z_Department.First(c => c.department_id == Department.department_id);
                    if (newDept != null)
                    {
                        //context.z_Department.DeleteObject(newDept);
                        newDept.isdelete = true;
                        newDept.delete_datetime = System.DateTime.Now;
                        newDept.delete_user_id = Department.delete_user_id;
                        int i = context.SaveChanges();
                        isSuccess = validateSaveUpdate(i);
                        return isSuccess;
                    }
                }
            }
            catch (Exception)
            {

                return isSuccess = false;
            }
            return isSuccess;
        }

        #endregion

        #region z_sections Operations

        [OperationContract]
        public IEnumerable<z_Section> GetSections()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_Section.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public List<z_Section> GetSearchSections(string SearchString)
        {
            using (var context = new ERPEntities())
            {
                List<z_Section> SSearch = new List<z_Section>();
                var sections = context.z_Section.Where(z => z.section_name.Contains(SearchString));
                {
                    foreach (z_Section section_name in sections)
                    {
                        z_Section SearchSection = new z_Section();
                        SearchSection.section_id = section_name.section_id;
                        SearchSection.section_name = section_name.section_name;
                        SSearch.Add(SearchSection);
                    }
                }
                return SSearch;
            }
        }

        [OperationContract]
        public bool SaveSection(z_Section Section)
        {
            bool isSuccess = false;
            try
            {
                if (Section != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_Section newSection = new z_Section();
                        newSection = Section;
                        context.z_Section.AddObject(newSection);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {

                return isSuccess = false;
            }
            return isSuccess;
        }

        [OperationContract]
        public bool UpdateSection(z_Section Section)
        {
            bool isSuccess = false;
            try
            {
                if (Section != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_Section newSection = context.z_Section.First(c => c.section_id == Section.section_id);
                        if (newSection != null)
                        {
                            newSection.section_id = Section.section_id;
                            newSection.department_id = Section.department_id;
                            newSection.section_name = Section.section_name;
                            newSection.modified_datetime = Section.modified_datetime;
                            newSection.modified_user_id = Section.modified_user_id;
                            newSection.Emp_Count = Section.Emp_Count;
                            newSection.Description = Section.Description;
                            int i = context.SaveChanges();
                            isSuccess = validateSaveUpdate(i);
                        }
                    }
                }
            }
            catch (Exception)
            {

                return isSuccess = false;
            }
            return isSuccess;
        }

        [OperationContract]
        public bool DeleteSection(z_Section Section)
        {
            bool isSucces = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    z_Section newSection = context.z_Section.First(c => c.section_id == Section.section_id);
                    if (newSection != null)
                    {
                        //context.z_Section.DeleteObject(newSection);
                        newSection.delete_datetime = Section.delete_datetime;
                        newSection.delete_user_id = Section.delete_user_id;
                        newSection.isdelete = true;
                        int i = context.SaveChanges();
                        isSucces = validateSaveUpdate(i);
                        return isSucces;
                    }
                }
            }
            catch (Exception)
            {

                return isSucces = false;
            }
            return isSucces;
        }

        //[OperationContract]
        //public IEnumerable<SectionView> GetSectionView()
        //{
        //    try
        //    {
        //        using (var context = new ERPEntities())
        //        {
        //            var result = context.SectionViews.ToList();
        //            result.ForEach(e => context.Detach(e));
        //            return result;
        //        }
        //    }
        //    catch (Exception)
        //    {
        //        return null;
        //    }
        //}

        #endregion

        #region z_company Operation

        [OperationContract]
        public IEnumerable<z_Company> GetCompanies()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_Company.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public bool UpdateCompanies(z_Company company)
        {
            bool isSuccess = false;
            try
            {
                if (company != null)
                {
                    using (var conetext = new ERPEntities())
                    {
                        z_Company newcompany = conetext.z_Company.First(c => c.company_id == company.company_id);
                        if (newcompany != null)
                        {
                            newcompany.company_name_01 = company.company_name_01;
                            newcompany.comapany_name_02 = company.comapany_name_02;
                            newcompany.address_01 = company.address_01;
                            newcompany.address_02 = company.address_02;
                            newcompany.address_03 = company.address_03;
                            newcompany.email = company.email;
                            newcompany.fax = company.fax;
                            newcompany.image = company.image;
                            newcompany.telephone_01 = company.telephone_01;
                            newcompany.telephone_02 = company.telephone_02;
                            newcompany.city_id = company.city_id;
                            newcompany.town_id = company.town_id;
                            newcompany.web = company.web;
                            newcompany.web_2 = company.web_2;
                            newcompany.email_2 = company.email_2;
                            newcompany.Description = company.Description;
                            newcompany.company_capacity = company.company_capacity;
                            int i = conetext.SaveChanges();
                            isSuccess = validateSaveUpdate(i);
                            return isSuccess;
                        }

                    }
                }
            }
            catch (Exception)
            {
                return isSuccess = false;
            }
            return isSuccess;
        }

        [OperationContract]
        public bool SaveCompanies(z_Company company)
        {
            bool isSuccess = false;
            try
            {
                if (company != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_Company newcompany = new z_Company();
                        newcompany.company_id = company.company_id;
                        newcompany.company_name_01 = company.company_name_01;
                        newcompany.comapany_name_02 = company.comapany_name_02;
                        newcompany.address_01 = company.address_01;
                        newcompany.address_02 = company.address_02;
                        newcompany.address_03 = company.address_03;
                        newcompany.email = company.email;
                        newcompany.fax = company.fax;
                        newcompany.image = company.image;
                        newcompany.telephone_01 = company.telephone_01;
                        newcompany.telephone_02 = company.telephone_02;
                        newcompany.city_id = company.city_id;
                        newcompany.town_id = company.town_id;
                        newcompany.web = company.web;
                        context.z_Company.AddObject(newcompany);
                        int i = context.SaveChanges();
                        isSuccess = validateSaveUpdate(i);
                        return isSuccess;
                    }
                }
            }
            catch (Exception)
            {
                return isSuccess = false;
            }
            return isSuccess;
        }

        [OperationContract]
        public bool DeleteCompanies(z_Company company)
        {
            bool isSuccess = false;
            try
            {
                if (company != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_Company DeleteCompanies = context.z_Company.First(c => c.company_id == company.company_id);
                        context.z_Company.DeleteObject(DeleteCompanies);
                        int i = context.SaveChanges();
                        isSuccess = validateSaveUpdate(i);
                        return isSuccess;

                    }
                }
            }
            catch (Exception)
            {
                return isSuccess = false;
            }
            return isSuccess;
        }

        [OperationContract]
        public List<z_Company> GetCompanySearchResult(string SearchString)
        {
            using (var context = new ERPEntities())
            {
                List<z_Company> iGrade = new List<z_Company>();
                var Comapnies = context.z_Company.Where(z => z.company_name_01.Contains(SearchString));
                foreach (z_Company company in Comapnies)
                {
                    z_Company searchCompany = new z_Company();
                    searchCompany.company_id = company.company_id;
                    searchCompany.company_name_01 = company.company_name_01;
                    iGrade.Add(searchCompany);
                }
                return iGrade;
            }
        }

        #endregion

        #region z_Module Operation

        [OperationContract]
        public IEnumerable<z_module> GetModules()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_module.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public bool UpdateModules(z_module module)
        {
            bool isSuccess = false;
            try
            {
                if (module != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_module newmodule = context.z_module.First(c => c.module_id == module.module_id);
                        if (newmodule != null)
                        {
                            newmodule.module_name = module.module_name;
                            newmodule.isActive = module.isActive;
                            int i = context.SaveChanges();
                            isSuccess = validateSaveUpdate(i);
                            return isSuccess;
                        }
                    }
                }
            }
            catch (Exception)
            {
                return isSuccess = false;
            }
            return isSuccess;
        }

        [OperationContract]
        public bool SaveModules(z_module module)
        {
            bool isSuccess = false;
            try
            {
                if (module != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_module newmodule = new z_module();
                        newmodule.module_id = module.module_id;
                        newmodule.module_name = module.module_name;
                        newmodule.isActive = module.isActive;
                        context.z_module.AddObject(newmodule);
                        int i = context.SaveChanges();
                        isSuccess = validateSaveUpdate(i);
                        return isSuccess;
                    }
                }
            }
            catch (Exception)
            {
                return isSuccess = false;
            }
            return isSuccess;
        }



        [OperationContract]
        public bool DeleteModules(z_module module)
        {
            bool isSuccess = false;
            try
            {
                if (module != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_module DeleteModules = context.z_module.First(c => c.module_id == module.module_id);
                        context.z_module.DeleteObject(DeleteModules);
                        int i = context.SaveChanges();
                        isSuccess = validateSaveUpdate(i);
                        return isSuccess;
                    }
                }
            }
            catch (Exception)
            {
                return isSuccess = false;
            }
            return isSuccess;
        }


        [OperationContract]
        public List<z_module> GetModulesSearchResult(string SearchString)
        {
            using (var context = new ERPEntities())
            {
                List<z_module> IGrade = new List<z_module>();
                var Modules = context.z_module.Where(z => z.module_name.Contains(SearchString));
                foreach (z_module module in Modules)
                {
                    z_module searchModule = new z_module();
                    searchModule.module_id = module.module_id;
                    searchModule.module_name = module.module_name;
                    IGrade.Add(searchModule);

                }
                return IGrade;
            }
        }
        #endregion

        #region z_Period Operation
        [OperationContract]
        private IEnumerable<z_Period> GetPeriods()
        {
            using (var context = new ERPEntities())
            {
                var results = context.z_Period.OrderBy(c => c.start_date).ToList();
                results.ForEach(e => context.Detach(e));
                return results;
            }
        }
        #endregion

        #region z_Grade Operations
        [OperationContract]
        public IEnumerable<z_Grade> GetGrade()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_Grade.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public bool UpdateGrade(z_Grade newgrade)
        {
            bool isSucces = false;
            try
            {
                if (newgrade != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_Grade grade = context.z_Grade.First(c => c.grade_id == newgrade.grade_id);
                        grade.grade = newgrade.grade;
                        grade.modified_datetime = newgrade.modified_datetime;
                        grade.modified_user_id = newgrade.modified_user_id;
                        int i = context.SaveChanges();
                        isSucces = validateSaveUpdate(i);
                        return isSucces;
                    }
                }
            }
            catch (Exception)
            {

                return isSucces = false;
            }
            return isSucces;
        }

        [OperationContract]
        public bool SaveGrade(z_Grade grade)
        {
            bool isSucces = false;
            try
            {
                if (grade != null)
                {
                    using (var contex = new ERPEntities())
                    {
                        z_Grade newGrade = new z_Grade();
                        newGrade = grade;
                        contex.z_Grade.AddObject(newGrade);
                        int i = contex.SaveChanges();
                        isSucces = validateSaveUpdate(i);
                        return isSucces;
                    }
                }
            }
            catch (Exception)
            {

                return isSucces = false;
            }
            return isSucces;
        }

        [OperationContract]
        public bool deleteGrade(z_Grade grade)
        {
            bool isSucces = false;
            try
            {
                if (grade != null)
                {
                    using (var contex = new ERPEntities())
                    {
                        z_Grade deleteGrade = contex.z_Grade.First(c => c.grade_id == grade.grade_id);
                        deleteGrade.delete_user_id = grade.delete_user_id;
                        deleteGrade.delete_datetime = grade.delete_datetime;
                        deleteGrade.isdelete = true;
                        int i = contex.SaveChanges();
                        isSucces = validateSaveUpdate(i);
                        return isSucces;
                    }
                }
            }
            catch (Exception)
            {

                return isSucces = false;
            }
            return isSucces;
        }

        #endregion

        #region z_CostCenter Operations
        [OperationContract]
        public IEnumerable<z_CostCenter> GetCostCenter()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_CostCenter.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }
        #endregion

        #region z_Division Operations
        [OperationContract]
        public IEnumerable<z_Division> GetDivision()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_Division.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }
        #endregion

        #region z_SalaryScale Operations
        [OperationContract]
        public IEnumerable<z_SalaryScales> GetSalaryScales()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_SalaryScales.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }
        #endregion

        #region dtl_EmployeeRule Operations
        /// <summary>
        /// *   Author     : Akalanka Kasun
        /// *   Date       : 2013-05-23 
        /// *   Purpose    : Emloyees Rules Service     
        /// *   Module     : ERP System => Service => Employee Rules Master   
        /// </summary>
        /// <returns></returns>

        [OperationContract]
        public IEnumerable<dtl_EmployeeRule> GetEmployeeRule()
        {
            using (var context = new ERPEntities())
            {
                var result = context.dtl_EmployeeRule.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }

        }

        [OperationContract]
        public IEnumerable<EmployeeRuleView> GetEmployeeRulesView()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.EmployeeRuleViews.ToList();
                    result.ForEach(e => context.Detach(e));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public IEnumerable<dtl_Employee> GetSelectedEmployees()
        {
            List<dtl_Employee> SelectedEmployees = new List<dtl_Employee>();
            using (var context = new ERPEntities())
            {
                var Result = (from DetailEmployee in context.dtl_Employee
                              join MasterEmployee in context.mas_Employee on DetailEmployee.employee_id equals MasterEmployee.employee_id
                              select new
                              {
                                  DetailEmployee.employee_id,
                                  MasterEmployee.initials,
                                  MasterEmployee.first_name,
                                  MasterEmployee.second_name,
                                  MasterEmployee.surname,
                                  MasterEmployee.address_01,
                                  MasterEmployee.address_02,
                                  MasterEmployee.address_03,
                                  MasterEmployee.telephone,
                                  MasterEmployee.mobile,
                                  MasterEmployee.nic,
                                  MasterEmployee.birthday

                              }).ToList();
                foreach (var item in Result)
                {
                    dtl_Employee newDetailEmployee = new dtl_Employee();
                    newDetailEmployee.employee_id = item.employee_id;

                    mas_Employee masterEmployee = new mas_Employee();
                    masterEmployee.employee_id = item.employee_id;
                    masterEmployee.initials = item.initials;
                    masterEmployee.first_name = item.first_name;
                    masterEmployee.second_name = item.second_name;
                    masterEmployee.surname = item.surname;
                    masterEmployee.address_01 = item.address_01;
                    masterEmployee.address_02 = item.address_02;
                    masterEmployee.address_03 = item.address_03;
                    masterEmployee.telephone = item.telephone;
                    masterEmployee.mobile = item.mobile;
                    masterEmployee.nic = item.nic;
                    masterEmployee.birthday = item.birthday;

                    newDetailEmployee.mas_Employee = masterEmployee;
                    SelectedEmployees.Add(newDetailEmployee);
                }
                return SelectedEmployees;
            }

        }

        [OperationContract]
        public bool SaveEmployeeRules(dtl_EmployeeRule EmployeeRules)
        {
            bool isSucess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    dtl_EmployeeRule newEmployeeRules = new dtl_EmployeeRule();
                    newEmployeeRules = EmployeeRules;
                    context.dtl_EmployeeRule.AddObject(newEmployeeRules);
                    int i = context.SaveChanges();
                    isSucess = validateSaveUpdate(i);
                    return isSucess;
                }
            }
            catch (Exception)
            {
                return isSucess = false;
            }
        }

        [OperationContract]
        public bool UpdateEmployeeRules(EmployeeRuleView NewEmployeeRule, dtl_EmployeeRule OldEmployeeRule)
        {
            bool isSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    if (NewEmployeeRule != null && OldEmployeeRule != null)
                    {
                        dtl_EmployeeRule oldEmployeeRule = context.dtl_EmployeeRule.First(c => c.employee_id.Equals(OldEmployeeRule.employee_id) && c.rule_id.Equals(OldEmployeeRule.rule_id));
                        if (oldEmployeeRule != null)
                        {
                            context.dtl_EmployeeRule.DeleteObject(oldEmployeeRule);
                            context.SaveChanges();

                            dtl_EmployeeRule newRule = new dtl_EmployeeRule();
                            newRule.employee_id = NewEmployeeRule.employee_id;
                            newRule.rule_id = NewEmployeeRule.rule_id;
                            newRule.special_amount = NewEmployeeRule.special_amount;
                            newRule.is_special = NewEmployeeRule.is_special;
                            context.dtl_EmployeeRule.AddObject(newRule);
                            int i = context.SaveChanges();
                            isSuccess = validateSaveUpdate(i);
                            return isSuccess;
                        }
                    }
                }
            }
            catch (Exception)
            {
                return isSuccess = false;
            }
            return isSuccess;
        }

        [OperationContract]
        public bool DeleteEmployeeRules(dtl_EmployeeRule EmployeeRule)
        {
            bool isSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    dtl_EmployeeRule newEmployeeRule =
                        context.dtl_EmployeeRule.First(c => c.employee_id == EmployeeRule.employee_id && c.rule_id == EmployeeRule.rule_id);
                    if (newEmployeeRule != null)
                    {
                        context.dtl_EmployeeRule.DeleteObject(newEmployeeRule);
                        int i = context.SaveChanges();
                        isSuccess = validateSaveUpdate(i);
                        return isSuccess;
                    }
                }
            }
            catch (Exception)
            {
                return isSuccess = false;
            }
            return isSuccess;
        }
        #endregion

        #region dtlEmployeeCompanyVariables Operations
        [OperationContract]
        public IEnumerable<dtl_EmployeeCompanyVariable> GetEmployeeCompanyVariables()
        {
            using (var context = new ERPEntities())
            {
                var result = context.dtl_EmployeeCompanyVariable.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        //[OperationContract]
        //public IEnumerable<dtl_EmployeeCompanyVariable> GetEmployeeCompanyVariablesForGrid(Guid EmpID)
        //{
        //    List<dtl_EmployeeCompanyVariable> SelectedEmployeeCompanyVariable = new List<dtl_EmployeeCompanyVariable>();
        //    using (var context = new ERPEntities())
        //    {
        //        var Result = (from DetaliEmployeeCompanyVariable in context.dtl_EmployeeCompanyVariable.Where(e => e.employee_id == EmpID)
        //                      join MasterEmployee in context.mas_Employee on DetaliEmployeeCompanyVariable.employee_id equals MasterEmployee.employee_id
        //                      join CompanyVariable in context.z_CompanyVariable on DetaliEmployeeCompanyVariable.company_variableID equals CompanyVariable.company_variableID
        //                      select new
        //                      {
        //                          DetaliEmployeeCompanyVariable.employee_id,
        //                          DetaliEmployeeCompanyVariable.company_variableID,
        //                          DetaliEmployeeCompanyVariable.isApplicable,

        //                          MasterEmployee.first_name,
        //                          MasterEmployee.second_name,

        //                          CompanyVariable.variable_Name,
        //                          CompanyVariable.variable_Value

        //                      }).ToList();
        //        foreach (var item in Result)
        //        {
        //            dtl_EmployeeCompanyVariable NewEmployeeCompanyvariable = new dtl_EmployeeCompanyVariable();
        //            NewEmployeeCompanyvariable.employee_id = item.employee_id;
        //            NewEmployeeCompanyvariable.company_variableID = item.company_variableID;
        //            NewEmployeeCompanyvariable.isApplicable = item.isApplicable;


        //            mas_Employee NewMasterEmployee = new mas_Employee();
        //            NewMasterEmployee.employee_id = item.employee_id;
        //            NewMasterEmployee.first_name = item.first_name;
        //            NewMasterEmployee.second_name = item.second_name;

        //            z_CompanyVariable NewCompanyvariable = new z_CompanyVariable();
        //            NewCompanyvariable.company_variableID = item.company_variableID;
        //            NewCompanyvariable.variable_Name = item.variable_Name;
        //            NewCompanyvariable.variable_Value = item.variable_Value;

        //            NewEmployeeCompanyvariable.mas_Employee = NewMasterEmployee;
        //            NewEmployeeCompanyvariable.z_CompanyVariable = NewCompanyvariable;

        //            SelectedEmployeeCompanyVariable.Add(NewEmployeeCompanyvariable);
        //        }
        //        return SelectedEmployeeCompanyVariable;
        //    }
        //}

        [OperationContract]
        public bool SaveEmployeeCompanyVariables(dtl_EmployeeCompanyVariable EmployeeCompanyVariable)
        {
            bool IsSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    dtl_EmployeeCompanyVariable newEmployeeCompanyVariables = new dtl_EmployeeCompanyVariable();
                    newEmployeeCompanyVariables = EmployeeCompanyVariable;
                    context.dtl_EmployeeCompanyVariable.AddObject(newEmployeeCompanyVariables);
                    int i = context.SaveChanges();
                    return IsSuccess = validateSaveUpdate(i);
                }
            }
            catch (Exception)
            {
                return IsSuccess = false;
            }
        }
        [OperationContract]
        public bool DeleteEmployeeCompanyVariables(dtl_EmployeeCompanyVariable EmployeeCompanyvariable)
        {
            bool IsSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    dtl_EmployeeCompanyVariable newEmployeeCompanyVariables = context.dtl_EmployeeCompanyVariable.First(c => c.employee_id == EmployeeCompanyvariable.employee_id);
                    if (newEmployeeCompanyVariables != null)
                    {
                        context.dtl_EmployeeCompanyVariable.DeleteObject(newEmployeeCompanyVariables);
                        int i = context.SaveChanges();
                        return IsSuccess = validateSaveUpdate(i);
                    }
                }
            }
            catch (Exception)
            {
                return IsSuccess = false;
            }
            return IsSuccess;
        }
        #endregion

        #region z_CompanyBranches Operations
        [OperationContract]
        public IEnumerable<z_CompanyBranches> GetCompanyBranches()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_CompanyBranches.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public bool SaveCompanyBranches(z_CompanyBranches CompanyBranches)
        {
            bool IsSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    z_CompanyBranches newCompanyBranches = new z_CompanyBranches();
                    newCompanyBranches = CompanyBranches;
                    context.z_CompanyBranches.AddObject(CompanyBranches);
                    int i = context.SaveChanges();
                    return IsSuccess = validateSaveUpdate(i);

                }
            }
            catch (Exception)
            {
                return IsSuccess = false;
            }
            return IsSuccess;
        }

        [OperationContract]
        public bool UpdateCompanyBranches(z_CompanyBranches CompanyBranchesold)
        {
            bool IsSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    z_CompanyBranches newcompanybranch = context.z_CompanyBranches.First(c => c.companyBranch_id == CompanyBranchesold.companyBranch_id);
                    newcompanybranch.company_id = CompanyBranchesold.company_id;
                    newcompanybranch.bank_id = CompanyBranchesold.bank_id;
                    newcompanybranch.bank_branch_id = CompanyBranchesold.bank_branch_id;
                    newcompanybranch.account_name = CompanyBranchesold.account_name;
                    newcompanybranch.account_no = CompanyBranchesold.account_no;
                    newcompanybranch.epf_registstion_no = CompanyBranchesold.epf_registstion_no;
                    newcompanybranch.city_id = CompanyBranchesold.city_id;
                    newcompanybranch.town_id = CompanyBranchesold.town_id;
                    newcompanybranch.companyBranch_Name = CompanyBranchesold.companyBranch_Name;
                    newcompanybranch.address_01 = CompanyBranchesold.address_01;
                    newcompanybranch.address_02 = CompanyBranchesold.address_02;
                    newcompanybranch.address_03 = CompanyBranchesold.address_03;
                    newcompanybranch.telephone_01 = CompanyBranchesold.telephone_01;
                    newcompanybranch.telephone_02 = CompanyBranchesold.telephone_02;
                    newcompanybranch.Emp_Count = CompanyBranchesold.Emp_Count;
                    newcompanybranch.Description = CompanyBranchesold.Description;
                    newcompanybranch.modified_datetime = CompanyBranchesold.modified_datetime;
                    newcompanybranch.modified_user_id = CompanyBranchesold.modified_user_id;
                    int i = context.SaveChanges();
                    return IsSuccess = validateSaveUpdate(i);
                }
            }
            catch (Exception)
            {
                return IsSuccess = false;
            }
        }

        [OperationContract]
        public bool DeleteCompanyBranches(z_CompanyBranches CompanyBranches)
        {
            bool IsSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    z_CompanyBranches DeleteCompaniBranch = context.z_CompanyBranches.First(c => c.companyBranch_id == CompanyBranches.companyBranch_id);
                    DeleteCompaniBranch.isdelete = true;
                    DeleteCompaniBranch.delete_datetime = CompanyBranches.delete_datetime;
                    DeleteCompaniBranch.delete_user_id = CompanyBranches.delete_user_id;
                    int i = context.SaveChanges();
                    IsSuccess = validateSaveUpdate(i);
                    return IsSuccess;

                }
            }
            catch (Exception)
            {
                return IsSuccess = false;
            }
        }
        #endregion

        #region dtl_Employee Operations

        [OperationContract]
        public IEnumerable<dtl_Employee> GetDetailEmployees(Guid EmpId)
        {
            using (var context = new ERPEntities())
            {
                //dtl_Employee result = context.dtl_Employee.First(e => e.employee_id.Equals(EmpId));   
                var result = context.dtl_Employee.Where(e => e.employee_id.Equals(EmpId)).ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public bool SaveDetailEmployees(dtl_Employee DetailEmployee)
        {
            bool IsSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    dtl_Employee newDetaliEmployee = new dtl_Employee();
                    newDetaliEmployee = DetailEmployee;
                    context.dtl_Employee.AddObject(newDetaliEmployee);
                    int i = context.SaveChanges();
                    IsSuccess = validateSaveUpdate(i);
                    return IsSuccess;
                }
            }
            catch (Exception)
            {
                return IsSuccess = false;
            }
        }

        [OperationContract]
        public bool UpdateDetailEmployee(dtl_Employee DetailEmployee)
        {
            bool IsSuccess = false;
            try
            {
                if (DetailEmployee != null)
                {
                    using (var context = new ERPEntities())
                    {
                        dtl_Employee newDetailEmployee = context.dtl_Employee.First(c => c.employee_id == DetailEmployee.employee_id);
                        newDetailEmployee.department_id = DetailEmployee.department_id;
                        newDetailEmployee.designation_id = DetailEmployee.designation_id;
                        newDetailEmployee.grade_id = DetailEmployee.grade_id;
                        newDetailEmployee.section_id = DetailEmployee.section_id;
                        newDetailEmployee.join_date = DetailEmployee.join_date;
                        newDetailEmployee.isEPF_applicable = DetailEmployee.isEPF_applicable;
                        newDetailEmployee.isETF_applicable = DetailEmployee.isETF_applicable;
                        newDetailEmployee.isOT_applicable = DetailEmployee.isOT_applicable;
                        newDetailEmployee.basic_salary = DetailEmployee.basic_salary;
                        newDetailEmployee.prmernant_active_date = DetailEmployee.prmernant_active_date;
                        newDetailEmployee.leave_end_date = DetailEmployee.leave_end_date;
                        int i = context.SaveChanges();
                        IsSuccess = validateSaveUpdate(i);
                        return IsSuccess;
                    }
                }
            }
            catch (Exception)
            {
                return IsSuccess = false;
            }
            return IsSuccess;
        }
        #endregion

        #region Unit Oprations
        [OperationContract]
        public IEnumerable<z_BasicUnit> GetUnits()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_BasicUnit.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }
        #endregion

        #region Payroll operation

        [OperationContract]
        private IEnumerable<trns_EmployeePeriodQunatity> GetAllTrnsPeriodQuantity(Guid periodID)
        {
            using (var context = new ERPEntities())
            {
                var results = context.trns_EmployeePeriodQunatity.Where(c => c.period_id == periodID).ToList();
                results.ForEach(e => context.Detach(e));
                return results;
            }
        }

        [OperationContract]
        private IEnumerable<trns_EmployeePeriodQunatity> GetAllTrnsPeriodQuantityForExcel(Guid periodID, Guid ruleID)
        {
            using (var context = new ERPEntities())
            {
                var results = context.trns_EmployeePeriodQunatity.Where(c => c.period_id == periodID && c.rule_id == ruleID).ToList();
                results.ForEach(e => context.Detach(e));
                return results;
            }
        }

        [OperationContract]
        private IEnumerable<EmployeePeriodQantityView> GetEmnployeePeriodQuantity(Guid EmployeeId)
        {
            using (var context = new ERPEntities())
            {
                var Results = context.EmployeePeriodQantityViews.Where(e => e.employee_id.Equals(EmployeeId)).ToList();
                Results.ForEach(e => context.Detach(e));
                return Results;
            }
        }

        [OperationContract]
        private IEnumerable<EmployeePeriodQantityView> GetAllEmnployeePeriodQuantity()
        {
            using (var context = new ERPEntities())
            {
                var Results = context.EmployeePeriodQantityViews.ToList();
                Results.ForEach(e => context.Detach(e));
                return Results;
            }
        }

        [OperationContract]
        private IEnumerable<trns_EmployeePeriodQunatity> GetTrnsPeriodQuanity(Guid empid, Guid rule_id, Guid period)
        {
            using (var context = new ERPEntities())
            {
                var Results = context.trns_EmployeePeriodQunatity.Where(e => e.employee_id.Equals(empid) && e.rule_id.Equals(rule_id) && e.period_id.Equals(period)).ToList();
                Results.ForEach(e => context.Detach(e));
                return Results;
            }
        }

        [OperationContract]
        private bool saveTransPeriodQuantity(trns_EmployeePeriodQunatity tpq)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    context.trns_EmployeePeriodQunatity.AddObject(tpq);
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        private bool deleteTransPeriodQuantity(trns_EmployeePeriodQunatity tpq)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    trns_EmployeePeriodQunatity newtpq = context.trns_EmployeePeriodQunatity.First(e => e.employee_id.Equals(tpq.employee_id) && e.rule_id.Equals(tpq.rule_id) && e.period_id.Equals(tpq.period_id));

                    context.trns_EmployeePeriodQunatity.DeleteObject(newtpq);
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        private bool addTrnalterEmplyeePeriodQuntity(trns_alter_EmployeePeriodQuantity trns_alter)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    context.trns_alter_EmployeePeriodQuantity.AddObject(trns_alter);
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        private IEnumerable<trns_EmployeePeriodQunatity> GetTrnsEmployeePeriodQuntityByEmployeeIDAndPeriod(Guid EmpID, Guid PeriodId)
        {
            using (var context = new ERPEntities())
            {
                var Results = context.trns_EmployeePeriodQunatity.Where(e => e.employee_id.Equals(EmpID) && e.period_id == PeriodId).ToList();
                Results.ForEach(e => context.Detach(e));
                return Results;
            }
        }

        [OperationContract]
        private IEnumerable<EmployeeQuantityVertify> GetEmployeeQuantityForVertify(Guid EmpId, Guid PeriodID)
        {
            using (var context = new ERPEntities())
            {
                var results = context.EmployeeQuantityVertifies.Where(e => e.employee_id.Equals(EmpId) && e.period_id.Equals(PeriodID)).ToList();
                results.ForEach(e => context.Detach(e));
                return results;
            }
        }

        #endregion

        #region z_period Operation
        [OperationContract]
        public IEnumerable<z_Period> GetAllPeriod()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_Period.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public bool SavePeriod(z_Period period)
        {
            bool isSuccess = false;
            try
            {
                using (var contex = new ERPEntities())
                {
                    z_Period newperiod = new z_Period();
                    newperiod.period_id = period.period_id;
                    newperiod.period_name = period.period_name;
                    newperiod.start_date = period.start_date;
                    newperiod.end_date = period.end_date;
                    newperiod.is_proceed = period.is_proceed; //haritha 2017-12-27
                    newperiod.save_datetime = period.save_datetime;
                    newperiod.save_user_id = period.save_user_id;
                    newperiod.modified_datetime = period.modified_datetime;
                    newperiod.modified_user_id = period.modified_user_id;
                    newperiod.delete_datetime = period.delete_datetime;
                    newperiod.delete_user_id = period.delete_user_id;
                    newperiod.isdelete = false;
                    // h 2020-10-09
                    newperiod.nopay_base = period.nopay_base;
                    newperiod.late_base = period.late_base;

                    contex.z_Period.AddObject(newperiod);
                    int i = contex.SaveChanges();
                    return isSuccess = validateSaveUpdate(i);
                }
            }
            catch (Exception)
            {

                return isSuccess;
            }

        }

        [OperationContract]
        public bool PeriodDelete(z_Period period)
        {
            bool isSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    z_Period perioddelete = context.z_Period.First(c => c.period_id == period.period_id && c.is_proceed == false);

                    perioddelete.delete_user_id = period.delete_user_id;
                    perioddelete.delete_datetime = period.delete_datetime;
                    perioddelete.isdelete = true;
                    int i = context.SaveChanges();
                    return isSuccess = validateSaveUpdate(i);

                }
            }
            catch (Exception)
            {
                return isSuccess = false;

            }

        }

        [OperationContract]
        public bool PeriodUpdate(z_Period period)
        {
            bool isSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {

                    z_Period per = context.z_Period.First(c => c.period_id == period.period_id && c.isdelete == false);
                    per.period_name = period.period_name;
                    per.start_date = period.start_date;
                    per.end_date = period.end_date;
                    per.modified_user_id = period.modified_user_id;
                    per.modified_datetime = period.modified_datetime;
                    per.is_proceed = period.is_proceed;//haritha 2017-12-27
                    // h 2020-10-09
                    per.nopay_base = period.nopay_base;
                    per.late_base = period.late_base;

                    int i = context.SaveChanges();
                    return isSuccess = validateSaveUpdate(i);

                }
            }
            catch (Exception)
            {
                return isSuccess = false;

            }

        }
        #endregion

        #region Employee Details

        [OperationContract]
        public IEnumerable<dtl_Employee> GetEmployeeDetails()
        {
            using (var context = new ERPEntities())
            {
                var results = context.dtl_Employee.ToList();
                results.ForEach(e => context.Detach(e));
                return results;

            }
        } 
        #endregion

        [OperationContract]
        public bool SaveEmployeeTrnBenifits(IEnumerable<trns_EmployeeBenifitPeriod> Benifits)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    foreach (trns_EmployeeBenifitPeriod item in Benifits)
                    {
                        context.trns_EmployeeBenifitPeriod.AddObject(item);
                    }
                    return validateSaveUpdate(context.SaveChanges());

                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool SaveEmployeeTrnDeductions(IEnumerable<trns_EmployeeDeductionPeriod> Deductions)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    foreach (trns_EmployeeDeductionPeriod item in Deductions)
                    {
                        context.trns_EmployeeDeductionPeriod.AddObject(item);

                    }

                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool SaveEmployeeTrnPayment(IEnumerable<trns_EmployeePayment> Payments)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    foreach (trns_EmployeePayment item in Payments)
                    {
                        context.trns_EmployeePayment.AddObject(item);
                    }

                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        private bool validateSaveUpdate(int result)
        {
            bool isSave = false;
            if (result > 0)
            {
                isSave = true;
            }
            else
            {
                isSave = false;
            }
            return isSave;
        }

        [OperationContract]
        public IEnumerable<TrnsEmployeePaymet> GetPaymetsByPeriodID(Guid PeriodId)
        {
            using (var Context = new ERPEntities())
            {
                var Results = Context.TrnsEmployeePaymets.Where(e => e.period_id.Equals(PeriodId)).ToList();
                Results.ForEach(e => Context.Detach(e));
                return Results;
            }
        }

        [OperationContract]
        public IEnumerable<z_CompanyVariable> GetCompanyVariables()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_CompanyVariable.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public bool SaveCompanyVaribles(z_CompanyVariable CompanyVariables)
        {
            bool IsSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    z_CompanyVariable newCompanyVariable = new z_CompanyVariable();
                    newCompanyVariable.company_variableID = CompanyVariables.company_variableID;
                    newCompanyVariable.company_id = CompanyVariables.company_id;
                    newCompanyVariable.variable_Name = CompanyVariables.variable_Name;
                    newCompanyVariable.variable_Value = CompanyVariables.variable_Value;
                    newCompanyVariable.Is_Pracentage = CompanyVariables.Is_Pracentage;
                    newCompanyVariable.Is_Active = CompanyVariables.Is_Active;
                    newCompanyVariable.save_user_id = CompanyVariables.save_user_id;
                    newCompanyVariable.save_datetime = CompanyVariables.save_datetime;
                    newCompanyVariable.modified_user_id = CompanyVariables.modified_user_id;
                    newCompanyVariable.modified_datetime = CompanyVariables.modified_datetime;
                    newCompanyVariable.delete_datetime = CompanyVariables.delete_datetime;
                    newCompanyVariable.delete_user_id = CompanyVariables.delete_user_id;
                    newCompanyVariable.isdelete = false;
                    context.z_CompanyVariable.AddObject(newCompanyVariable);
                    int i = context.SaveChanges();
                    return IsSuccess = validateSaveUpdate(i);
                }
            }
            catch (Exception)
            {
                return IsSuccess;
            }
        }

        [OperationContract]
        public bool UpdateCompanyVariables(z_CompanyVariable CompanyVariables)
        {
            bool IsSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    if (CompanyVariables != null)
                    {
                        z_CompanyVariable newcompanyvariables = context.z_CompanyVariable.First(c => c.company_variableID == CompanyVariables.company_variableID);
                        newcompanyvariables.company_variableID = CompanyVariables.company_variableID;
                        newcompanyvariables.company_id = CompanyVariables.company_id;
                        newcompanyvariables.variable_Name = CompanyVariables.variable_Name;
                        newcompanyvariables.variable_Value = CompanyVariables.variable_Value;
                        newcompanyvariables.Is_Pracentage = CompanyVariables.Is_Pracentage;
                        newcompanyvariables.Is_Active = CompanyVariables.Is_Active;
                        newcompanyvariables.isCalculatewithBasicPlusCompanyRules = CompanyVariables.isCalculatewithBasicPlusCompanyRules;
                        newcompanyvariables.modified_datetime = CompanyVariables.modified_datetime;
                        newcompanyvariables.modified_user_id = CompanyVariables.modified_user_id;
                        int i = context.SaveChanges();
                        return IsSuccess = validateSaveUpdate(i);
                    }
                }
            }
            catch (Exception)
            {
                return IsSuccess = false;
            }
            return IsSuccess;
        }


        [OperationContract]
        public bool DeleteCompanyVariabls(z_CompanyVariable CompanyVariables)
        {
            bool IsSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    z_CompanyVariable newCompanyVariables = context.z_CompanyVariable.First(c => c.company_variableID == CompanyVariables.company_variableID);
                    if (newCompanyVariables != null)
                    {
                        newCompanyVariables.isdelete = true;
                        newCompanyVariables.delete_user_id = CompanyVariables.delete_user_id;
                        newCompanyVariables.delete_datetime = CompanyVariables.delete_datetime;
                        int i = context.SaveChanges();
                        return IsSuccess = validateSaveUpdate(i);
                    }
                }
            }
            catch (Exception)
            {
                return IsSuccess = false;
            }
            return IsSuccess;
        }

        [OperationContract]
        public bool SavetrnsEmployeeVariable(trn_EmployeeCompanyVariable CompanyVariable)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    trn_EmployeeCompanyVariable newtrnEmployeeCompanyVariable = new trn_EmployeeCompanyVariable();
                    newtrnEmployeeCompanyVariable = CompanyVariable;
                    context.trn_EmployeeCompanyVariable.AddObject(newtrnEmployeeCompanyVariable);
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public IEnumerable<dtl_EmployeeCompanyVariable> GetdtlEmployeeCompanyVariableByEmpID(Guid EmpID)
        {
            using (var context = new ERPEntities())
            {
                var Results = context.dtl_EmployeeCompanyVariable.Where(e => e.employee_id.Equals(EmpID)).ToList();
                Results.ForEach(e => context.Detach(e));
                return Results;
            }
        }

        [OperationContract]
        public IEnumerable<dtl_EmployeeCompanyVariable> GetdtlEmployeeCompanyVariables()
        {
            using (var context = new ERPEntities())
            {
                var Results = context.dtl_EmployeeCompanyVariable.ToList();
                Results.ForEach(e => context.Detach(e));
                return Results;
            }
        }

        [OperationContract]
        public IEnumerable<TrnsEmployeeCompanyVariableView> GettrnEmployeeCompanyvariables(Guid periodID)
        {
            using (var context = new ERPEntities())
            {
                var Result = context.TrnsEmployeeCompanyVariableViews.Where(e => e.period_id.Equals(periodID)).ToList();
                Result.ForEach(e => context.Detach(e));
                return Result;
            }
        }

        [OperationContract]
        public IEnumerable<z_Slap> GetSalps()
        {
            using (var context = new ERPEntities())
            {
                var Results = context.z_Slap.ToList();
                Results.ForEach(e => context.Detach(e));
                return Results;
            }
        }

        [OperationContract]
        public IEnumerable<z_FlatSlap> GetFlatSlaps()
        {
            using (var context = new ERPEntities())
            {
                var results = context.z_FlatSlap.ToList();
                results.ForEach(e => context.Detach(e));
                return results;
            }
        }

        [OperationContract]
        public bool PayPaymentAll(List<TrnsEmployeePaymet> Payments)
        {
            bool isSucess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    foreach (TrnsEmployeePaymet item in Payments)
                    {
                        if (item != null)
                        {
                            trns_EmployeePayment OldTrnPayment = context.trns_EmployeePayment.First(e => e.employee_id.Equals(item.employee_id) && e.period_id.Equals(item.period_id));
                            if (OldTrnPayment != null)
                            {
                                OldTrnPayment.isPaied = item.isPaied;
                                OldTrnPayment.paydate = item.paydate;
                                OldTrnPayment.payment_method_id = item.payment_method_id;
                                isSucess = validateSaveUpdate(context.SaveChanges());
                            }
                        }
                    }
                    return isSucess;
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool PayPaymentOne(TrnsEmployeePaymet Payment)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    trns_EmployeePayment OldTrnsPayment = context.trns_EmployeePayment.First(e => e.employee_id.Equals(Payment.employee_id) && e.period_id.Equals(Payment.period_id));
                    OldTrnsPayment.isPaied = Payment.isPaied;
                    OldTrnsPayment.paydate = Payment.paydate;
                    OldTrnsPayment.payment_method_id = Payment.payment_method_id;
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }


        [OperationContract]
        public IEnumerable<rpt_catagory> GetrptCatagory()
        {
            using (var context = new ERPEntities())
            {
                var results = context.rpt_catagory.ToList();
                results.ForEach(e => context.Detach(e));
                return results;
            }
        }

        [OperationContract]
        public IEnumerable<Report_Details_View> GetReportDataForReportViewer(Guid catagoryid, Guid moduleid)
        {
            using (var context = new ERPEntities())
            {
                var results = context.Report_Details_View.Where(c => c.rpt_catagory_id == catagoryid && c.rpt_module_id == moduleid).ToList();
                results.ForEach(e => context.Detach(e));
                return results;
            }
        }
        [OperationContract]
        public IEnumerable<Report_Details_View> GetReportDataForBenifitUserControll()
        {
            using (var context = new ERPEntities())
            {
                var results = context.Report_Details_View.ToList();
                results.ForEach(e => context.Detach(e));
                return results;
            }
        }

        [OperationContract]
        public IEnumerable<EmployeeSumarryView> GetAllEmployeeDetail()
        {
            using (var context = new ERPEntities())
            {
                var results = context.EmployeeSumarryViews.Where(e => e.isdelete == false).ToList();
                results.ForEach(e => context.Detach(e));
                return results;
            }
        }

        [OperationContract]
        public IEnumerable<z_ViewModel> GetViewModels()
        {
            using (var context = new ERPEntities())
            {
                var results = context.z_ViewModel.ToList();
                results.ForEach(e => context.Detach(e));
                return results;
            }
        }

        [OperationContract]
        public IEnumerable<ViewModelUserPermission_View> GetViewModelUserPermissiosns()
        {
            using (var context = new ERPEntities())
            {
                var results = context.ViewModelUserPermission_View.ToList();
                results.ForEach(e => context.Detach(e));
                return results;
            }
        }

        [OperationContract]
        public IEnumerable<usr_UserPermissionViewModel> GetUserPermissionForBack()
        {
            using (var context = new ERPEntities())
            {
                var result = context.usr_UserPermissionViewModel.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public void SaveUserPemissions(IEnumerable<ViewModelUserPermission_View> permissions)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (permissions != null)
                    {
                        foreach (ViewModelUserPermission_View permission in permissions)
                        {
                            ViewModelUserPermission_View oldPermission = context.ViewModelUserPermission_View.First(z => z.view_model_id.Equals(permission.view_model_id) && z.user_id.Equals(permission.user_id));

                            if (oldPermission != null)
                            {
                                oldPermission.canview = permission.canview;
                                oldPermission.cansave = permission.cansave;
                                oldPermission.candelete = permission.candelete;
                                oldPermission.canmodify = permission.canmodify;

                                context.SaveChanges();
                            }
                            else
                            {
                                ViewModelUserPermission_View newPermission = new ViewModelUserPermission_View();
                                newPermission = permission;
                                context.ViewModelUserPermission_View.AddObject(newPermission);
                                context.SaveChanges();
                            }
                        }
                    }
                }
            }
            catch (Exception)
            {

            }

        }

        [OperationContract]
        public bool DeleteCompanyRules(CompanyRuleView Rule)
        {
            bool isSuccess = false;
            using (var context = new ERPEntities())
                try
                {
                    {
                        mas_CompanyRule newCompanyRules = context.mas_CompanyRule.First(c => c.rule_id == Rule.rule_id);
                        if (newCompanyRules != null)
                        {
                            newCompanyRules.isdelete = true;
                            newCompanyRules.delete_datetime = Rule.delete_datetime;
                            newCompanyRules.delete_user_id = Rule.delete_user_id;
                            int i = context.SaveChanges();
                            isSuccess = validateSaveUpdate(i);
                            return isSuccess;
                        }
                    }
                }
                catch (Exception)
                {

                    return isSuccess = false;
                }
            return isSuccess;
        }

        [OperationContract]
        public IEnumerable<z_BankBranch> GetBankBranchForEmployee(z_Bank bank)
        {

            using (var context = new ERPEntities())
            {
                var result = context.z_BankBranch.Where(e => e.bank_id == bank.bank_id).ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }



        }

        [OperationContract]
        public IEnumerable<z_BankBranch> GetBanckBranch()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_BankBranch.ToList();
                result.ForEach(e => context.Detach(e));
                return result;

            }
        }

        [OperationContract]
        public bool UpdateBranch(z_BankBranch currentBranch)
        {
            bool isSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    z_BankBranch branch = context.z_BankBranch.First(c => c.branch_id == currentBranch.branch_id);
                    branch.name = currentBranch.name;
                    branch.bank_branch_code = currentBranch.bank_branch_code;
                    branch.address = currentBranch.address;
                    branch.telephone = currentBranch.telephone;
                    branch.email = currentBranch.email;
                    branch.fax = currentBranch.fax;
                    branch.z_Bank.bank_id = currentBranch.bank_id;
                    branch.modified_datetime = currentBranch.modified_datetime;
                    branch.modified_user_id = currentBranch.modified_user_id;
                    int i = context.SaveChanges();
                    return isSuccess = validateSaveUpdate(i);
                }

            }
            catch (Exception)
            {

                isSuccess = false;
            }
            return isSuccess;
        }

        [OperationContract]
        public bool DeleteBranch(z_BankBranch branch)
        {
            bool isSuccess = false;
            if (branch != null)
            {
                try
                {
                    using (var contex = new ERPEntities())
                    {
                        z_BankBranch deleteBranch = contex.z_BankBranch.First(c => c.branch_id == branch.branch_id);
                        deleteBranch.delete_user_id = branch.delete_user_id;
                        deleteBranch.delete_datetime = branch.delete_datetime;
                        deleteBranch.isdelete = true;
                        //contex.z_BankBranch.DeleteObject(deleteBranch);
                        int i = contex.SaveChanges();
                        return isSuccess = validateSaveUpdate(i);

                    }
                }
                catch (Exception)
                {
                    return isSuccess = false;
                }

            }
            return isSuccess;
        }

        [OperationContract]
        public bool SaveBranch(z_BankBranch currentBranch)
        {
            bool isSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    z_BankBranch zbaranch = new z_BankBranch();
                    zbaranch.bank_id = currentBranch.bank_id;
                    zbaranch.bank_branch_code = currentBranch.bank_branch_code;
                    zbaranch.branch_id = currentBranch.branch_id;
                    zbaranch.name = currentBranch.name;
                    zbaranch.address = currentBranch.address;
                    zbaranch.telephone = currentBranch.telephone;
                    zbaranch.email = currentBranch.email;
                    zbaranch.fax = currentBranch.fax;
                    zbaranch.save_datetime = currentBranch.save_datetime;
                    zbaranch.save_user_id = currentBranch.save_user_id;
                    zbaranch.modified_datetime = currentBranch.modified_datetime;
                    zbaranch.modified_user_id = currentBranch.modified_user_id;
                    zbaranch.delete_datetime = currentBranch.delete_datetime;
                    zbaranch.delete_user_id = currentBranch.delete_user_id;
                    zbaranch.isdelete = false;
                    context.z_BankBranch.AddObject(zbaranch);
                    int i = context.SaveChanges();
                    return isSuccess = validateSaveUpdate(i);

                }
            }
            catch (Exception)
            {
                return isSuccess = false;
            }

        }
        [OperationContract]
        public IEnumerable<EmployeeBankBranchView> GetEmployeeBankBranchView()
        {
            using (var context = new ERPEntities())
            {
                var result = context.EmployeeBankBranchViews.ToList();
                result.ForEach(e => context.Detach(e));
                return result;

            }
        }

        [OperationContract]
        public bool SaveUserBank(dtl_EmployeeBank currentbank)
        {
            bool isSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    dtl_EmployeeBank dtlbank = new dtl_EmployeeBank();
                    dtlbank.account_id = currentbank.account_id;
                    dtlbank.employee_id = currentbank.employee_id;
                    dtlbank.bank_id = currentbank.bank_id;
                    dtlbank.branch_id = currentbank.branch_id;
                    dtlbank.isdelete = false;
                    dtlbank.isactive = currentbank.isactive;
                    dtlbank.account_no = currentbank.account_no;
                    dtlbank.account_name = currentbank.account_name;
                    dtlbank.save_datetime = currentbank.save_datetime;
                    dtlbank.save_user_id = currentbank.save_user_id;
                    context.dtl_EmployeeBank.AddObject(dtlbank);
                    int i = context.SaveChanges();
                    return isSuccess = validateSaveUpdate(i);
                }
            }
            catch (Exception)
            {
                return isSuccess = false;
            }

        }

        [OperationContract]
        public bool UpdateDtlBank(dtl_EmployeeBank dtlbank)
        {
            bool isSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    dtl_EmployeeBank bank = context.dtl_EmployeeBank.First(c => c.account_id == dtlbank.account_id);
                    bank.employee_id = dtlbank.employee_id;
                    bank.bank_id = dtlbank.bank_id;
                    bank.branch_id = dtlbank.branch_id;
                    bank.account_no = dtlbank.account_no;
                    bank.account_name = dtlbank.account_name;
                    bank.isactive = dtlbank.isactive;
                    bank.modified_datetime = dtlbank.modified_datetime;
                    bank.modified_user_id = dtlbank.modified_user_id;
                    int i = context.SaveChanges();
                    return isSuccess = validateSaveUpdate(i);
                }

            }
            catch (Exception)
            {

                isSuccess = false;
            }
            return isSuccess;
        }

        [OperationContract]
        public bool DeleteDtlBank(dtl_EmployeeBank bank)
        {
            bool isSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    dtl_EmployeeBank dtlbank = context.dtl_EmployeeBank.First(c => c.employee_id == bank.employee_id && c.bank_id == bank.bank_id && c.branch_id == c.branch_id);
                    dtlbank.isdelete = true;
                    dtlbank.isactive = false;
                    dtlbank.delete_datetime = bank.delete_datetime;
                    dtlbank.delete_user_id = bank.delete_user_id;
                    int i = context.SaveChanges();
                    return isSuccess = validateSaveUpdate(i);
                }

            }
            catch (Exception)
            {

                isSuccess = false;
            }
            return isSuccess;
        }

        #region Account Name From Master 2017-06-28
        [OperationContract]
        public IEnumerable<dtl_EmployeeOtherOfficialDetails> GetAccountNames()
        {
            using (var context = new ERPEntities())
            {
                var results = context.dtl_EmployeeOtherOfficialDetails.Where(c => c.isdelete == false).ToList();
                results.ForEach(e => context.Detach(e));
                return results;
            }
        }

        [OperationContract]
        public bool UpdateAccountName(Guid employeeID, string accName, Guid userID, DateTime datetime)
        {
            bool isSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    if (employeeID != null && accName != null)
                    {
                        dtl_EmployeeBank bank = context.dtl_EmployeeBank.FirstOrDefault(c => c.employee_id == employeeID && c.isdelete == false);
                        bank.account_name = accName;
                        bank.modified_datetime = datetime;
                        bank.modified_user_id = userID;
                        int i = context.SaveChanges();
                        return isSuccess = validateSaveUpdate(i);
                    }
                }

            }
            catch (Exception)
            {

                isSuccess = false;
            }
            return isSuccess;
        }
        #endregion

        [OperationContract]
        public IEnumerable<Company_Branch_View> GetCompanyBranch()
        {
            using (var context = new ERPEntities())
            {
                var results = context.Company_Branch_View.ToList();
                results.ForEach(e => context.Detach(e));
                return results;
            }
        }
        [OperationContract]
        public IEnumerable<z_CompanyBranches> GetAllCompanyBranch()
        {
            using (var context = new ERPEntities())
            {
                var results = context.z_CompanyBranches.ToList();
                results.ForEach(e => context.Detach(e));
                return results;
            }
        }
        #region dlt_companyVariableRules Methods
        [OperationContract]
        public IEnumerable<CompanyVariableRulesView> GetVariableRules(Guid VariableId)
        {
            using (var context = new ERPEntities())
            {
                var result = context.CompanyVariableRulesViews.Where(e => e.company_varible_id.Equals(VariableId)).ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public bool SaveCompanyVariableRules(z_CompanyVariable variable, List<CompanyVariableRulesView> VariableRuleview)
        {
            using (var context = new ERPEntities())
            {
                if (variable != null)
                {
                    try
                    {
                        context.dtl_companyVariableCompanyRules.Where(e => e.company_varible_id.Equals(variable.company_variableID)).ToList().ForEach(context.dtl_companyVariableCompanyRules.DeleteObject);
                        context.SaveChanges();
                    }
                    catch (ArgumentNullException ex)
                    {

                    }

                    try
                    {
                        foreach (CompanyVariableRulesView item in VariableRuleview)
                        {
                            dtl_companyVariableCompanyRules newItem = new dtl_companyVariableCompanyRules();
                            newItem.company_Rule_id = item.company_Rule_id;
                            newItem.company_varible_id = item.company_varible_id;
                            newItem.isActive = item.isActive;
                            newItem.save_datetime = item.save_datetime;
                            newItem.save_user_id = item.save_user_id;
                            newItem.modified_datetime = item.modified_datetime;
                            newItem.modified_user_id = item.modified_user_id;
                            newItem.delete_datetime = item.delete_datetime;
                            newItem.delete_user_id = item.delete_user_id;
                            newItem.isdelete = false;
                            context.dtl_companyVariableCompanyRules.AddObject(newItem);
                            context.SaveChanges();
                        }
                    }
                    catch (OperationCanceledException ex)
                    {
                        return false;
                    }
                }
            }
            return true;
        }

        [OperationContract]
        public IEnumerable<dtl_companyVariableCompanyRules> GetAllCompanyVariableRules()
        {
            using (var context = new ERPEntities())
            {
                var result = context.dtl_companyVariableCompanyRules.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }
        #endregion

        #region dtl_EmployeeBank Operations
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        /// 

        [OperationContract]
        public IEnumerable<dtl_EmployeeBank> GetEmployeeBankDetails()
        {
            using (var context = new ERPEntities())
            {
                var result = context.dtl_EmployeeBank.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<dtl_EmployeeBank> GetEmployeeBankDetailsByEmployee(Guid EmployeeId)
        {
            using (var context = new ERPEntities())
            {
                var result = context.dtl_EmployeeBank.Where(e => e.employee_id.Equals(EmployeeId)).ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public bool UpdateActiveBank(dtl_EmployeeBank EmployeeBank)
        {
            bool IsSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    dtl_EmployeeBank newEmployeeBank = context.dtl_EmployeeBank.First(e => e.account_id == EmployeeBank.account_id && e.employee_id == EmployeeBank.employee_id && e.bank_id == EmployeeBank.bank_id && e.branch_id == EmployeeBank.branch_id && e.account_no == EmployeeBank.account_no);
                    if (newEmployeeBank != null)
                    {
                        newEmployeeBank.isactive = EmployeeBank.isactive;
                        newEmployeeBank.modified_datetime = EmployeeBank.modified_datetime;
                        newEmployeeBank.modified_user_id = EmployeeBank.modified_user_id;
                        int i = context.SaveChanges();
                        return IsSuccess = validateSaveUpdate(i);
                    }

                }
            }
            catch (Exception)
            {
                return IsSuccess = false;
            }
            return IsSuccess;
        }


        [OperationContract]
        public IEnumerable<EmployeeBankDetailsView> GetEmployeeBankDetailsView()
        {
            using (var context = new ERPEntities())
            {
                var result = context.EmployeeBankDetailsViews.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<EmployeeBankDetailsView> GetEmployeeBankDetailsViewByEmployeeId(Guid EmpId)
        {
            using (var context = new ERPEntities())
            {
                var result = context.EmployeeBankDetailsViews.Where(e => e.employee_id.Equals(EmpId)).ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public bool SaveEmployeeBankDetails(dtl_EmployeeBank EmployeeBankDetail)
        {
            bool IsSuccess = false;
            try
            {
                if (EmployeeBankDetail != null)
                {
                    using (var context = new ERPEntities())
                    {
                        dtl_EmployeeBank newEmployeeBankDetail = new dtl_EmployeeBank();
                        newEmployeeBankDetail = EmployeeBankDetail;
                        context.dtl_EmployeeBank.AddObject(EmployeeBankDetail);
                        int i = context.SaveChanges();
                        return IsSuccess = validateSaveUpdate(i);
                    }
                }
                return IsSuccess;
            }
            catch (Exception)
            {
                return IsSuccess = false;
            }
        }

        [OperationContract]
        public bool UpdateEmployeeBankDetails(dtl_EmployeeBank EmployeeBankDetail)
        {
            bool IsSuccess = false;
            try
            {
                if (EmployeeBankDetail != null)
                {
                    using (var context = new ERPEntities())
                    {
                        dtl_EmployeeBank newEmployeeBankDetails = context.dtl_EmployeeBank.First(c => c.account_id == EmployeeBankDetail.account_id);

                        if (newEmployeeBankDetails != null)
                        {
                            newEmployeeBankDetails.account_id = EmployeeBankDetail.account_id;
                            newEmployeeBankDetails.bank_id = EmployeeBankDetail.bank_id;
                            newEmployeeBankDetails.branch_id = EmployeeBankDetail.branch_id;
                            newEmployeeBankDetails.account_no = EmployeeBankDetail.account_no;
                            newEmployeeBankDetails.isactive = EmployeeBankDetail.isactive;
                            newEmployeeBankDetails.modified_user_id = EmployeeBankDetail.modified_user_id;
                            newEmployeeBankDetails.modified_datetime = EmployeeBankDetail.modified_datetime;
                            int i = context.SaveChanges();
                            return IsSuccess = validateSaveUpdate(i);
                        }
                    }
                }
            }
            catch (Exception)
            {
                return IsSuccess = false;
            }
            return IsSuccess;
        }

        [OperationContract]
        public bool DeleteEmployeeBankDetails(EmployeeBankDetailsView EmployeeBankDetail)
        {
            bool IsSuccess = false;
            try
            {

                if (EmployeeBankDetail != null)
                {
                    using (var context = new ERPEntities())
                    {
                        dtl_EmployeeBank deleteLEmployeeBankDetail = context.dtl_EmployeeBank.First(c => c.account_id == EmployeeBankDetail.account_id);
                        deleteLEmployeeBankDetail.isdelete = true;
                        deleteLEmployeeBankDetail.delete_datetime = EmployeeBankDetail.delete_datetime;
                        deleteLEmployeeBankDetail.delete_user_id = EmployeeBankDetail.delete_user_id;
                        int i = context.SaveChanges();
                        return IsSuccess = validateSaveUpdate(i);
                    }
                }
            }
            catch (Exception)
            {
                return IsSuccess = false;
            }
            return IsSuccess;
        }

        #endregion
        [OperationContract]
        public bool UpdateEmployeeBasicSalary(dtl_historyBasicSalary Basicsalary)
        {
            bool IsSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    dtl_historyBasicSalary newSalaryHistry = new dtl_historyBasicSalary();
                    newSalaryHistry = Basicsalary;
                    context.dtl_historyBasicSalary.AddObject(newSalaryHistry);
                    int i = context.SaveChanges();
                    return IsSuccess = validateSaveUpdate(i);
                }
            }
            catch (Exception)
            {

                return false;
            }
        }
        [OperationContract]
        public bool UpdateEmployeeActive(dtl_historyBasicSalary history)
        {
            bool IsSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    dtl_historyBasicSalary dtlhistory = context.dtl_historyBasicSalary.First(c => c.employee_id == history.employee_id && c.old_salary == history.old_salary && c.isactive == true);
                    dtlhistory.isactive = false;
                    int i = context.SaveChanges();
                    return IsSuccess = validateSaveUpdate(i);
                }

            }
            catch (Exception)
            {
                return false;
            }

        }
        #region new Employee company Variable

        [OperationContract]
        public IEnumerable<CompnyVaribleView> GetAllCompanyVariableData()
        {
            using (var context = new ERPEntities())
            {
                var result = context.CompnyVaribleViews.ToList();
                result.ForEach(e => context.Detach(e));
                return result;

            }
        }
        [OperationContract]
        public bool SaveEmployeeCompanyVariable()
        {

            return true;
        }



        #endregion

        [OperationContract]
        public bool SaveVariable(dtl_EmployeeCompanyVariable variables)
        {
            bool IsSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    dtl_EmployeeCompanyVariable newEmployeeCompanyVariables = new dtl_EmployeeCompanyVariable();
                    newEmployeeCompanyVariables = variables;
                    context.dtl_EmployeeCompanyVariable.AddObject(newEmployeeCompanyVariables);
                    int i = context.SaveChanges();
                    return IsSuccess = validateSaveUpdate(i);
                }
            }
            catch (Exception)
            {
                return IsSuccess = false;
            }
        }

        [OperationContract]
        public bool GetAllEmployeeWothoughRule(List<dtl_EmployeeCompanyVariable> variable)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    foreach (dtl_EmployeeCompanyVariable item in variable)
                    {
                        context.dtl_EmployeeCompanyVariable.AddObject(item);

                    }

                    return validateSaveUpdate(context.SaveChanges());
                }

            }
            catch (Exception)
            {
                return false;
            }

        }


        [OperationContract]
        public bool UpdateDetailCompanyVariables(dtl_EmployeeCompanyVariable CompanyVariables)
        {
            bool IsSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    if (CompanyVariables != null)
                    {
                        dtl_EmployeeCompanyVariable newcompanyvariables = context.dtl_EmployeeCompanyVariable.First(c => c.company_variableID == CompanyVariables.company_variableID && c.employee_id == CompanyVariables.employee_id);
                        newcompanyvariables.employee_id = CompanyVariables.employee_id;
                        newcompanyvariables.company_variableID = CompanyVariables.company_variableID;
                        newcompanyvariables.isApplicable = CompanyVariables.isApplicable;
                        newcompanyvariables.isdelete = CompanyVariables.isdelete;
                        newcompanyvariables.modified_datetime = CompanyVariables.modified_datetime;
                        newcompanyvariables.modified_user_id = CompanyVariables.modified_user_id;
                        int i = context.SaveChanges();
                        return IsSuccess = validateSaveUpdate(i);
                    }
                }
            }
            catch (Exception)
            {
                return IsSuccess = false;
            }
            return IsSuccess;
        }
        [OperationContract]
        public IEnumerable<NewEmployeeCompanyRuleDetail> GetEmployeeCompanyRuleDetails()
        {
            using (var context = new ERPEntities())
            {
                var results = context.NewEmployeeCompanyRuleDetails.ToList();
                results.ForEach(e => context.Detach(e));
                return results;
            }
        }
        [OperationContract]
        public IEnumerable<NewDetailEmployeeCompanyRuleView> GetCompanyRuleDetailView()
        {
            using (var context = new ERPEntities())
            {
                var result = context.NewDetailEmployeeCompanyRuleViews.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }
        [OperationContract]
        public bool SaveAllEmployeeCompanyRule(List<dtl_EmployeeRule> Rule)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    foreach (dtl_EmployeeRule item in Rule)
                    {
                        var addstatus = context.mas_CompanyRule.FirstOrDefault(c => c.rule_id == item.rule_id).status;
                        item.status = addstatus;
                        context.dtl_EmployeeRule.AddObject(item);

                    }

                    return validateSaveUpdate(context.SaveChanges());
                }

            }
            catch (Exception)
            {
                return false;
            }

        }
        [OperationContract]
        public bool UpdateCompanyRuleDetails(dtl_EmployeeRule CompanyRule)
        {
            bool IsSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    if (CompanyRule != null)
                    {
                        dtl_EmployeeRule newcompanyRule = context.dtl_EmployeeRule.First(c => c.rule_id == CompanyRule.rule_id && c.employee_id == CompanyRule.employee_id);
                        newcompanyRule.employee_id = CompanyRule.employee_id;
                        newcompanyRule.is_special = CompanyRule.is_special;
                        newcompanyRule.special_amount = CompanyRule.special_amount;
                        newcompanyRule.modified_user_id = CompanyRule.modified_user_id;
                        newcompanyRule.modified_datetime = CompanyRule.modified_datetime;
                        newcompanyRule.isactive = CompanyRule.isactive;
                        int i = context.SaveChanges();
                        return IsSuccess = validateSaveUpdate(i);
                    }
                }
            }
            catch (Exception)
            {
                return IsSuccess = false;
            }
            return IsSuccess;
        }

        //[OperationContract]
        //public IEnumerable<z_Town> GetTowns()
        //{
        //    using (var context = new ERPEntities())
        //    {
        //        var result = context.z_Town.ToList();
        //        result.ForEach(v => context.Detach(v));
        //        return result;
        //    }
        //}
        [OperationContract]
        public IEnumerable<z_Town> GetTownDetails()
        {
            List<z_Town> TownDetails = new List<z_Town>();
            using (var context = new ERPEntities())
            {
                var Result = (from Town in context.z_Town
                              join City in context.z_City on Town.city_id equals City.city_id
                              select new
                              {
                                  Town.town_id,
                                  Town.city_id,
                                  City.city,
                                  Town.town_name,
                                  Town.isdelete
                              }).ToList();
                foreach (var item in Result)
                {
                    z_Town newTown = new z_Town();
                    newTown.town_id = item.town_id;
                    newTown.city_id = item.city_id;
                    newTown.town_name = item.town_name;
                    newTown.isdelete = item.isdelete;


                    z_City newCity = new z_City();
                    newCity.city_id = (Guid)item.city_id;
                    newCity.city = item.city;
                    newTown.z_City = newCity;
                    TownDetails.Add(newTown);
                }
                return TownDetails;
            }
        }

        [OperationContract]
        public IEnumerable<TownMasterView> GetTownMasterView()
        {
            using (var context = new ERPEntities())
            {
                var result = context.TownMasterViews.ToList();
                result.ForEach(d => context.Detach(d));
                return result;
            }
        }

        [OperationContract]
        private bool SaveTown(z_Town Towns)
        {
            try
            {
                if (Towns != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_Town newTown = new z_Town();
                        newTown = Towns;
                        context.z_Town.AddObject(Towns);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
            return false;
        }

        [OperationContract]
        private bool UpdateTown(z_Town Towns)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    z_Town updateTown = context.z_Town.First(s => s.town_id == Towns.town_id);
                    updateTown.town_id = Towns.town_id;
                    updateTown.city_id = Towns.city_id;
                    updateTown.town_name = Towns.town_name;
                    updateTown.modified_datetime = Towns.modified_datetime;
                    updateTown.modified_user_id = Towns.modified_user_id;
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                throw;
            }
            return false;
        }


        [OperationContract]
        private bool DeleteTown(z_Town Towns)
        {
            bool isSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    z_Town deleteTown = context.z_Town.First(c => c.town_id == Towns.town_id);
                    deleteTown.delete_user_id = Towns.delete_user_id;
                    deleteTown.delete_datetime = Towns.delete_datetime;
                    deleteTown.isdelete = true;
                    int i = context.SaveChanges();
                    isSuccess = validateSaveUpdate(i);
                    return isSuccess;
                }
            }
            catch (Exception)
            {

                throw;
            }
            return false;
        }



        #region Employee Supervisors

        [OperationContract]
        public IEnumerable<Employee_Supervisor> GetEmployeeSupervisors(Guid Employee_id)
        {
            using (var context = new ERPEntities())
            {
                var results = context.Employee_Supervisor.Where(e => e.employee_id == Employee_id).ToList();
                results.ForEach(e => context.Detach(e));
                return results;
            }
        }

        #endregion

        #region z_Holiday Operation

        [OperationContract]
        public IEnumerable<z_Holiday> getSelectedMonthHolidays(DateTime Date)
        {
            using (var context = new ERPEntities())
            {
                var results = context.z_Holiday.Where(e => e.holiday_Date.Value.Month.Equals(Date.Month) && e.holiday_Date.Value.Year.Equals(Date.Year)).ToList();
                results.ForEach(z => context.Detach(z));
                return results;
            }
        }

        #endregion


        [OperationContract]
        public bool SaveAllUserPermission(List<usr_UserPermissionViewModel> Permission)
        {
            bool isSucess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    foreach (usr_UserPermissionViewModel item in Permission)
                    {
                        if (item != null)
                        {
                            usr_UserPermissionViewModel newPermission = context.usr_UserPermissionViewModel.First(e => e.user_id.Equals(item.user_id) && e.view_model_id.Equals(item.view_model_id));
                            if (newPermission != null)
                            {
                                newPermission.user_id = item.user_id;
                                newPermission.view_model_id = item.view_model_id;
                                newPermission.canview = item.canview;
                                newPermission.cansave = item.cansave;
                                newPermission.canmodify = item.canmodify;
                                newPermission.candelete = item.candelete;
                                newPermission.save_user_id = item.save_user_id;
                                newPermission.save_datetime = item.save_datetime;
                                newPermission.modified_datetime = item.modified_datetime;
                                newPermission.modified_user_id = item.modified_user_id;
                                newPermission.delete_datetime = item.delete_datetime;
                                newPermission.delete_user_id = item.delete_user_id;
                                newPermission.isdelete = false;
                                isSucess = validateSaveUpdate(context.SaveChanges());
                            }
                        }
                    }
                    return isSucess;
                }
            }
            catch (Exception)
            {
                return false;
            }
        }


        #region z_BasicDay Operations

        [OperationContract]
        public IEnumerable<z_BasicDay> GetBasicDays()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_BasicDay.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public bool SaveBasicDays(z_BasicDay BasicDay)
        {
            bool IsSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    z_BasicDay newBasicDay = new z_BasicDay();
                    newBasicDay = BasicDay;
                    context.z_BasicDay.AddObject(BasicDay);
                    int i = context.SaveChanges();
                    return IsSuccess = validateSaveUpdate(i);
                }
            }
            catch (Exception)
            {
                return IsSuccess = false;
            }
        }

        [OperationContract]
        public bool UpdateBasicDays(z_BasicDay BasicDay)
        {
            bool IsSuccess = false;
            try
            {
                if (BasicDay != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_BasicDay newBasicDay = context.z_BasicDay.First(c => c.day_id == BasicDay.day_id);
                        if (newBasicDay != null)
                        {
                            newBasicDay.day_id = BasicDay.day_id;
                            newBasicDay.day_of_week = BasicDay.day_of_week;
                            newBasicDay.day_position = BasicDay.day_position;
                            newBasicDay.modified_user_id = BasicDay.modified_user_id;
                            newBasicDay.modified_datetime = BasicDay.modified_datetime;
                            int i = context.SaveChanges();
                            return IsSuccess = validateSaveUpdate(i);
                        }
                    }
                }
            }
            catch (Exception)
            {
                return IsSuccess = false;
            }
            return IsSuccess;
        }

        [OperationContract]
        public bool DeleteBasicDay(z_BasicDay Basicday)
        {
            bool IsSuccess = false;
            try
            {
                if (Basicday != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_BasicDay deleteBasicDay = context.z_BasicDay.First(e => e.day_id == Basicday.day_id);
                        deleteBasicDay.delete_user_id = Basicday.delete_user_id;
                        deleteBasicDay.delete_datetime = Basicday.delete_datetime;
                        deleteBasicDay.isdelete = true;
                        //context.z_BasicDay.DeleteObject(deleteBasicDay);
                        int i = context.SaveChanges();
                        return IsSuccess = validateSaveUpdate(i);
                    }
                }
            }
            catch (Exception)
            {
                return IsSuccess = false;
            }
            return IsSuccess;
        }

        #endregion

        [OperationContract]
        public IEnumerable<trns_EmployeeBenifitPeriod> GetBenifitByPeriod(Guid PeriodId)
        {
            using (var Context = new ERPEntities())
            {
                var Results = Context.trns_EmployeeBenifitPeriod.Where(e => e.period_id.Equals(PeriodId)).ToList();
                Results.ForEach(e => Context.Detach(e));
                return Results;
            }
        }
        [OperationContract]
        public IEnumerable<trns_EmployeeDeductionPeriod> GetDeductionByPeriod(Guid PeriodId)
        {
            using (var Context = new ERPEntities())
            {
                var Results = Context.trns_EmployeeDeductionPeriod.Where(e => e.period_id.Equals(PeriodId)).ToList();
                Results.ForEach(e => Context.Detach(e));
                return Results;
            }
        }
        [OperationContract]
        public IEnumerable<trn_EmployeeCompanyVariable> GetCompanyVariableByPeriod(Guid PeriodId)
        {
            using (var Context = new ERPEntities())
            {
                var Results = Context.trn_EmployeeCompanyVariable.Where(e => e.period_id.Equals(PeriodId)).ToList();
                Results.ForEach(e => Context.Detach(e));
                return Results;
            }
        }
        [OperationContract]
        public IEnumerable<trns_EmployeePayment> GetEmployeePaymentByPeriod(Guid PeriodId)
        {
            using (var Context = new ERPEntities())
            {
                var Results = Context.trns_EmployeePayment.Where(e => e.period_id.Equals(PeriodId)).ToList();
                Results.ForEach(e => Context.Detach(e));
                return Results;
            }
        }
        #region z_ShiftCatergory Operations


        [OperationContract]
        public IEnumerable<z_ShiftCategory> GetShiftcategory()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.z_ShiftCategory.ToList();
                    result.ForEach(e => context.Detach(e));
                    return result;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        [OperationContract]
        public bool DeleteShiftCategory(z_ShiftCategory shiftCategory)
        {
            try
            {
                bool isSuccess = false;
                using (var context = new ERPEntities())
                    try
                    {
                        {
                            z_ShiftCategory delShiftCategory = context.z_ShiftCategory.First(c => c.shift_id == shiftCategory.shift_id);
                            if (delShiftCategory != null)
                            {
                                delShiftCategory.delete_datetime = shiftCategory.delete_datetime;
                                delShiftCategory.delete_user_id = shiftCategory.delete_user_id;
                                delShiftCategory.isdelete = true;
                                //context.z_ShiftCategory.DeleteObject(delShiftCategory);
                                return validateSaveUpdate(context.SaveChanges());
                            }
                        }
                    }
                    catch (Exception)
                    {
                        return isSuccess = false;
                    }
                return isSuccess;
            }
            catch (Exception)
            {
                throw;
            }
        }

        [OperationContract]
        public bool SaveShiftCategory(z_ShiftCategory shiftCategory)
        {
            bool isSuccess = false;

            try
            {
                if (shiftCategory != null)
                {
                    using (var context = new ERPEntities())
                    {
                        if (context != null)
                        {
                            z_ShiftCategory newShiftCat = new z_ShiftCategory();
                            newShiftCat = shiftCategory;
                            context.z_ShiftCategory.AddObject(newShiftCat);
                            int i = context.SaveChanges();
                            isSuccess = validateSaveUpdate(i);
                            return isSuccess;
                        }
                    }
                }
            }
            catch (Exception)
            {
                return isSuccess = false;
            }
            return isSuccess;
        }

        [OperationContract]
        public bool UpdateShiftCategory(z_ShiftCategory shiftCategory)
        {
            bool isSuccess = false;

            try
            {
                if (shiftCategory != null)
                {
                    using (var context = new ERPEntities())
                    {
                        if (context != null)
                        {
                            z_ShiftCategory oldShiftCategory = context.z_ShiftCategory.First(z => z.shift_id.Equals(shiftCategory.shift_id));
                            oldShiftCategory.shift_id = shiftCategory.shift_id;
                            oldShiftCategory.shift_name = shiftCategory.shift_name;
                            oldShiftCategory.description = shiftCategory.description;
                            oldShiftCategory.modified_user_id = shiftCategory.modified_user_id;
                            oldShiftCategory.modified_datetime = shiftCategory.modified_datetime;
                            oldShiftCategory.is_active = shiftCategory.is_active;
                            int i = context.SaveChanges();
                            isSuccess = validateSaveUpdate(i);
                            return isSuccess;
                        }
                    }
                }
            }
            catch (Exception)
            {
                return isSuccess = false;
            }
            return isSuccess;
        }
        #endregion

        #region dtl_Shift Operations
        [OperationContract]
        public IEnumerable<EmployeeShiftDetailView> GetShiftDetailsViewList()
        {
            using (var context = new ERPEntities())
            {
                var result = context.EmployeeShiftDetailViews.ToList();
                result.ForEach(c => context.Detach(c));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<dtl_Shift> GetShiftDetails()
        {
            using (var context = new ERPEntities())
            {
                var result = context.dtl_Shift.ToList();
                result.ForEach(s => context.Detach(s));
                return result;
            }
        }

        [OperationContract]
        public bool SaveShiftDetails(dtl_Shift ShiftDetail)
        {
            bool IsSucess = false;
            try
            {
                if (ShiftDetail != null)
                {
                    using (var context = new ERPEntities())
                    {
                        dtl_Shift newShiftDetail = new dtl_Shift();
                        newShiftDetail = ShiftDetail;
                        context.dtl_Shift.AddObject(ShiftDetail);
                        int i = context.SaveChanges();
                        return IsSucess = validateSaveUpdate(i);
                    }
                }
            }
            catch (Exception)
            {
                return IsSucess = false;
            }
            return IsSucess;
        }

        [OperationContract]
        public bool UpdateShiftDetail(dtl_Shift ShiftDetail)
        {
            bool IsSuccess = false;
            try
            {
                if (ShiftDetail != null)
                {
                    using (var context = new ERPEntities())
                    {
                        dtl_Shift updateShift = context.dtl_Shift.First(b => b.shift_detail_id == ShiftDetail.shift_detail_id);
                        if (updateShift != null)
                        {
                            updateShift.shift_detail_id = ShiftDetail.shift_detail_id;
                            updateShift.shift_category_id = ShiftDetail.shift_category_id;
                            updateShift.in_day_id = ShiftDetail.in_day_id;
                            updateShift.out_day_id = ShiftDetail.out_day_id;
                            updateShift.in_time = ShiftDetail.in_time;
                            updateShift.out_time = ShiftDetail.out_time;
                            updateShift.grace_in = ShiftDetail.grace_in;
                            updateShift.grace_out = ShiftDetail.grace_out;
                            updateShift.shift_in_time = ShiftDetail.shift_in_time;
                            updateShift.shift_out_time = ShiftDetail.shift_out_time;
                            updateShift.shift_in_day_id = ShiftDetail.shift_in_day_id;
                            updateShift.shift_out_day_id = ShiftDetail.shift_out_day_id;
                            updateShift.is_off = ShiftDetail.is_off;
                            updateShift.can_continue = ShiftDetail.can_continue;
                            int i = context.SaveChanges();
                            return IsSuccess = validateSaveUpdate(i);
                        }
                    }
                }
            }
            catch (Exception)
            {
                return IsSuccess = false;
            }
            return IsSuccess;
        }

        [OperationContract]
        public bool DeleteShiftDetail(EmployeeShiftDetailView ShiftDetail)
        {
            bool IsSuccess = false;
            try
            {
                if (ShiftDetail != null)
                {
                    using (var context = new ERPEntities())
                    {
                        dtl_Shift deleteShift = context.dtl_Shift.First(c => c.shift_detail_id == ShiftDetail.shift_detail_id);
                        context.dtl_Shift.DeleteObject(deleteShift);
                        int i = context.SaveChanges();
                        return IsSuccess = validateSaveUpdate(i);
                    }
                }
            }
            catch (Exception)
            {
                return IsSuccess = false;
            }
            return IsSuccess;
        }
        #endregion

        #region EmployeeAttendance Operations
        [OperationContract]
        public IEnumerable<EmployeeAttendanceView> GetEmployeeAttendanceView()
        {
            using (var context = new ERPEntities())
            {
                var result = context.EmployeeAttendanceViews.ToList();
                result.ForEach(c => context.Detach(c));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<dtl_EmployeeAttendance> GetEmployeeAttendance()
        {
            using (var context = new ERPEntities())
            {
                var result = context.dtl_EmployeeAttendance.ToList();
                result.ForEach(d => context.Detach(d));
                return result;
            }
        }

        [OperationContract]
        private bool SaveEmployeeAttendance(dtl_EmployeeAttendance Attendance)
        {
            try
            {
                if (Attendance != null)
                {
                    using (var context = new ERPEntities())
                    {
                        dtl_EmployeeAttendance newAttendance = new dtl_EmployeeAttendance();
                        newAttendance = Attendance;
                        context.dtl_EmployeeAttendance.AddObject(Attendance);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }
            return false;
        }

        [OperationContract]
        private bool DeleteEmployeeAttendance(EmployeeAttendanceView Attendance)
        {
            try
            {
                if (Attendance != null)
                {
                    using (var context = new ERPEntities())
                    {
                        dtl_EmployeeAttendance deleteAttendance = context.dtl_EmployeeAttendance.First(d => d.employee_id == Attendance.employee_id);
                        deleteAttendance.delete_user_id = Attendance.delete_user_id;
                        deleteAttendance.delete_datetime = Attendance.delete_datetime;
                        deleteAttendance.isdelete = true;
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
            return false;
        }

        [OperationContract]
        private bool UpdateEmployeeAttendance(dtl_EmployeeAttendance Attendance)
        {
            try
            {
                if (Attendance != null)
                {
                    using (var context = new ERPEntities())
                    {
                        dtl_EmployeeAttendance deleteAttendance = context.dtl_EmployeeAttendance.First(d => d.employee_id == Attendance.employee_id);
                        deleteAttendance.shift_catagory_id = Attendance.shift_catagory_id;
                        deleteAttendance.is_leave_applicable = Attendance.is_leave_applicable;
                        deleteAttendance.is_roster_employee = Attendance.is_roster_employee;
                        deleteAttendance.summery_name = Attendance.summery_name;
                        deleteAttendance.is_ot_applicable = Attendance.is_ot_applicable;
                        deleteAttendance.delete_user_id = Attendance.delete_user_id;
                        deleteAttendance.delete_datetime = Attendance.delete_datetime;
                        deleteAttendance.isdelete = true;
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
            return false;
        }
        #endregion

        [OperationContract]
        public IEnumerable<z_RosterMaster> GetMonthlyRosters()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_RosterMaster.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        #region z_OTCatagory Operations

        [OperationContract]
        public IEnumerable<z_OTCategory> GetOTCatagories()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_OTCategory.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public bool SaveOTCatagories(z_OTCategory OTCatagory)
        {
            bool IsSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    z_OTCategory newOT = new z_OTCategory();
                    newOT = OTCatagory;
                    context.z_OTCategory.AddObject(OTCatagory);
                    int i = context.SaveChanges();
                    return IsSuccess = validateSaveUpdate(i);
                }
            }
            catch (Exception)
            {
                return IsSuccess = false;
            }
        }

        [OperationContract]
        public bool UpdateOTCatagories(z_OTCategory OTCatagory)
        {
            bool IsSuccess = false;
            try
            {
                if (OTCatagory != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_OTCategory UpdateOT = context.z_OTCategory.First(s => s.ot_id == OTCatagory.ot_id);
                        if (UpdateOT != null)
                        {
                            UpdateOT.ot_id = OTCatagory.ot_id;
                            UpdateOT.name = OTCatagory.name;
                            UpdateOT.is_active = OTCatagory.is_active;
                            UpdateOT.calc_start_time = OTCatagory.calc_start_time;
                            UpdateOT.calc_end_time = OTCatagory.calc_end_time;
                            UpdateOT.break_in_time = OTCatagory.break_in_time;
                            UpdateOT.break_out_time = OTCatagory.break_out_time;
                            UpdateOT.amount_for_unit = OTCatagory.amount_for_unit;
                            UpdateOT.priority = OTCatagory.priority;
                            UpdateOT.modified_user_id = OTCatagory.modified_user_id;
                            UpdateOT.modified_datetime = OTCatagory.modified_datetime;
                            UpdateOT.minit_per_unit = OTCatagory.minit_per_unit;
                            int i = context.SaveChanges();
                            return IsSuccess = validateSaveUpdate(i);
                        }
                    }
                }
            }
            catch (Exception)
            {
                return IsSuccess = false;
            }
            return IsSuccess;
        }

        [OperationContract]
        public bool DeleteOTCatagory(z_OTCategory OTCatagory)
        {
            bool IsSucess = false;
            try
            {
                if (OTCatagory != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_OTCategory deleteOT = context.z_OTCategory.First(a => a.ot_id == OTCatagory.ot_id);
                        if (deleteOT != null)
                        {
                            deleteOT.delete_user_id = OTCatagory.delete_user_id;
                            deleteOT.delete_datetime = OTCatagory.delete_datetime;
                            deleteOT.isdelete = true;
                            //context.z_OTCategory.DeleteObject(deleteOT);
                            int i = context.SaveChanges();
                            return IsSucess = validateSaveUpdate(i);
                        }
                    }
                }
            }
            catch (Exception)
            {
                return IsSucess = false;
            }
            return IsSucess;
        }
        #endregion


        #region dtl_EmployeeOT Operations

        [OperationContract]
        public IEnumerable<EmployeeOTDetailLeaveView> GetEmployeeOTViewDetails()
        {
            using (var context = new ERPEntities())
            {
                var result = context.EmployeeOTDetailLeaveViews.ToList();
                result.ForEach(m => context.Detach(m));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<dtl_EmployeeOT> GetEmployeeOTDetails()
        {
            using (var context = new ERPEntities())
            {
                var result = context.dtl_EmployeeOT.ToList();
                result.ForEach(x => context.Detach(x));
                return result;
            }
        }

        [OperationContract]
        private bool SaveEmployeeOT(dtl_EmployeeOT EmployeeOT)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (EmployeeOT != null)
                    {
                        dtl_EmployeeOT newEmployeeOT = new dtl_EmployeeOT();
                        newEmployeeOT = EmployeeOT;
                        context.dtl_EmployeeOT.AddObject(EmployeeOT);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }
            return false;
        }

        [OperationContract]
        private bool UpdateEmployeeOT(dtl_EmployeeOT EmployeeOT)
        {
            if (EmployeeOT != null)
            {
                using (var context = new ERPEntities())
                {
                    dtl_EmployeeOT updateEmployeeOT = context.dtl_EmployeeOT.First(c => c.employee_id == (Guid)EmployeeOT.employee_id);
                    updateEmployeeOT.ot_name = EmployeeOT.ot_name;
                    updateEmployeeOT.is_active = EmployeeOT.is_active;
                    updateEmployeeOT.modified_user_id = EmployeeOT.modified_user_id;
                    updateEmployeeOT.modified_datetime = EmployeeOT.modified_datetime;
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            return false;
        }

        [OperationContract]
        private bool DeleteEmployeeOT(EmployeeOTDetailLeaveView EmployeeOT)
        {
            if (EmployeeOT != null)
            {
                using (var context = new ERPEntities())
                {
                    dtl_EmployeeOT deleteEmployeeOT = context.dtl_EmployeeOT.First(b => b.employee_id == EmployeeOT.employee_id);
                    deleteEmployeeOT.delete_user_id = EmployeeOT.delete_user_id;
                    deleteEmployeeOT.delete_datetime = EmployeeOT.delete_datetime;
                    deleteEmployeeOT.isdelete = true;
                    //context.dtl_EmployeeOT.DeleteObject(deleteEmployeeOT);
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            return false;
        }
        #endregion

        [OperationContract]
        public bool SaveEmployeeOTDetail(IEnumerable<dtl_EmployeeOT> EmployeeOT)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    foreach (dtl_EmployeeOT item in EmployeeOT)
                    {
                        context.dtl_EmployeeOT.AddObject(item);
                    }
                    return validateSaveUpdate(context.SaveChanges());

                }
            }
            catch (Exception)
            {
                return false;
            }
        }


        #region z_AttendanceDevice Operations
        [OperationContract]
        public IEnumerable<AttendanceDeviceView> GetAttendanceDeviceView()
        {
            using (var context = new ERPEntities())
            {
                var result = context.AttendanceDeviceViews.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<Z_AttendanceDevice> GetAttendanceDevice()
        {
            using (var context = new ERPEntities())
            {
                var result = context.Z_AttendanceDevice.ToList();
                result.ForEach(c => context.Detach(c));
                return result;
            }
        }

        [OperationContract]
        private bool SaveAttendanceDevice(Z_AttendanceDevice AttandanceDevice)
        {
            try
            {
                if (AttandanceDevice != null)
                {
                    using (var context = new ERPEntities())
                    {
                        Z_AttendanceDevice newAttenanceDevice = new Z_AttendanceDevice();
                        newAttenanceDevice = AttandanceDevice;
                        context.Z_AttendanceDevice.AddObject(AttandanceDevice);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
            return false;
        }

        [OperationContract]
        private bool UpdateAttendanceDevice(Z_AttendanceDevice AttendanceDevice)
        {
            try
            {
                if (AttendanceDevice != null)
                {
                    using (var context = new ERPEntities())
                    {
                        Z_AttendanceDevice updateAttendanceDevice = context.Z_AttendanceDevice.First(c => c.device_id == AttendanceDevice.device_id);
                        updateAttendanceDevice.device_id = AttendanceDevice.device_id;
                        updateAttendanceDevice.device_model_id = AttendanceDevice.device_model_id;
                        updateAttendanceDevice.device_number2 = AttendanceDevice.device_number2;
                        updateAttendanceDevice.device_name = AttendanceDevice.device_name;
                        updateAttendanceDevice.port = AttendanceDevice.port;
                        updateAttendanceDevice.ip_address = AttendanceDevice.ip_address;
                        updateAttendanceDevice.is_active = AttendanceDevice.is_active;
                        updateAttendanceDevice.modified_datetime = AttendanceDevice.modified_datetime;
                        updateAttendanceDevice.modified_user_id = AttendanceDevice.modified_user_id;
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
            return false;
        }

        [OperationContract]
        private bool DeleteAttedanceDevice(AttendanceDeviceView AttendanceDevice)
        {
            try
            {
                if (AttendanceDevice != null)
                {
                    using (var context = new ERPEntities())
                    {
                        Z_AttendanceDevice deleteAttendance = context.Z_AttendanceDevice.First(d => d.device_id == AttendanceDevice.device_id);
                        deleteAttendance.delete_user_id = AttendanceDevice.delete_user_id;
                        deleteAttendance.delete_datetime = AttendanceDevice.delete_datetime;
                        deleteAttendance.isdelete = true;
                        //context.Z_AttendanceDevice.DeleteObject(deleteAttendance);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {

                throw;
            }
            return false;
        }
        #endregion


        #region z_DeviceModel Operations
        [OperationContract]
        public IEnumerable<z_DeviceModel> GetDeviceModeles()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_DeviceModel.ToList();
                result.ForEach(s => context.Detach(s));
                return result;
            }
        }
        #endregion


        #region z_AttendanceInOutDevice Operations
        [OperationContract]
        public IEnumerable<z_AttendanceInOutMode> GetAttendanceInOutMode()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_AttendanceInOutMode.ToList();
                result.ForEach(u => context.Detach(u));
                return result;
            }
        }

        [OperationContract]
        private bool SaveInOutDevice(z_AttendanceInOutMode InOutDevice)
        {
            try
            {
                if (InOutDevice != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_AttendanceInOutMode newInOutDevice = new z_AttendanceInOutMode();
                        newInOutDevice = InOutDevice;
                        context.z_AttendanceInOutMode.AddObject(InOutDevice);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
            return false;
        }

        [OperationContract]
        private bool UpdateInOutDevice(z_AttendanceInOutMode InOutDevice)
        {
            try
            {
                if (InOutDevice != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_AttendanceInOutMode upadete = context.z_AttendanceInOutMode.First(t => t.mode_id == InOutDevice.mode_id);
                        upadete.mode_id = InOutDevice.mode_id;
                        upadete.mode_name = InOutDevice.mode_name;
                        upadete.value = InOutDevice.value;
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
            return false;
        }

        [OperationContract]
        private bool DeleteInOutDevice(z_AttendanceInOutMode InOutDevice)
        {
            try
            {
                if (InOutDevice != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_AttendanceInOutMode delete = context.z_AttendanceInOutMode.First(f => f.mode_id == InOutDevice.mode_id);
                        context.z_AttendanceInOutMode.DeleteObject(delete);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
            return false;
        }
        #endregion

        #region z_AttendanceVerifyMode Operations
        [OperationContract]
        public IEnumerable<z_AttendanceVerifyMode> GetAttendanceVerifyModes()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_AttendanceVerifyMode.ToList();
                result.ForEach(g => context.Detach(g));
                return result;
            }
        }

        [OperationContract]
        private bool SaveVerifyModes(z_AttendanceVerifyMode VerifyMode)
        {
            try
            {
                if (VerifyMode != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_AttendanceVerifyMode newVerifyMode = new z_AttendanceVerifyMode();
                        newVerifyMode = VerifyMode;
                        context.z_AttendanceVerifyMode.AddObject(VerifyMode);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
            return false;
        }

        [OperationContract]
        private bool UpdateAttendanceVerifyMode(z_AttendanceVerifyMode VerifyMode)
        {
            try
            {
                if (VerifyMode != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_AttendanceVerifyMode upadete = context.z_AttendanceVerifyMode.First(t => t.verify_id == VerifyMode.verify_id);
                        upadete.verify_id = VerifyMode.verify_id;
                        upadete.verify_name = VerifyMode.verify_name;
                        upadete.value = VerifyMode.value;
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
            return false;
        }

        [OperationContract]
        private bool DeleteAttendanceVerifyModel(z_AttendanceVerifyMode VerifyMode)
        {
            try
            {
                if (VerifyMode != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_AttendanceVerifyMode delete = context.z_AttendanceVerifyMode.First(f => f.verify_id == VerifyMode.verify_id);
                        context.z_AttendanceVerifyMode.DeleteObject(delete);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
            return false;
        }
        #endregion


        [OperationContract]
        public IEnumerable<dtl_AttendanceData> GetAllAttendanceData()
        {
            using (var context = new ERPEntities())
            {
                var result = context.dtl_AttendanceData.ToList();
                result.ForEach(u => context.Detach(u));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<dtl_AttendanceData> GetAttendanceFromDateRange(DateTime fromdate, DateTime todate)
        {
            ERPEntities context = new ERPEntities();
            var result = context.GetAttendanceData(fromdate, todate).ToList();
            result.ForEach(g => context.Detach(g));
            return result;

        }

        [OperationContract]
        public IEnumerable<dtl_Shift> GetShiftByCatabory(string cataboryid)
        {
            ERPEntities context = new ERPEntities();
            var result = context.GetShiftDetailForShiftCatagory(cataboryid).ToList();
            result.ForEach(g => context.Detach(g));
            return result;

        }
        [OperationContract]
        public IEnumerable<z_LeaveOption> GetLeaveOption()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_LeaveOption.ToList();
                result.ForEach(u => context.Detach(u));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<trns_EmployeeAttendance> GetTransEmployeeAttendance()
        {
            using (var context = new ERPEntities())
            {
                var result = context.trns_EmployeeAttendance.ToList();
                result.ForEach(u => context.Detach(u));
                return result;
            }
        }
        //[OperationContract]
        //public IEnumerable<trns_AttendanceSumarry> GetTransEmployeeSumarry()
        //{
        //    using (var context = new ERPEntities())
        //    {
        //        var result = context.trns_AttendanceSumarry.ToList();
        //        result.ForEach(u => context.Detach(u));
        //        return result;
        //    }
        //}

        [OperationContract]
        public bool SaveEmployeeAttendanceProcess(IEnumerable<trns_EmployeeAttendance> Attendance)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    foreach (trns_EmployeeAttendance item in Attendance)
                    {
                        context.trns_EmployeeAttendance.AddObject(item);
                    }
                    return validateSaveUpdate(context.SaveChanges());

                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        //[OperationContract]
        //public bool SaveEmployeeAttendanceProcessSumarry(IEnumerable<trns_AttendanceSumarry> Sumarry)
        //{
        //    try
        //    {
        //        using (var context = new ERPEntities())
        //        {
        //            foreach (trns_AttendanceSumarry item in Sumarry)
        //            {
        //                context.trns_AttendanceSumarry.AddObject(item);
        //            }
        //            return validateSaveUpdate(context.SaveChanges());

        //        }
        //    }
        //    catch (Exception)
        //    {
        //        return false;
        //    }
        //}
        [OperationContract]
        public IEnumerable<z_Holiday> GetHolidays()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_Holiday.ToList();
                result.ForEach(u => context.Detach(u));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<trns_EmployeeDoubleOT> GetEmployeeDoubleOt()
        {
            using (var context = new ERPEntities())
            {
                var result = context.trns_EmployeeDoubleOT.ToList();
                result.ForEach(u => context.Detach(u));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<trns_EmployeeOtPeriod> GetTransEmployeeOtPeriod()
        {
            using (var context = new ERPEntities())
            {
                var result = context.trns_EmployeeOtPeriod.ToList();
                result.ForEach(u => context.Detach(u));
                return result;
            }
        }

        [OperationContract]
        public bool SaveEmployeeDoubleOt(IEnumerable<trns_EmployeeDoubleOT> employeeOt)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    foreach (trns_EmployeeDoubleOT ot_item in employeeOt)
                    {
                        context.trns_EmployeeDoubleOT.AddObject(ot_item);
                    }
                    return validateSaveUpdate(context.SaveChanges());

                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool SaveEmployeeOtRule(IEnumerable<trns_EmployeeOtPeriod> otPreiod)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    foreach (trns_EmployeeOtPeriod ot_item in otPreiod)
                    {
                        context.trns_EmployeeOtPeriod.AddObject(ot_item);
                    }
                    return validateSaveUpdate(context.SaveChanges());

                }
            }
            catch (Exception)
            {
                return false;
            }
        }
        [OperationContract]
        public IEnumerable<z_Religen> GetReligen()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_Religen.ToList();
                result.ForEach(d => context.Detach(d));
                return result;
            }
        }

        [OperationContract]
        public bool SaveEmployeeFromExcel(IEnumerable<mas_Employee> employee)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    mas_Employee emp = new mas_Employee();
                    dtl_Employee dtlemp = new dtl_Employee();

                    foreach (mas_Employee ot_item in employee)
                    {
                        emp = ot_item;
                        context.mas_Employee.AddObject(emp);
                    }
                    foreach (var ot_item_dtl in employee)
                    {
                        dtlemp = ot_item_dtl.dtl_Employee;
                        context.dtl_Employee.AddObject(dtlemp);
                    }
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        #region Manual Attendance Upload
        [OperationContract]
        public int SaveManualAttendanceUpload(List<dtl_AttendanceData> empAttendance)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    foreach (var item in empAttendance)
                    {
                        context.dtl_AttendanceData.AddObject(item);
                    }
                    if (validateSaveUpdate(context.SaveChanges()))
                        return 1;
                }
            }
            catch (Exception)
            { }
            return 0;
        }
        #endregion


        //[OperationContract]
        //public bool deleteEmployeeAttendance(Guid periodID)
        //{
        //    if (periodID != null && periodID != Guid.Empty)
        //    {
        //        try
        //        {
        //            using (var context = new ERPEntities())
        //            {
        //                return validateSaveUpdate(context.DeletePayrollProcess(periodID.ToString()));
        //            }
        //        }
        //        catch (Exception)
        //        {

        //            return false;
        //        }
        //    }
        //    else
        //    {
        //        return false;
        //    }
        //}

        [OperationContract]
        public bool deleteEmployeeAttendanceFromTable(Guid periodID)
        {
            if (periodID != null && periodID != Guid.Empty)
            {
                try
                {
                    using (var context = new ERPEntities())
                    {
                        return validateSaveUpdate(context.DeletePayrollProcess(periodID.ToString()));
                    }
                }
                catch (Exception)
                {

                    return false;
                }
            }
            else
            {
                return false;
            }
        }

        [OperationContract]
        public bool DeletePayrollProcess(Guid periodID, List<Guid> employeeID)
        {
            if (periodID != null && periodID != Guid.Empty)
            {
                try
                {
                    using (var context = new ERPEntities())
                    {
                        //return validateSaveUpdate(context.ClearPayrollProcess(periodID.ToString()));
                        bool oncedone = false;
                        foreach (var item in employeeID)
                        {
                            context.ClearPayrollProcess(periodID.ToString(), item.ToString());
                            oncedone = true;
                            //return validateSaveUpdate(context.ClearPayrollProcess(periodID.ToString())); 
                        }
                        return oncedone;
                    }
                }
                catch (Exception)
                {

                    return false;
                }
            }
            else
            {
                return false;
            }
        }

        //[OperationContract]
        //public IEnumerable<trns_AttendanceSumarry> GetEmployeeAttendanceSumarry(Guid periodID)
        //{
        //    using (var context = new ERPEntities())
        //    {
        //        var result = context.GetEmployeeTransAttendanceSumarry(periodID.ToString()).ToList();
        //        result.ForEach(s => context.Detach(s));
        //        return result;
        //    }
        //}


        //[OperationContract]
        //public IEnumerable<trns_EmployeePeriodQunatity> GetEmployeePeriodQuntity(Guid periodID)
        //{
        //    using (var context = new ERPEntities())
        //    {
        //        var result = context.GetEmployeePeriodQuntity(periodID.ToString()).ToList();
        //        result.ForEach(s => context.Detach(s));
        //        return result;
        //    }
        //}

        //[OperationContract]
        //public IEnumerable<trns_EmployeePeriodQunatity> GetEmployeePeriodQuntity(Guid periodID)
        //{
        //    using (var context = new ERPEntities())
        //    {
        //        List<trns_EmployeePeriodQunatity> result = new List<trns_EmployeePeriodQunatity>();
        //        result =  context.GetEmployeePeriodQuntity(periodID.ToString()).ToList();
        //        result.ForEach(s => context.Detach(s));
        //        return result;
        //    }
        //}

        [OperationContract]
        public IEnumerable<trns_OTemployeeSumarryReport> GetEmployeeOtSumarryDetail()
        {
            using (var context = new ERPEntities())
            {
                var result = context.trns_OTemployeeSumarryReport.ToList();
                result.ForEach(s => context.Detach(s));
                return result;
            }
        }

        [OperationContract]
        public bool SaveEmployeePeriodQuntity(IEnumerable<trns_EmployeePeriodQunatity> quntityItem)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    foreach (trns_EmployeePeriodQunatity ot_item in quntityItem)
                    {
                        context.trns_EmployeePeriodQunatity.AddObject(ot_item);
                    }
                    return validateSaveUpdate(context.SaveChanges());

                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool SaveEmployeePermission(IEnumerable<usr_UserPermissionViewModel> permission)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    foreach (usr_UserPermissionViewModel per_item in permission)
                    {
                        context.usr_UserPermissionViewModel.AddObject(per_item);
                    }
                    return validateSaveUpdate(context.SaveChanges());

                }
            }
            catch (Exception)
            {
                return false;
            }
        }


        [OperationContract]
        private bool UpdatePermission(List<usr_UserPermissionViewModel> permission)
        {
            using (var context = new ERPEntities())
            {
                foreach (var item in permission)
                {
                    if (item != null)
                    {
                        usr_UserPermissionViewModel upadete = context.usr_UserPermissionViewModel.First(t => t.view_model_id == item.view_model_id && t.user_id == item.user_id);
                        upadete.canview = item.canview;
                        upadete.cansave = item.cansave;
                        upadete.canmodify = item.canmodify;
                        upadete.candelete = item.candelete;
                        upadete.modified_user_id = item.modified_user_id;
                        upadete.modified_datetime = item.modified_datetime;
                    }
                }
                return validateSaveUpdate(context.SaveChanges());
            }
        }
        [OperationContract]
        public bool AttendanceProcess(IEnumerable<EmployeeSumarryView> selectedEmployee, z_Period period, bool breakTime)
        {
            AttendanceData = GetAttendanceFromDateRange(period.start_date.Value.Date, period.end_date.Value.Date);
            Shift = GetShiftDetails();
            Holidays = GetHolidays();
            LeaveType = GetAllLeaveTypes();
            AuthorizedNopay = GetEmployeeAuthorizeNopay();
            AttendanceCalculationRule = GetEmployeeAttendanceRule();
            ExtraOverTime = GetEmployeeExtraOt();
            bool attendanceBreak = breakTime;


            LeavePool = GetLeavePoolFromDate(period.start_date.Value.Date, period.end_date.Value.Date);

            foreach (var emp in selectedEmployee)
            {
                DetailEmployeeShift = GetEmployeeAttendance();
                CurrentDetailEmployeeShift = DetailEmployeeShift.FirstOrDefault(z => z.employee_id == emp.employee_id);
                if (CurrentDetailEmployeeShift != null)
                {
                    #region Attendance Break

                    if (attendanceBreak && AttendanceData.Count() > 1)
                    {
                        for (DateTime i = period.start_date.Value; i <= period.end_date.Value; i += TimeSpan.FromDays(1))
                        {
                            IEnumerable<dtl_AttendanceData> SelectedtAttendanceData = AttendanceData.Where(z => z.emp_id == (emp.emp_id == null ? emp.emp_id : emp.emp_id.TrimStart('0')) && z.attend_date == i.Date).OrderBy(c => c.attend_time);
                            if (SelectedtAttendanceData != null && SelectedtAttendanceData.Count() != 0 && SelectedtAttendanceData.Count() > 1)
                            {
                                AttendanceBreakTrack(SelectedtAttendanceData.ToList(), emp.emp_id.TrimStart('0'), period.period_id.ToString(), i);
                            }
                        }
                    }

                    #endregion


                    if (CurrentDetailEmployeeShift.is_roster_employee == true)
                    {

                        // roster employee Attendance Calculation
                    }
                    else
                    {
                        CalculateEmployeeAttendance(emp, CurrentDetailEmployeeShift, period);
                        // Normal Shift Employee Attendance calculation
                        // string dt = System.DateTime.Now.DayOfWeek.ToString();
                    }
                }
            }
            if (SaveAttendanceEmployeeData())
            {
                SaveMaxOtList();
                UpdateMaxOtList();
                return true;
            }
            else
            {
                return false;
            }

        }

        public bool SaveAttendanceEmployeeData()
        {
            bool savestatus = false;
            try
            {
                if (SaveEmployeeAttendanceProcess(EmployeeAttendance.ToArray()))

                //if (SaveEmployeeAttendanceProcessSumarry(sumarry.ToArray()))
                {
                    savestatus = true;
                    EmployeeAttendance.Clear();
                    //sumarry.Clear();
                }

            }
            catch (Exception ex)
            {
                savestatus = false;
            }

            return savestatus;
        }

        [OperationContract]
        public IEnumerable<z_AttendanceCalculationRule> GetEmployeeAttendanceRule()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_AttendanceCalculationRule.ToList();
                result.ForEach(s => context.Detach(s));
                return result;
            }
        }
        private bool _IsYestardayFullDay;
        public bool IsYestardayFullDay
        {
            get { return _IsYestardayFullDay; }
            set { _IsYestardayFullDay = value; }
        }

        #region Main Attendance Process

        private void CalculateEmployeeAttendance(EmployeeSumarryView employee, dtl_EmployeeAttendance employeeshift, z_Period period)
        {
            try
            {
                for (DateTime i = period.start_date.Value; i <= period.end_date.Value; i += TimeSpan.FromDays(1))
                {
                    bool cal_isfictureDay = false;
                    bool isNomalAttendanceCalculation = false;
                    Guid cal_attendanceId = Guid.NewGuid();
                    Guid cal_employeeId = employee.employee_id;
                    Guid cal_periodId = period.period_id;
                    Guid cal_shiftCatagoryId = Guid.Empty;
                    Guid cal_dayid = Guid.Empty;
                    DateTime cal_attendDate = i.Date;
                    string cal_dayofweek = i.DayOfWeek.ToString();
                    TimeSpan cal_inTime = System.DateTime.MinValue.TimeOfDay;
                    TimeSpan cal_outTime = System.DateTime.MinValue.TimeOfDay;
                    DateTime cal_inDateTime = System.DateTime.Today;
                    DateTime cal_OutDateTime = System.DateTime.Today;
                    TimeSpan cal_earlyInTime = System.DateTime.MinValue.TimeOfDay;
                    TimeSpan cal_lateInTime = System.DateTime.MinValue.TimeOfDay;
                    TimeSpan cal_lateOutTime = System.DateTime.MinValue.TimeOfDay;
                    TimeSpan cal_earlyOutTime = System.DateTime.MinValue.TimeOfDay;
                    TimeSpan cal_earlyCutOffMinits = System.DateTime.MinValue.TimeOfDay;
                    TimeSpan cal_EviningCutOffMinits = System.DateTime.MinValue.TimeOfDay;
                    TimeSpan cal_actualOtInTime = System.DateTime.MinValue.TimeOfDay;
                    TimeSpan cal_actualOtOutTime = System.DateTime.MinValue.TimeOfDay;
                    dtl_AttendanceData cal_startAttendancedata = new dtl_AttendanceData();
                    dtl_AttendanceData cal_endAttendance = new dtl_AttendanceData();
                    bool cal_isHoliday = false;
                    bool cal_isAbsent = false;
                    bool cal_isFreeDay = false;
                    bool cal_isLateIn = false;
                    bool cal_isEarlyIn = false;
                    bool cal_isLateOut = false;
                    bool cal_isEarlyOut = false;
                    bool cal_isInCutOff = false;
                    bool cal_isOutCutOff = false;
                    bool cal_isNopay = false;
                    bool cal_isInvalid = false;
                    bool cal_isEveningShortDay = false;
                    bool cal_isMorningShortDay = false;
                    bool cal_isMorningHalfDay = false;
                    bool cal_isEveningHalfDay = false;
                    bool cal_isLeave = false;
                    bool cal_isFullDay = false;
                    bool cal_isholidayWork = false;
                    bool cal_isMorningNomalAttendance = false;
                    bool cal_isEviningNormalAttendance = false;
                    bool cal_isMorningGraceAttend = false;
                    bool cal_isEviningGraceOut = false;
                    bool cal_isFreedayWork = false;
                    bool cal_isNormalAttendance = false;
                    bool cal_isMecantileWork = false;
                    DateTime cal_ot_date = System.DateTime.Now.Date;
                    TimeSpan cal_ot_freeDayWork = System.DateTime.MinValue.TimeOfDay;
                    TimeSpan cal_ot_CutOffTime = System.DateTime.MinValue.TimeOfDay;
                    TimeSpan cal_mecantile_work_time = System.DateTime.MinValue.TimeOfDay;
                    TimeSpan cal_poya_work_time = System.DateTime.MinValue.TimeOfDay;
                    int cal_MorningOtbreakMinit = 0;
                    int cal_EveningOtbreakMinit = 0;
                    bool cal_isAuthorizeNopay = false;
                    bool isRecodeSaveInInvalidProcess = false;
                    decimal cal_additionalDays = 0;
                    Guid cal_leave_detail_id = Guid.Empty;
                    Guid cal_leave_type_id = Guid.Empty;

                    z_AttendanceCalculationRule MorningRule = AttendanceCalculationRule.FirstOrDefault(z => z.attendance_rule_id == Guid.Parse("00000000-0000-0000-0000-000000000001") && z.is_active == true);
                    z_AttendanceCalculationRule EveningRule = AttendanceCalculationRule.FirstOrDefault(z => z.attendance_rule_id == Guid.Parse("00000000-0000-0000-0000-000000000002") && z.is_active == true);
                    z_AttendanceCalculationRule HolidyDeductLunchTime = AttendanceCalculationRule.FirstOrDefault(z => z.attendance_rule_id == Guid.Parse("00000000-0000-0000-0000-000000000004") && z.is_active == true);
                    z_AttendanceCalculationRule ApprovedOtTime = AttendanceCalculationRule.FirstOrDefault(z => z.attendance_rule_id == Guid.Parse("00000000-0000-0000-0000-000000000005") && z.is_active == true);
                    z_AttendanceCalculationRule OtCutOffTimeRule = AttendanceCalculationRule.FirstOrDefault(z => z.attendance_rule_id == Guid.Parse("00000000-0000-0000-0000-000000000006") && z.is_active == true);
                    z_AttendanceCalculationRule SatadayCutOffRule = AttendanceCalculationRule.FirstOrDefault(z => z.attendance_rule_id == Guid.Parse("00000000-0000-0000-0000-000000000007") && z.is_active == true);
                    z_AttendanceCalculationRule check_NextDayBreakTime = AttendanceCalculationRule.FirstOrDefault(z => z.attendance_rule_id.ToString().Equals("00000000-0000-0000-0000-000000000009") && z.is_active == true);

                    bool ApprovedOtStatus = (bool)AttendanceCalculationRule.FirstOrDefault(z => z.attendance_rule_id == Guid.Parse("00000000-0000-0000-0000-000000000005")).is_active;
                    bool OverTime15MinCycle = (bool)AttendanceCalculationRule.FirstOrDefault(z => z.attendance_rule_id == Guid.Parse("00000000-0000-0000-0000-000000000003")).is_active;



                    TimeSpan OtCutOffTime = new TimeSpan(0, (int)OtCutOffTimeRule.value, 0);
                    TimeSpan SatadayCutOffTime = new TimeSpan(0, (int)SatadayCutOffRule.value, 0);

                    if (MorningRule != null)
                    {
                        cal_MorningOtbreakMinit = int.Parse(MorningRule.value.ToString());
                    }
                    else
                    {
                        cal_MorningOtbreakMinit = 0;
                    }
                    if (EveningRule != null)
                    {
                        cal_EveningOtbreakMinit = int.Parse(EveningRule.value.ToString());
                    }
                    else
                    {
                        cal_EveningOtbreakMinit = 0;
                    }

                    TimeSpan cal_ot_holidayWork = System.DateTime.MinValue.TimeOfDay;
                    dtl_AttendanceData cal_ot_startAttendancedata = new dtl_AttendanceData();
                    dtl_AttendanceData cal_ot_endAttendance = new dtl_AttendanceData();
                    cal_shiftCatagoryId = (Guid)employeeshift.shift_catagory_id;
                    cal_dayid = getDayOfWeek(i.DayOfWeek.ToString());
                    List<dtl_AttendanceData> cal_startAll = new List<dtl_AttendanceData>();
                    List<dtl_AttendanceData> cal_startAll_NextDay = new List<dtl_AttendanceData>();
                    List<dtl_AttendanceData> cal_BothDays = new List<dtl_AttendanceData>();
                    // DateTime temp_nextDayDate = cal_attendDate.AddDays(1);
                    dtl_Shift cal_temp_shift = Shift.FirstOrDefault(a => a.shift_category_id == cal_shiftCatagoryId);
                    dtl_Shift cal_inShift = Shift.FirstOrDefault(a => a.shift_in_day_id == cal_dayid && a.shift_category_id == cal_shiftCatagoryId);
                    //if (IsYestardayFullDay == true)
                    //{
                    if (cal_inShift != null)
                    {
                        cal_startAll = AttendanceData.Where(z => z.attend_date == cal_attendDate && z.emp_id == employee.emp_id.TrimStart('0') && z.attend_time > (cal_inShift.in_time - new TimeSpan(0, int.Parse(check_NextDayBreakTime.value.ToString()), 0))).ToList();
                    }
                    else
                    {

                        if (cal_temp_shift != null)
                        {
                            cal_startAll = AttendanceData.Where(z => z.attend_date == cal_attendDate && z.emp_id == employee.emp_id.TrimStart('0') && z.attend_time > (cal_temp_shift.in_time - new TimeSpan(0, int.Parse(check_NextDayBreakTime.value.ToString()), 0))).ToList();
                        }

                    }
                    if (Holidays != null)
                    {
                        CurrentHoliday = Holidays.FirstOrDefault(z => z.holiday_Date.Value.Date == i.Date);
                    }
                    if (CurrentHoliday != null)
                    {
                        bool cal_isResign = false;
                        //bool cal_isjoin = false;

                        if (employee.resign_date != null)
                        {
                            if (employee.resign_date.Value.Date < CurrentHoliday.holiday_Date)
                            {

                                cal_isResign = true;
                            }
                        }
                        if (employee.join_date != null)
                        {
                            if (employee.join_date.Value.Date > CurrentHoliday.holiday_Date)
                            {
                                cal_isResign = true;

                            }
                        }
                        if (cal_isResign == true)
                        {
                            cal_isFullDay = true;
                            cal_isNopay = true;
                            cal_isHoliday = false;
                            cal_isLeave = false;
                            cal_isAbsent = true;
                        }
                        else
                        {
                            cal_isHoliday = true;
                            cal_attendDate = i.Date;

                            if (cal_startAll.Count >= 2)
                            {
                                cal_ot_startAttendancedata = cal_startAll.OrderByDescending(z => z.attend_datetime.GetValueOrDefault(DateTime.MaxValue)).Last();
                                cal_ot_endAttendance = cal_startAll.OrderByDescending(z => z.attend_datetime.GetValueOrDefault(DateTime.MinValue)).First();

                                if (CurrentHoliday.isMercantileHoliday == true)
                                {
                                    if (checkIsInvalid((Guid)employeeshift.shift_catagory_id, i.DayOfWeek.ToString(), employee.emp_id, i.Date, cal_startAll))
                                    {
                                        isRecodeSaveInInvalidProcess = CheckInvalidAttendance(employeeshift, i.DayOfWeek.ToString(), employee.emp_id, i.Date, period.period_id, employee.employee_id, check_NextDayBreakTime);
                                        if (isRecodeSaveInInvalidProcess == false)
                                        {
                                            cal_isInvalid = true;

                                        }
                                    }
                                    else
                                    {
                                        if (i.DayOfWeek.ToString() == DayOfWeek.Sunday.ToString())
                                        {
                                            TimeSpan temp_intime = new TimeSpan(0, 0, 0);

                                            if (cal_ot_startAttendancedata.attend_time.Value <= new TimeSpan(8, 0, 0))
                                            {
                                                temp_intime = new TimeSpan(8, 0, 0);
                                            }
                                            else
                                            {
                                                temp_intime = cal_ot_startAttendancedata.attend_time.Value;
                                            }
                                            cal_attendDate = cal_ot_startAttendancedata.attend_date.Value.Date;
                                            cal_inTime = cal_ot_startAttendancedata.attend_time.Value;
                                            cal_outTime = cal_ot_endAttendance.attend_time.Value;
                                            cal_mecantile_work_time = cal_ot_endAttendance.attend_time.Value - temp_intime;
                                            cal_isMecantileWork = true;


                                        }
                                        else if (i.DayOfWeek.ToString() == DayOfWeek.Saturday.ToString())
                                        {

                                            cal_attendDate = cal_ot_startAttendancedata.attend_date.Value.Date;
                                            cal_inTime = cal_ot_startAttendancedata.attend_time.Value;
                                            cal_outTime = cal_ot_endAttendance.attend_time.Value;
                                            cal_mecantile_work_time = cal_ot_endAttendance.attend_time.Value - cal_ot_startAttendancedata.attend_time.Value;
                                            cal_isMecantileWork = true;

                                        }
                                        else
                                        {
                                            TimeSpan temp_intime = new TimeSpan(0, 0, 0);
                                            cal_attendDate = cal_ot_startAttendancedata.attend_date.Value.Date;
                                            cal_inTime = cal_ot_startAttendancedata.attend_time.Value;
                                            cal_outTime = cal_ot_endAttendance.attend_time.Value;
                                            cal_lateOutTime = cal_ot_endAttendance.attend_time.Value - temp_intime;
                                            cal_mecantile_work_time = cal_ot_endAttendance.attend_time.Value - cal_ot_startAttendancedata.attend_time.Value;
                                            cal_isMecantileWork = true;


                                        }
                                    }
                                }
                                else if (CurrentHoliday.isPoyaHoliday == true)
                                {
                                    if (checkIsInvalid((Guid)employeeshift.shift_catagory_id, i.DayOfWeek.ToString(), employee.emp_id, i.Date, cal_startAll))
                                    {
                                        isRecodeSaveInInvalidProcess = CheckInvalidAttendance(employeeshift, i.DayOfWeek.ToString(), employee.emp_id, i.Date, period.period_id, employee.employee_id, check_NextDayBreakTime);
                                        if (isRecodeSaveInInvalidProcess == false)
                                        {
                                            cal_isInvalid = true;

                                        }
                                    }
                                    else
                                    {

                                        cal_isFreeDay = true;
                                        cal_attendDate = cal_ot_startAttendancedata.attend_date.Value.Date;
                                        cal_inTime = cal_ot_startAttendancedata.attend_time.Value;
                                        cal_outTime = cal_ot_endAttendance.attend_time.Value;
                                        cal_poya_work_time = cal_ot_endAttendance.attend_time.Value - cal_ot_startAttendancedata.attend_time.Value;


                                    }
                                }
                            }
                        }
                    }// end of holiday
                    else
                    {
                        if (cal_startAll.Count == 0)
                        {
                            if (checkIsFreeday(i.Date.DayOfWeek.ToString(), (Guid)employeeshift.shift_catagory_id))
                            {

                                if (employee.resign_date != null)
                                {
                                    if (employee.resign_date.Value.Date < i.Date)
                                    {
                                        cal_isFullDay = true;
                                        cal_isNopay = true;
                                        cal_isHoliday = false;
                                        cal_isLeave = false;
                                        cal_isAbsent = true;
                                    }
                                    else
                                    {
                                        cal_isFreeDay = true;
                                    }
                                }
                                if (employee.join_date != null)
                                {
                                    if (employee.join_date.Value.Date > i.Date)
                                    {
                                        cal_isFullDay = true;
                                        cal_isNopay = true;
                                        cal_isHoliday = false;
                                        cal_isLeave = false;
                                        cal_isAbsent = true;

                                    }
                                    else
                                    {
                                        cal_isFreeDay = true;
                                    }
                                }
                            }
                            else
                            {
                                if (i.DayOfWeek.ToString() == DayOfWeek.Saturday.ToString())
                                {
                                    if (employee.resign_date != null)
                                    {
                                        if (employee.resign_date.Value.Date < i.Date)
                                        {
                                            cal_isFullDay = true;
                                            //cal_isNopay = true;
                                            cal_isHoliday = false;
                                            cal_isLeave = false;
                                            cal_isAbsent = true;
                                        }
                                        else
                                        {
                                            cal_isMorningHalfDay = true;
                                        }
                                    }
                                    if (employee.join_date != null)
                                    {
                                        if (employee.join_date.Value.Date > i.Date)
                                        {
                                            cal_isFullDay = true;
                                            // cal_isNopay = true;
                                            cal_isHoliday = false;
                                            cal_isLeave = false;
                                            cal_isAbsent = true;

                                        }
                                        else
                                        {
                                            cal_isMorningHalfDay = true;
                                        }
                                    }

                                    cal_isAbsent = true;
                                    //cal_isMorningHalfDay = true;

                                    if (CheckAuthorizeNopay(employee.employee_id, period.period_id, i.Date.Date.Date))
                                    {
                                        cal_isAuthorizeNopay = true;

                                    }

                                    else if (checkLeave(i.Date, employee.employee_id, HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyHalfDays)) == true)
                                    {
                                        cal_leave_detail_id = GetLeaveDetailID(i.Date, employee.employee_id, HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyHalfDays));
                                        cal_leave_type_id = HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyHalfDays);
                                        cal_isLeave = true;

                                        cal_isLeave = true;

                                    }
                                    else
                                    {
                                        cal_isNopay = true;

                                    }
                                }
                                else
                                {
                                    cal_isAbsent = true;
                                    cal_isFullDay = true;

                                    if (CheckAuthorizeNopay(employee.employee_id, period.period_id, i.Date.Date.Date))
                                    {
                                        cal_isAuthorizeNopay = true;

                                    }

                                    else if (checkLeave(i.Date, employee.employee_id, HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyFullLeaveDays)) == true)
                                    {
                                        cal_leave_detail_id = GetLeaveDetailID(i.Date, employee.employee_id, HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyFullLeaveDays));
                                        cal_leave_type_id = HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyFullLeaveDays);
                                        if (cal_leave_detail_id == HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyElectionLeave))
                                        {
                                            cal_isAbsent = false;
                                            cal_isFullDay = false;
                                            cal_isHoliday = true;
                                            cal_isNopay = false;
                                            cal_isLeave = false;
                                        }
                                        else
                                        {
                                            //cal_isLeave = true;

                                            cal_isLeave = true;
                                        }

                                    }


                                    else if (checkLeaveTwoHalfDay(i.Date, employee.employee_id, HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyHalfDays)) == true)
                                    {
                                        cal_leave_detail_id = GetLeaveDetailID(i.Date, employee.employee_id, HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyHalfDays));
                                        cal_leave_type_id = HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyHalfDays);
                                        cal_isLeave = true;
                                        cal_isEveningHalfDay = true;
                                        cal_isFullDay = false;
                                        // cal_isLeave = true;
                                    }
                                    else if (checkLeave(i.Date, employee.employee_id, HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyHalfDays)) == true)
                                    {
                                        cal_leave_detail_id = GetLeaveDetailID(i.Date, employee.employee_id, HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyHalfDays));
                                        cal_leave_type_id = HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyHalfDays);
                                        if (cal_leave_detail_id == HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyElectionLeave))
                                        {
                                            cal_isAbsent = true;
                                            cal_isEveningHalfDay = true;
                                            cal_isHoliday = false;
                                            cal_isNopay = true;
                                            cal_isLeave = false;
                                            cal_isFullDay = false;
                                        }

                                    }

                                    else
                                    {
                                        cal_isNopay = true;
                                    }
                                }

                            }
                        }
                        else
                        {
                            if (cal_inShift != null)
                            {
                                if (checkIsInvalid((Guid)employeeshift.shift_catagory_id, i.DayOfWeek.ToString(), employee.emp_id, i.Date, cal_startAll))
                                {

                                    isRecodeSaveInInvalidProcess = CheckInvalidAttendance(employeeshift, i.DayOfWeek.ToString(), employee.emp_id, i.Date, period.period_id, employee.employee_id, check_NextDayBreakTime);
                                    if (isRecodeSaveInInvalidProcess == false)
                                    {
                                        cal_isInvalid = true;
                                        dtl_AttendanceData ot_invalid_data = cal_startAll.OrderByDescending(z => z.attend_datetime.GetValueOrDefault(DateTime.MaxValue)).First();
                                        cal_inTime = ot_invalid_data.attend_time.Value;
                                        cal_outTime = ot_invalid_data.attend_time.Value;
                                    }
                                }
                                else
                                {
                                    cal_startAttendancedata = cal_startAll.OrderByDescending(z => z.attend_datetime.GetValueOrDefault(DateTime.MaxValue)).Last();
                                    cal_endAttendance = cal_startAll.OrderByDescending(z => z.attend_datetime.GetValueOrDefault(DateTime.MinValue)).First();
                                    if (cal_startAttendancedata != null && cal_endAttendance != null)
                                    {
                                        cal_dayid = getDayOfWeek(i.DayOfWeek.ToString());
                                        if (cal_dayid == Guid.Empty)
                                        {
                                            //  MessageBox.Show("Date Time String MissMatch");
                                        }
                                        else
                                        {
                                            if (Shift != null)
                                            {
                                                if (cal_inShift != null)
                                                {
                                                    #region normal Attendance Calculation (both in and out between normal shift)

                                                    if (cal_startAttendancedata.attend_time <= cal_inShift.in_time && cal_endAttendance.attend_time >= cal_inShift.out_time)
                                                    {
                                                        isNomalAttendanceCalculation = true;
                                                        cal_isNormalAttendance = true;

                                                        #region Normal Morning Attendance

                                                        if (cal_startAttendancedata.attend_time <= cal_inShift.shift_in_time)
                                                        {
                                                            cal_isInCutOff = true;
                                                            cal_earlyInTime = cal_inShift.in_time.Value - cal_inShift.shift_in_time.Value;
                                                            cal_actualOtInTime = cal_earlyInTime;

                                                            cal_earlyCutOffMinits = cal_inShift.shift_in_time.Value - cal_startAttendancedata.attend_time.Value;
                                                            cal_inTime = cal_startAttendancedata.attend_time.Value;
                                                            cal_inDateTime = cal_startAttendancedata.attend_datetime.Value;
                                                            cal_isMorningNomalAttendance = true;
                                                        }
                                                        else
                                                        {
                                                            cal_isEarlyIn = true;
                                                            cal_earlyInTime = cal_inShift.in_time.Value - cal_startAttendancedata.attend_time.Value;
                                                            cal_actualOtInTime = cal_earlyInTime;

                                                            cal_inTime = cal_startAttendancedata.attend_time.Value;
                                                            cal_inDateTime = cal_startAttendancedata.attend_datetime.Value;
                                                            cal_isMorningNomalAttendance = true;

                                                        }
                                                        #endregion

                                                        #region Normal Evining Attendance
                                                        if (cal_endAttendance.attend_time >= cal_inShift.shift_out_time)
                                                        {
                                                            cal_isOutCutOff = true;
                                                            cal_lateOutTime = cal_inShift.shift_out_time.Value - cal_inShift.out_time.Value;
                                                            cal_actualOtOutTime = cal_lateOutTime;

                                                            cal_EviningCutOffMinits = cal_endAttendance.attend_time.Value - cal_inShift.shift_out_time.Value;
                                                            cal_outTime = cal_endAttendance.attend_time.Value;
                                                            cal_OutDateTime = cal_endAttendance.attend_datetime.Value;
                                                            cal_isEviningNormalAttendance = true;
                                                        }
                                                        else if (cal_endAttendance.attend_time >= cal_inShift.out_time)
                                                        {
                                                            cal_isLateOut = true;
                                                            cal_lateOutTime = cal_endAttendance.attend_time.Value - cal_inShift.out_time.Value;
                                                            cal_actualOtOutTime = cal_lateOutTime;

                                                            cal_outTime = cal_endAttendance.attend_time.Value;
                                                            cal_OutDateTime = cal_endAttendance.attend_datetime.Value;
                                                            cal_isEviningNormalAttendance = true;
                                                        }

                                                        #endregion


                                                    }
                                                    #endregion

                                                    else
                                                    {
                                                        if (isNomalAttendanceCalculation == false)
                                                        {
                                                            #region Normal in and cut off attendance

                                                            if (cal_startAttendancedata.attend_time <= cal_inShift.shift_in_time)
                                                            {
                                                                cal_isInCutOff = true;
                                                                cal_earlyInTime = cal_inShift.in_time.Value - cal_inShift.shift_in_time.Value;
                                                                cal_actualOtInTime = cal_earlyInTime;

                                                                cal_earlyCutOffMinits = cal_inShift.shift_in_time.Value - cal_startAttendancedata.attend_time.Value;
                                                                cal_inTime = cal_startAttendancedata.attend_time.Value;
                                                                cal_inDateTime = cal_startAttendancedata.attend_datetime.Value;
                                                                cal_isMorningNomalAttendance = true;
                                                            }
                                                            #endregion

                                                            #region Normal in Attendance

                                                            else if (cal_startAttendancedata.attend_time <= cal_inShift.in_time)
                                                            {
                                                                if (cal_inShift.shift_in_time <= cal_startAttendancedata.attend_time && cal_startAttendancedata.attend_time <= cal_inShift.in_time)
                                                                {
                                                                    cal_isEarlyIn = true;
                                                                    cal_earlyInTime = cal_inShift.in_time.Value - cal_startAttendancedata.attend_time.Value;
                                                                    cal_actualOtInTime = cal_earlyInTime;

                                                                    cal_inTime = cal_startAttendancedata.attend_time.Value;
                                                                    cal_inDateTime = cal_startAttendancedata.attend_datetime.Value;
                                                                    cal_isMorningNomalAttendance = true;
                                                                }
                                                            }
                                                            #endregion

                                                            if (cal_inShift.in_time <= cal_startAttendancedata.attend_time)
                                                            {
                                                                #region calculate attendance if in time between grace time
                                                                if ((cal_startAttendancedata.attend_time - cal_inShift.grace_in) <= cal_inShift.in_time)
                                                                {
                                                                    cal_lateInTime = cal_startAttendancedata.attend_time.Value - cal_inShift.in_time.Value;
                                                                    //cal_isLateIn = true;
                                                                    cal_isMorningGraceAttend = true;
                                                                    cal_inTime = cal_startAttendancedata.attend_time.Value;
                                                                    cal_inDateTime = cal_startAttendancedata.attend_datetime.Value;
                                                                }
                                                                #endregion

                                                                #region calculate attendance with leave

                                                                else if (cal_inShift.in_time <= (cal_startAttendancedata.attend_time - cal_inShift.grace_in))
                                                                {
                                                                    TimeSpan shortLiveTime = new TimeSpan(0, 0, 0);
                                                                    TimeSpan halfDayTime = new TimeSpan(0, 0, 0);

                                                                    TimeSpan timeDiffrence = cal_inShift.out_time.Value - cal_inShift.in_time.Value;
                                                                    if (i.DayOfWeek.ToString() == "Saturday")
                                                                    {
                                                                        shortLiveTime = new TimeSpan(2, 30, 0);
                                                                        halfDayTime = new TimeSpan(12, 30, 0);
                                                                    }
                                                                    else
                                                                    {
                                                                        shortLiveTime = TimeSpan.FromTicks(timeDiffrence.Ticks / 4);
                                                                        halfDayTime = TimeSpan.FromTicks(timeDiffrence.Ticks / 2);
                                                                    }


                                                                    if (((cal_inShift.in_time + shortLiveTime)) < cal_startAttendancedata.attend_time.Value)
                                                                    {
                                                                        cal_isAbsent = true;
                                                                        cal_isMorningHalfDay = true;
                                                                        //cal_isLateIn = true;
                                                                        cal_inTime = cal_startAttendancedata.attend_time.Value;
                                                                        cal_inDateTime = cal_endAttendance.attend_datetime.Value;
                                                                        if (CheckAuthorizeNopay(employee.employee_id, period.period_id, i.Date.Date.Date))
                                                                        {
                                                                            cal_isAuthorizeNopay = true;
                                                                            cal_leave_type_id = HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyHalfDays);
                                                                        }

                                                                        else if (checkLeave(i.Date, employee.employee_id, HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyHalfDays)) == true)
                                                                        {
                                                                            cal_leave_detail_id = GetLeaveDetailID(i.Date, employee.employee_id, HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyHalfDays));
                                                                            cal_leave_type_id = HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyHalfDays);
                                                                            if (cal_leave_detail_id == HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyElectionLeave))
                                                                            {
                                                                                cal_isAbsent = false;
                                                                                cal_isMorningHalfDay = false;
                                                                                cal_isHoliday = true;
                                                                            }
                                                                            else
                                                                            {
                                                                                cal_isLeave = true;
                                                                            }

                                                                        }
                                                                        else
                                                                        {
                                                                            cal_isNopay = true;
                                                                            cal_leave_type_id = HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyHalfDays);
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        cal_isMorningShortDay = true;
                                                                        //cal_isLateIn = true;
                                                                        cal_inTime = cal_startAttendancedata.attend_time.Value;
                                                                        cal_inDateTime = cal_endAttendance.attend_datetime.Value;
                                                                        if (CheckAuthorizeNopay(employee.employee_id, period.period_id, i.Date.Date.Date))
                                                                        {
                                                                            cal_isAuthorizeNopay = true;
                                                                            cal_leave_type_id = HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyShortDays);
                                                                        }

                                                                        else if (checkLeave(i.Date, employee.employee_id, HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyShortDays)) == true)
                                                                        {
                                                                            cal_leave_detail_id = GetLeaveDetailID(i.Date, employee.employee_id, HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyShortDays));
                                                                            cal_leave_type_id = HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyShortDays);
                                                                            cal_isLeave = true;

                                                                        }
                                                                        else
                                                                        {
                                                                            cal_isNopay = true;
                                                                            cal_leave_type_id = HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyShortDays);
                                                                        }
                                                                    }


                                                                #endregion
                                                                }
                                                            }

                                                            #region out attendance is cut off
                                                            if (cal_endAttendance.attend_time >= cal_inShift.shift_out_time)
                                                            {
                                                                cal_isOutCutOff = true;
                                                                cal_lateOutTime = cal_inShift.shift_out_time.Value - cal_inShift.out_time.Value;
                                                                cal_actualOtOutTime = cal_lateOutTime;

                                                                cal_EviningCutOffMinits = cal_endAttendance.attend_time.Value - cal_inShift.shift_out_time.Value;
                                                                cal_outTime = cal_endAttendance.attend_time.Value;
                                                                cal_OutDateTime = cal_endAttendance.attend_datetime.Value;
                                                                cal_isEviningNormalAttendance = true;
                                                            }
                                                            #endregion

                                                            #region out attendance normal
                                                            else if (cal_endAttendance.attend_time >= cal_inShift.out_time)
                                                            {
                                                                cal_isLateOut = true;
                                                                cal_lateOutTime = cal_endAttendance.attend_time.Value - cal_inShift.out_time.Value;
                                                                cal_actualOtOutTime = cal_lateOutTime;

                                                                cal_outTime = cal_endAttendance.attend_time.Value;
                                                                cal_OutDateTime = cal_endAttendance.attend_datetime.Value;
                                                                cal_isEviningNormalAttendance = true;
                                                            }
                                                            #endregion

                                                            if (cal_endAttendance.attend_time <= cal_inShift.out_time)
                                                            {

                                                                if ((cal_endAttendance.attend_time + cal_inShift.grace_out) >= cal_inShift.out_time)
                                                                {
                                                                    cal_isAbsent = false;
                                                                    cal_earlyOutTime = cal_inShift.out_time.Value - cal_endAttendance.attend_time.Value;
                                                                    //cal_isEarlyOut = true;
                                                                    cal_isEviningGraceOut = true;
                                                                    cal_outTime = cal_endAttendance.attend_time.Value;
                                                                    cal_OutDateTime = cal_endAttendance.attend_datetime.Value;
                                                                }

                                                                else if ((cal_endAttendance.attend_time + cal_inShift.grace_out) <= cal_inShift.out_time)
                                                                {
                                                                    TimeSpan shortLiveTime = new TimeSpan(0, 0, 0);
                                                                    TimeSpan halfDayTime = new TimeSpan(0, 0, 0);
                                                                    TimeSpan timeDiffrence = cal_inShift.out_time.Value - cal_inShift.in_time.Value;

                                                                    if (i.DayOfWeek.ToString() == "Saturday")
                                                                    {
                                                                        shortLiveTime = new TimeSpan(2, 30, 0);
                                                                        halfDayTime = new TimeSpan(12, 30, 0);
                                                                    }
                                                                    else
                                                                    {
                                                                        shortLiveTime = TimeSpan.FromTicks(timeDiffrence.Ticks / 4);
                                                                        halfDayTime = TimeSpan.FromTicks(timeDiffrence.Ticks / 2);
                                                                    }

                                                                    if ((cal_inShift.out_time.Value - shortLiveTime) <= cal_endAttendance.attend_time.Value)
                                                                    {

                                                                        //cal_isEarlyOut = true;
                                                                        cal_isEveningShortDay = true;
                                                                        cal_outTime = cal_endAttendance.attend_time.Value;
                                                                        cal_OutDateTime = cal_endAttendance.attend_datetime.Value;
                                                                        if (CheckAuthorizeNopay(employee.employee_id, period.period_id, i.Date.Date.Date))
                                                                        {
                                                                            cal_isAuthorizeNopay = true;
                                                                            cal_leave_type_id = HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyShortDays);
                                                                        }

                                                                        else if (checkLeave(i.Date, employee.employee_id, HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyShortDays)) == true)
                                                                        {
                                                                            cal_leave_detail_id = GetLeaveDetailID(i.Date, employee.employee_id, HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyShortDays));
                                                                            cal_leave_type_id = HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyShortDays);
                                                                            cal_isLeave = true;

                                                                        }
                                                                        else
                                                                        {
                                                                            cal_isNopay = true;
                                                                            cal_leave_type_id = HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyShortDays);
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        //cal_isEarlyOut = true;
                                                                        cal_isAbsent = true;
                                                                        cal_isEveningHalfDay = true;
                                                                        cal_outTime = cal_endAttendance.attend_time.Value;
                                                                        cal_OutDateTime = cal_endAttendance.attend_datetime.Value;
                                                                        if (CheckAuthorizeNopay(employee.employee_id, period.period_id, i.Date.Date.Date))
                                                                        {
                                                                            cal_isAuthorizeNopay = true;
                                                                            cal_leave_type_id = HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyHalfDays);
                                                                        }

                                                                        else if (checkLeave(i.Date, employee.employee_id, HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyHalfDays)) == true)
                                                                        {
                                                                            cal_leave_detail_id = GetLeaveDetailID(i.Date, employee.employee_id, HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyHalfDays));
                                                                            cal_leave_type_id = HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyHalfDays);
                                                                            if (cal_leave_detail_id == HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyElectionLeave))
                                                                            {
                                                                                cal_isAbsent = false;
                                                                                cal_isEveningHalfDay = false;
                                                                                cal_isHoliday = true;
                                                                            }
                                                                            else
                                                                            {
                                                                                cal_isLeave = true;
                                                                            }

                                                                        }
                                                                        else
                                                                        {
                                                                            cal_isNopay = true;
                                                                            cal_leave_type_id = HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyHalfDays);
                                                                        }
                                                                    }

                                                                }
                                                            }

                                                        }
                                                    }

                                                }

                                            }
                                        }

                                    }
                                }
                            }
                            else
                            {
                                if (i.DayOfWeek.ToString() == "Sunday")
                                {

                                    if (cal_startAll.Count == 1)
                                    {
                                        if (checkIsInvalid((Guid)employeeshift.shift_catagory_id, i.DayOfWeek.ToString(), employee.emp_id, i.Date, cal_startAll))
                                        {
                                            isRecodeSaveInInvalidProcess = CheckInvalidAttendance(employeeshift, i.DayOfWeek.ToString(), employee.emp_id, i.Date, period.period_id, employee.employee_id, check_NextDayBreakTime);
                                            if (isRecodeSaveInInvalidProcess == false)
                                            {
                                                cal_isInvalid = true;
                                                dtl_AttendanceData ot_invalid_data = cal_startAll.OrderByDescending(z => z.attend_datetime.GetValueOrDefault(DateTime.MaxValue)).First();
                                                cal_inTime = ot_invalid_data.attend_time.Value;
                                                cal_outTime = ot_invalid_data.attend_time.Value;
                                            }
                                        }
                                    }
                                    else if (cal_startAll.Count >= 2)
                                    {

                                        cal_ot_startAttendancedata = cal_startAll.OrderByDescending(z => z.attend_datetime.GetValueOrDefault(DateTime.MaxValue)).Last();
                                        cal_ot_endAttendance = cal_startAll.OrderByDescending(z => z.attend_datetime.GetValueOrDefault(DateTime.MinValue)).First();

                                        // need invalid methord heare

                                        if (cal_ot_startAttendancedata != null && cal_ot_endAttendance != null && cal_ot_startAttendancedata.attend_time != System.DateTime.MinValue.TimeOfDay && cal_ot_endAttendance.attend_time != System.DateTime.MinValue.TimeOfDay && cal_ot_startAttendancedata.attend_time != null && cal_ot_endAttendance.attend_time != null)
                                        {

                                            cal_shiftCatagoryId = Guid.Empty;
                                            cal_inTime = cal_ot_startAttendancedata.attend_time.Value;
                                            cal_outTime = cal_ot_endAttendance.attend_time.Value;
                                            cal_attendDate = cal_ot_startAttendancedata.attend_date.Value.Date;
                                            TimeSpan temp_late_out = new TimeSpan(0, 0, 0);
                                            cal_ot_holidayWork = cal_ot_endAttendance.attend_time.Value - cal_ot_startAttendancedata.attend_time.Value;
                                            //cal_actualOtOutTime = cal_lateOutTime;

                                        }
                                    }


                                }
                                else if (i.DayOfWeek.ToString() == DayOfWeek.Saturday.ToString())
                                {
                                    if (cal_startAll.Count >= 2)
                                    {
                                        cal_ot_startAttendancedata = cal_startAll.OrderByDescending(z => z.attend_datetime.GetValueOrDefault(DateTime.MaxValue)).Last();
                                        cal_ot_endAttendance = cal_startAll.OrderByDescending(z => z.attend_datetime.GetValueOrDefault(DateTime.MinValue)).First();

                                        cal_shiftCatagoryId = Guid.Empty;
                                        cal_attendDate = cal_ot_startAttendancedata.attend_date.Value.Date;
                                        cal_inTime = cal_ot_startAttendancedata.attend_time.Value;
                                        cal_outTime = cal_ot_endAttendance.attend_time.Value;
                                        cal_ot_freeDayWork = cal_ot_endAttendance.attend_time.Value - cal_ot_startAttendancedata.attend_time.Value;
                                        cal_isFreedayWork = true;

                                    }
                                    //else
                                    //{
                                    // if employee is resign or joined before join date
                                    //}
                                }

                            }
                        }
                    }
                    trns_EmployeeAttendance attendance = new trns_EmployeeAttendance();
                    attendance.roster_header_id = 0;
                    attendance.employee_id = cal_employeeId;
                    attendance.period_id = cal_periodId;
                    attendance.attend_date = cal_attendDate;
                    attendance.additional_days_count = cal_additionalDays;
                    if (i.Date >= DateTime.Now.Date)
                    {
                        attendance.is_ficture = true;
                    }
                    else
                    {
                        attendance.is_ficture = cal_isfictureDay;
                    }
                    if (cal_inShift == null)
                    {
                        attendance.shift_catagory_id = Guid.Empty;
                    }
                    else
                    {
                        attendance.shift_catagory_id = cal_inShift.shift_category_id;
                    }
                    attendance.extra_ot_time = GetExtraOt(cal_employeeId, i.Date.Date);
                    attendance.cal_dayid = cal_dayid;
                    attendance.in_time = cal_inTime;
                    attendance.out_time = cal_outTime;
                    attendance.in_datetime = cal_inDateTime;
                    attendance.out_datetime = cal_OutDateTime;
                    attendance.early_in_time = cal_earlyInTime;
                    attendance.late_in_time = cal_lateInTime;
                    attendance.early_out_time = cal_earlyOutTime;
                    attendance.additional_days_count = 0;
                    attendance.late_out_time = cal_lateOutTime;
                    attendance.actual_ot_intime = cal_actualOtInTime;
                    attendance.actual_ot_outtime = cal_actualOtOutTime;
                    attendance.is_late_in = cal_isLateIn;
                    attendance.is_early_in = cal_isEarlyIn;
                    attendance.total_work_time = cal_earlyInTime.Add(cal_lateOutTime);
                    attendance.is_morning_gracein = cal_isMorningGraceAttend;
                    attendance.is_evening_graceout = cal_isEviningGraceOut;
                    attendance.is_late_out = cal_isLateOut;
                    attendance.is_early_out = cal_isEarlyOut;
                    attendance.is_in_cutoff = cal_isInCutOff;
                    attendance.is_out_cutoff = cal_isOutCutOff;
                    attendance.is_morning_short_day = cal_isMorningShortDay;
                    attendance.is_evining_short_day = cal_isEveningShortDay;
                    attendance.is_morning_halfday = cal_isMorningHalfDay;
                    attendance.is_evining_halfday = cal_isEveningHalfDay;
                    attendance.poya_ot = cal_poya_work_time;
                    attendance.grace_in_time = System.DateTime.MinValue.TimeOfDay;
                    attendance.grace_out_time = System.DateTime.MinValue.TimeOfDay;
                    attendance.is_leave = cal_isLeave;
                    attendance.is_holiday = cal_isHoliday;
                    attendance.is_absent = cal_isAbsent;
                    attendance.is_nopay = cal_isNopay;
                    attendance.is_normal_attendance = cal_isNormalAttendance;
                    attendance.is_free_day = cal_isFreeDay;
                    attendance.is_fullday = cal_isFullDay;
                    attendance.is_morning_normal_attendance = cal_isMorningNomalAttendance;
                    attendance.is_evining_normal_attendance = cal_isEviningNormalAttendance;
                    attendance.is_invalid = cal_isInvalid;
                    attendance.early_cutoff_minits = cal_earlyCutOffMinits;
                    attendance.evining_cutoff_minits = cal_EviningCutOffMinits;
                    attendance.isholiday_work = cal_isholidayWork;
                    attendance.isfreeday_work = cal_isFreedayWork;
                    attendance.normal_ot = cal_ot_freeDayWork;

                    attendance.double_ot = cal_ot_holidayWork;
                    attendance.is_Authorized_nopay = cal_isAuthorizeNopay;
                    attendance.ismercantile_holiday_work = cal_isMecantileWork;
                    attendance.triple_ot = cal_mecantile_work_time;
                    attendance.leave_detail_id = cal_leave_detail_id;
                    attendance.leave_type_id = cal_leave_type_id;
                    attendance.additional_days_count = cal_additionalDays;


                    if (attendance.early_in_time > new TimeSpan(0, 30, 0))
                    {
                        attendance.actual_ot_intime = new TimeSpan(attendance.early_in_time.Value.Hours, GetMinitsEarly(attendance.early_in_time.Value.Minutes), 0);
                    }
                    else
                    {
                        attendance.actual_ot_intime = new TimeSpan(0, 0, 0);
                    }

                    if (attendance.actual_ot_outtime > new TimeSpan(0, 30, 0))
                    {
                        attendance.actual_ot_outtime = new TimeSpan(attendance.actual_ot_outtime.Value.Hours, GetMinitsEarly(attendance.actual_ot_outtime.Value.Minutes), 0);
                    }
                    else
                    {
                        attendance.actual_ot_outtime = new TimeSpan(0, 0, 0);
                    }

                    if (attendance.is_morning_gracein == true && attendance.is_early_out == false)
                    {
                        if (attendance.late_in_time.Value <= attendance.late_out_time.Value)
                        {
                            if (attendance.actual_ot_outtime.Value >= new TimeSpan(0, 30, 0))
                            {
                                attendance.is_morning_gracein = false;
                                attendance.actual_ot_outtime = attendance.actual_ot_outtime.Value - new TimeSpan(0, 30, 0);
                                attendance.late_in_time = new TimeSpan(0, 0, 0);
                            }
                            else
                            {
                                cal_isMorningShortDay = true;
                                if (CheckAuthorizeNopay(employee.employee_id, period.period_id, i.Date.Date.Date))
                                {
                                    cal_isAuthorizeNopay = true;
                                    cal_leave_type_id = HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyShortDays);
                                }

                                else if (checkLeave(i.Date, employee.employee_id, HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyShortDays)) == true)
                                {
                                    cal_leave_detail_id = GetLeaveDetailID(i.Date, employee.employee_id, HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyShortDays));
                                    cal_leave_type_id = HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyShortDays);
                                    cal_isLeave = true;

                                }
                                else
                                {
                                    cal_isNopay = true;
                                    cal_leave_type_id = HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyShortDays);
                                }
                            }

                        }
                    }


                    if (isRecodeSaveInInvalidProcess == false)
                    {
                        //if (i.DayOfWeek == DayOfWeek.Sunday)
                        //{
                        //    attendance.actual_ot_outtime = new TimeSpan(0, 0, 0);
                        //    attendance.late_out_time = new TimeSpan(0, 0, 0);
                        //}
                        //else
                        //{

                        //}
                        EmployeeAttendance.Add(attendance);
                        //IsYestardayFullDay == true;

                    }




                }
            }
            catch (Exception ex)
            {

            }
        }
        #endregion




        public Guid GetLeaveDetailID(DateTime date, Guid employeeid, Guid leaveType)
        {
            if (LeavePool != null)
            {
                trns_LeavePool CurrentLeavePoolList = LeavePool.FirstOrDefault(z => z.leave_date == date && z.leave_type_id == leaveType && z.emp_id == employeeid && z.is_approved == true);
                if (CurrentLeavePoolList != null)
                {
                    return (Guid)CurrentLeavePoolList.leave_detail_id;
                }

            }
            return Guid.Empty;
        }

        public bool CheckNextdayMercantile(DateTime date)
        {
            DateTime privious_day = date.AddDays(-1);
            z_Holiday holiday = Holidays.FirstOrDefault(z => z.holiday_Date.Value.Date == privious_day);
            if (privious_day.DayOfWeek == DayOfWeek.Sunday)
            {
                return true;
            }

            if (holiday != null)
            {
                if (holiday.isMercantileHoliday == true)
                {
                    return true;
                }
                else if (holiday.isPoyaHoliday == true)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                return false;
            }

        }

        #region Get Day Of Week Methord
        public Guid getDayOfWeek(string dayOfWeek)
        {
            if (dayOfWeek == "Monday")
            {
                return HelperClass.clsDays.GetDay(HelperClass.dayname.Monday);

            }
            else if (dayOfWeek == "Tuesday")
            {
                return HelperClass.clsDays.GetDay(HelperClass.dayname.Tuesday);
            }
            else if (dayOfWeek == "Wednesday")
            {
                return HelperClass.clsDays.GetDay(HelperClass.dayname.Wednesday);
            }
            else if (dayOfWeek == "Thursday")
            {
                return HelperClass.clsDays.GetDay(HelperClass.dayname.Thursday);
            }
            else if (dayOfWeek == "Friday")
            {
                return HelperClass.clsDays.GetDay(HelperClass.dayname.Friday);
            }
            else if (dayOfWeek == "Saturday")
            {
                return HelperClass.clsDays.GetDay(HelperClass.dayname.Saturday);
            }
            else if (dayOfWeek == "Sunday")
            {
                return HelperClass.clsDays.GetDay(HelperClass.dayname.Sunday);
            }
            else
            {

                return Guid.Empty;

            }

        }
        #endregion

        #region Check Freeday Methord
        public bool checkIsFreeday(string day, Guid shiftCatagory)
        {
            Guid d_id = getDayOfWeek(day);
            if (Shift != null)
            {
                dtl_Shift cal_inShift = Shift.FirstOrDefault(a => a.shift_in_day_id == d_id && a.shift_category_id == shiftCatagory);
                if (cal_inShift == null)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }

            return true;
        }
        #endregion

        #region Check invalid days Methord
        public bool checkIsInvalid(Guid shiftCatagoryId, string day, string empId, DateTime attenddate, List<dtl_AttendanceData> list)
        {
            //List<dtl_AttendanceData> inv_allAttendance_emp = new List<dtl_AttendanceData>();
            // inv_allAttendance_emp = AttendanceData.Where(z => z.attend_date == attenddate && z.emp_id == empId.TrimStart('0')).ToList();
            dtl_AttendanceData cal_inv_startAttendancedata = new dtl_AttendanceData();
            dtl_AttendanceData cal_inv_endAttendance = new dtl_AttendanceData();
            Guid inv_day_id = getDayOfWeek(day);
            z_AttendanceCalculationRule check_NextDayBreakTime = AttendanceCalculationRule.FirstOrDefault(z => z.attendance_rule_id.ToString().Equals("00000000-0000-0000-0000-000000000009") && z.is_active == true);
            dtl_Shift cal_ot_inShift = Shift.FirstOrDefault(a => a.shift_in_day_id == inv_day_id && a.shift_category_id == shiftCatagoryId);

            List<dtl_AttendanceData> inv_allAttendance = new List<dtl_AttendanceData>();

            inv_allAttendance = list;

            if (inv_allAttendance.Count >= 2)
            {
                TimeSpan shortTimePeriod = new TimeSpan(1, 00, 00);
                cal_inv_startAttendancedata = inv_allAttendance.OrderByDescending(z => z.attend_datetime.GetValueOrDefault(DateTime.MaxValue)).Last();
                cal_inv_endAttendance = inv_allAttendance.OrderByDescending(z => z.attend_datetime.GetValueOrDefault(DateTime.MinValue)).First();
                if (cal_inv_startAttendancedata != null && cal_inv_endAttendance != null)
                {
                    TimeSpan attendancegap = cal_inv_endAttendance.attend_time.Value - cal_inv_startAttendancedata.attend_time.Value;
                    if (attendancegap >= shortTimePeriod)
                    {
                        return false;
                    }
                }
                else
                {
                    return true;
                }

            }
            return true;
        }
        #endregion

        public bool CheckInvalidAttendance(dtl_EmployeeAttendance shiftCatagory, string day, string empId, DateTime attenddate, Guid periodid, Guid employee, z_AttendanceCalculationRule check_NextDayBreakTime)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    Guid check_NormalShiftID = getDayOfWeek(day);
                    string check_empID = empId.TrimStart('0');
                    DateTime check_NextAttendDate = attenddate.AddDays(1);


                    dtl_Shift Check_inShift = Shift.FirstOrDefault(a => a.shift_in_day_id == check_NormalShiftID && a.shift_category_id == shiftCatagory.shift_catagory_id);
                    dtl_Shift Check_NextDayShift = Shift.FirstOrDefault(a => a.shift_in_day_id == getDayOfWeek(attenddate.AddDays(1).DayOfWeek.ToString()) && a.shift_category_id == shiftCatagory.shift_catagory_id);

                    if (Check_inShift == null && Check_NextDayShift == null)
                    {
                        dtl_Shift tempShift = Shift.FirstOrDefault(a => a.shift_category_id == shiftCatagory.shift_catagory_id);
                        Check_NextDayShift = Check_inShift = tempShift;
                    }
                    if (Check_NextDayShift == null)
                    {
                        Check_NextDayShift = Check_inShift = Shift.FirstOrDefault(a => a.shift_category_id == shiftCatagory.shift_catagory_id);
                    }
                    List<dtl_AttendanceData> check_nextDayAttendanceData = new List<dtl_AttendanceData>();
                    //List<dtl_AttendanceData> check_todayAttendanceList = new List<dtl_AttendanceData>();
                    z_AttendanceCalculationRule check_NextDayBreakTime_INv = AttendanceCalculationRule.FirstOrDefault(z => z.attendance_rule_id.ToString().Equals("00000000-0000-0000-0000-000000000009") && z.is_active == true);
                    //try
                    //{
                    //    check_todayAttendanceList = AttendanceData.Where(z => z.attend_date == attenddate && z.emp_id == empId.TrimStart('0') && z.attend_time > (Check_inShift.in_time - new TimeSpan(0, int.Parse(check_NextDayBreakTime.value.ToString()), 0))).ToList();
                    //}
                    //catch (Exception)
                    //{

                    //    check_todayAttendanceList = new List<dtl_AttendanceData>();
                    //}
                    List<dtl_AttendanceData> check_todayAttendanceList = context.dtl_AttendanceData.Where(z => z.attend_date == attenddate && z.emp_id == check_empID).ToList();
                    ERPEntities db = new ERPEntities();
                    List<dtl_AttendanceData> check_nextDayAttendanceDataAllList = db.dtl_AttendanceData.Where(z => z.attend_date == check_NextAttendDate && z.emp_id == check_empID).ToList();
                    TimeSpan check_breaktime = new TimeSpan(0, 0, 0);
                    if (check_NextDayBreakTime != null)
                    {
                        check_breaktime = new TimeSpan(0, int.Parse(check_NextDayBreakTime.value.ToString()), 0);
                    }
                    check_nextDayAttendanceData = check_nextDayAttendanceDataAllList.Where(x => x.attend_time < (Check_NextDayShift.in_time - check_breaktime)).ToList();
                    if (Check_inShift == null)
                    {
                        check_todayAttendanceList = check_todayAttendanceList.Where(z => z.attend_time > (Check_NextDayShift.in_time - check_breaktime)).ToList();
                    }
                    else
                    {
                        check_todayAttendanceList = check_todayAttendanceList.Where(z => z.attend_time > (Check_inShift.in_time - check_breaktime)).ToList();
                    }

                    if (check_todayAttendanceList.Count > 0 && check_nextDayAttendanceData.Count > 0)
                    {
                        dtl_AttendanceData check_startAttendance = check_todayAttendanceList.OrderByDescending(z => z.attend_datetime.GetValueOrDefault(DateTime.MaxValue)).Last();
                        dtl_AttendanceData check_EndAttendance = check_nextDayAttendanceDataAllList.OrderByDescending(z => z.attend_datetime.GetValueOrDefault(DateTime.MinValue)).Last();
                        DateTime check_inOutDatetime = attenddate.Date;
                        if (Check_inShift != null)
                        {
                            check_inOutDatetime = attenddate.Add(Check_inShift.out_time.Value);
                        }


                        if (check_startAttendance != null && check_EndAttendance != null)
                        {
                            trns_EmployeeAttendance attendance = new trns_EmployeeAttendance();
                            attendance.employee_id = employee;
                            attendance.period_id = periodid;
                            attendance.attend_date = attenddate;
                            attendance.in_time = check_startAttendance.attend_time.Value;
                            attendance.out_time = check_EndAttendance.attend_time.Value;
                            attendance.actual_ot_intime = new TimeSpan(0, 0, 0);
                            attendance.actual_ot_outtime = new TimeSpan(0, 0, 0);
                            if (Check_inShift == null)
                            {
                                attendance.shift_catagory_id = Guid.Empty;
                            }
                            else
                            {
                                attendance.shift_catagory_id = Check_inShift.shift_category_id;
                            }
                            attendance.roster_header_id = 0;
                            attendance.cal_dayid = check_NormalShiftID;
                            attendance.in_datetime = check_startAttendance.attend_datetime;
                            attendance.out_datetime = check_EndAttendance.attend_datetime;
                            //attendance.is_evening_graceout = false;
                            attendance.early_in_time = new TimeSpan(0, 0, 0);
                            attendance.late_in_time = new TimeSpan(0, 0, 0);
                            attendance.late_out_time = new TimeSpan(0, 0, 0);
                            attendance.early_out_time = new TimeSpan(0, 0, 0);
                            attendance.poya_ot = new TimeSpan(0, 0, 0);
                            attendance.is_late_in = false;
                            attendance.is_early_in = false;
                            attendance.total_work_time = new TimeSpan(0, 0, 0);
                            attendance.is_morning_gracein = false;
                            attendance.is_evening_graceout = false;
                            //attendance.grace_out_time = new TimeSpan(0, 0, 0);
                            attendance.normal_ot = new TimeSpan(0, 0, 0);
                            attendance.double_ot = new TimeSpan(0, 0, 0);
                            attendance.triple_ot = new TimeSpan(0, 0, 0);
                            attendance.is_late_out = false;
                            attendance.is_early_out = false;
                            attendance.is_in_cutoff = false;
                            attendance.is_out_cutoff = false;
                            attendance.double_ot = new TimeSpan(0, 0, 0);
                            attendance.is_morning_short_day = false;
                            attendance.is_evining_short_day = false;
                            attendance.is_morning_halfday = false;
                            attendance.is_evining_halfday = false;
                            attendance.is_absent = false;
                            attendance.is_leave = false;
                            attendance.is_nopay = false;
                            attendance.is_holiday = false;
                            attendance.is_normal_attendance = false;
                            attendance.is_morning_normal_attendance = false;
                            attendance.is_evining_normal_attendance = false;
                            attendance.is_invalid = false;
                            attendance.early_cutoff_minits = new TimeSpan(0, 0, 0);
                            attendance.evining_cutoff_minits = new TimeSpan(0, 0, 0);
                            attendance.is_holiday = false;
                            attendance.is_free_day = false;
                            attendance.ismercantile_holiday_work = false;
                            attendance.is_ficture = false;
                            attendance.grace_out_time = new TimeSpan(0, 0, 0);
                            attendance.additional_days_count = 0;
                            IsYestardayFullDay = true;


                            if (Check_inShift == null)
                            {
                                attendance.actual_ot_outtime = attendance.out_datetime - attendance.in_datetime;

                                if (attendance.actual_ot_outtime > new TimeSpan(8, 30, 0))
                                {
                                    attendance.normal_ot = new TimeSpan(8, 30, 0);
                                    attendance.double_ot = attendance.actual_ot_outtime - new TimeSpan(8, 30, 0);
                                    attendance.late_out_time = new TimeSpan(0, 0, 0);
                                    attendance.actual_ot_outtime = new TimeSpan(0, 0, 0);

                                }
                                else
                                {
                                    attendance.normal_ot = attendance.out_datetime - attendance.in_datetime;
                                    attendance.late_out_time = new TimeSpan(0, 0, 0);
                                    attendance.actual_ot_outtime = new TimeSpan(0, 0, 0);

                                }

                            }
                            else
                            {

                                if (check_startAttendance.attend_time.Value < Check_inShift.in_time)
                                {
                                    attendance.early_in_time = Check_inShift.in_time - check_startAttendance.attend_time.Value;
                                    attendance.actual_ot_intime = Check_inShift.in_time - check_startAttendance.attend_time.Value;
                                    attendance.is_early_in = true;
                                }
                                else
                                {
                                    attendance.early_in_time = new TimeSpan(0, 0, 0);
                                    attendance.actual_ot_intime = new TimeSpan(0, 0, 0);
                                }
                                if (check_startAttendance.attend_time.Value > Check_inShift.in_time)
                                {
                                    TimeSpan timeDiffrence = Check_inShift.out_time.Value - Check_inShift.in_time.Value;
                                    TimeSpan shortLiveTime = TimeSpan.FromTicks(timeDiffrence.Ticks / 4);
                                    TimeSpan halfDayTime = TimeSpan.FromTicks(timeDiffrence.Ticks / 2);


                                    if (check_startAttendance.attend_time.Value < (Check_inShift.in_time + Check_inShift.grace_in))
                                    {
                                        attendance.is_morning_gracein = true;
                                        attendance.grace_in_time = (Check_inShift.in_time + Check_inShift.grace_in) - check_startAttendance.attend_time.Value;

                                    }
                                    else if (check_startAttendance.attend_time.Value < Check_inShift.in_time + shortLiveTime)
                                    {
                                        attendance.is_morning_short_day = true;

                                        if (checkLeave(attenddate, employee, HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyShortDays)) == true)
                                        {

                                            attendance.is_leave = true;

                                        }
                                        else
                                        {
                                            attendance.is_nopay = true;
                                        }

                                        // attendance.late_in_time = check_startAttendance.attend_time.Value - Check_inShift.in_time;
                                        //attendance.is_late_in = true;
                                    }
                                    else if (check_startAttendance.attend_time.Value < Check_inShift.in_time + halfDayTime)
                                    {
                                        attendance.is_morning_halfday = true;
                                        if (checkLeave(attenddate, employee, HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyHalfDays)) == true)
                                        {

                                            attendance.is_leave = true;

                                        }
                                        else
                                        {
                                            attendance.is_nopay = true;
                                        }
                                    }
                                }
                                else
                                {
                                    attendance.late_in_time = new TimeSpan(0, 0, 0);
                                }
                                if (check_EndAttendance.attend_datetime > check_inOutDatetime)
                                {
                                    z_Holiday next_day_holidy_status = context.z_Holiday.FirstOrDefault(z => z.holiday_Date == check_EndAttendance.attend_date);
                                    if (next_day_holidy_status != null)
                                    {
                                        if (next_day_holidy_status.isMercantileHoliday == true)
                                        {
                                            TimeSpan temp_time = (TimeSpan)(check_EndAttendance.attend_datetime - check_inOutDatetime);
                                            attendance.late_out_time = new TimeSpan(24, 0, 0) - check_inOutDatetime.TimeOfDay;
                                            attendance.actual_ot_outtime = attendance.late_out_time;
                                            attendance.double_ot = temp_time - attendance.late_out_time;
                                            attendance.isholiday_work = true;
                                            attendance.is_late_out = true;
                                        }
                                        else if (next_day_holidy_status.isPoyaHoliday == true)
                                        {
                                            TimeSpan temp_time = (TimeSpan)(check_EndAttendance.attend_datetime - check_inOutDatetime);
                                            attendance.late_out_time = new TimeSpan(24, 0, 0) - check_inOutDatetime.TimeOfDay;
                                            attendance.actual_ot_outtime = attendance.late_out_time;
                                            attendance.poya_ot = temp_time - attendance.late_out_time;

                                            attendance.isholiday_work = true;
                                            attendance.is_late_out = true;

                                        }
                                        // next day holiday 
                                    }
                                    else if (check_NextAttendDate.DayOfWeek.ToString() == "Sunday")
                                    {
                                        TimeSpan temp_time = (TimeSpan)(check_EndAttendance.attend_datetime - check_inOutDatetime);
                                        attendance.late_out_time = new TimeSpan(24, 0, 0) - check_inOutDatetime.TimeOfDay;
                                        attendance.actual_ot_outtime = attendance.late_out_time;
                                        attendance.double_ot = temp_time - attendance.late_out_time;
                                        attendance.isholiday_work = true;
                                        attendance.is_late_out = true;


                                    }
                                    else
                                    {
                                        attendance.is_late_out = true;
                                        attendance.late_out_time = (check_EndAttendance.attend_datetime - check_inOutDatetime);
                                        attendance.actual_ot_outtime = attendance.late_out_time;


                                    }
                                }
                                else
                                {
                                    attendance.late_out_time = new TimeSpan(0, 0, 0);
                                    attendance.is_late_out = false;
                                }
                            }
                            if (attendance.actual_ot_intime > new TimeSpan(0, 30, 0))
                            {
                                attendance.actual_ot_intime = new TimeSpan(attendance.actual_ot_intime.Value.Hours, GetMinitsEarly(attendance.actual_ot_intime.Value.Minutes), 0);
                            }
                            else
                            {
                                attendance.actual_ot_intime = new TimeSpan(0, 0, 0);
                            }

                            if (attendance.actual_ot_outtime > new TimeSpan(0, 30, 0))
                            {
                                attendance.actual_ot_outtime = new TimeSpan(attendance.actual_ot_outtime.Value.Hours, GetMinitsEarly(attendance.actual_ot_outtime.Value.Minutes), 0);
                            }
                            else
                            {
                                attendance.actual_ot_outtime = new TimeSpan(0, 0, 0);
                            }

                            context.trns_EmployeeAttendance.AddObject(attendance);
                            context.SaveChanges();
                            return true;


                        }
                        else
                        {
                            return false;
                        }


                    }
                    else
                    {
                        return false;
                    }


                }
            }
            catch (Exception)
            {

                return false;
            }
        }

        public bool CheckAuthorizeNopay(Guid empid, Guid periodid, DateTime attenddate)
        {

            trns_AuthorizedNoPays currentNoPay = AuthorizedNopay.FirstOrDefault(z => z.employee_id == empid && z.nopay_date.Date == attenddate);
            if (currentNoPay != null)
            {
                return true;
            }
            else
            {
                return false;
            }

        }

        public TimeSpan GetExtraOt(Guid empid, DateTime attenddate)
        {
            trns_ExtraOt extraot = ExtraOverTime.FirstOrDefault(z => z.employee_id == empid && z.ot_date.Date == attenddate);
            if (extraot != null)
            {
                return TimeSpan.Parse(extraot.extra_ot_time.ToString());
            }
            else
            {
                return new TimeSpan(0, 0, 0);
            }

        }

        #region Check Leave Methord
        public bool checkLeave(DateTime date, Guid employeeid, Guid leaveType)
        {
            if (LeavePool != null)
            {
                trns_LeavePool CurrentLeavePoolList = LeavePool.FirstOrDefault(z => z.leave_date == date && z.leave_type_id == leaveType && z.emp_id == employeeid);
                if (CurrentLeavePoolList != null)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            return false;
        }

        public bool checkLeaveTwoHalfDay(DateTime date, Guid employeeid, Guid leaveType_01)
        {
            if (LeavePool != null)
            {
                List<trns_LeavePool> CurrentLeavePoolList = LeavePool.Where(z => z.leave_date == date && z.leave_type_id == leaveType_01 && z.emp_id == employeeid && z.is_approved == true).ToList();
                if (CurrentLeavePoolList.Count >= 2)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                return false;
            }
        }

        #endregion

        #region Attendance Process Properties

        private IEnumerable<trns_ExtraOt> _ExtraOverTime;
        public IEnumerable<trns_ExtraOt> ExtraOverTime
        {
            get { return _ExtraOverTime; }
            set { _ExtraOverTime = value; }
        }

        private trns_ExtraOt _CurrentExtraOverTime;
        public trns_ExtraOt CurrentExtraOverTime
        {
            get { return _CurrentExtraOverTime; }
            set { _CurrentExtraOverTime = value; }
        }


        private IEnumerable<dtl_EmployeeAttendance> _DetailEmployeeShift;
        public IEnumerable<dtl_EmployeeAttendance> DetailEmployeeShift
        {
            get { return _DetailEmployeeShift; }
            set { _DetailEmployeeShift = value; }
        }

        private IEnumerable<z_AttendanceCalculationRule> _AttendanceCalculationRule;
        public IEnumerable<z_AttendanceCalculationRule> AttendanceCalculationRule
        {
            get { return _AttendanceCalculationRule; }
            set { _AttendanceCalculationRule = value; }
        }


        private dtl_EmployeeAttendance _CurrentDetailEmployeeShift;
        public dtl_EmployeeAttendance CurrentDetailEmployeeShift
        {
            get { return _CurrentDetailEmployeeShift; }
            set { _CurrentDetailEmployeeShift = value; }
        }

        private IEnumerable<dtl_AttendanceData> _AttendanceData;
        public IEnumerable<dtl_AttendanceData> AttendanceData
        {
            get { return _AttendanceData; }
            set { _AttendanceData = value; }
        }

        private IEnumerable<dtl_Shift> _Shift;
        public IEnumerable<dtl_Shift> Shift
        {
            get { return _Shift; }
            set { _Shift = value; }
        }

        private IEnumerable<z_Holiday> _Holidays;
        public IEnumerable<z_Holiday> Holidays
        {
            get { return _Holidays; }
            set { _Holidays = value; }
        }

        private z_Holiday _CurrentHoliday;
        public z_Holiday CurrentHoliday
        {
            get { return _CurrentHoliday; }
            set { _CurrentHoliday = value; }
        }

        private IEnumerable<trns_LeavePool> _LeavePool;
        public IEnumerable<trns_LeavePool> LeavePool
        {
            get { return _LeavePool; }
            set { _LeavePool = value; }
        }
        private IEnumerable<z_LeaveType> _LeaveType;
        public IEnumerable<z_LeaveType> LeaveType
        {
            get { return _LeaveType; }
            set { _LeaveType = value; }
        }

        private IEnumerable<z_AttendanceCalculationRule> _AttendanceCalculationRules;
        public IEnumerable<z_AttendanceCalculationRule> AttendanceCalculationRules
        {
            get { return _AttendanceCalculationRules; }
            set { _AttendanceCalculationRules = value; }
        }
        private IEnumerable<trns_AuthorizedNoPays> _AuthorizedNopay;
        public IEnumerable<trns_AuthorizedNoPays> AuthorizedNopay
        {
            get { return _AuthorizedNopay; }
            set { _AuthorizedNopay = value; }
        }
        private trns_AuthorizedNoPays _CurrentAuthorizedNopay;
        public trns_AuthorizedNoPays CurrentAuthorizedNopay
        {
            get { return _CurrentAuthorizedNopay; }
            set { _CurrentAuthorizedNopay = value; }
        }




        List<trns_EmployeeAttendance> EmployeeAttendance = new List<trns_EmployeeAttendance>();
        //List<trns_AttendanceSumarry> sumarry = new List<trns_AttendanceSumarry>();
        #endregion


        [OperationContract]
        private bool CheckAttendanceProcessIsExist(Guid periodId)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    trns_EmployeeAttendance emp_attendance = context.trns_EmployeeAttendance.First(t => t.period_id == periodId);
                    if (emp_attendance != null)
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }
        }


        #region Attendance Download

        public static List<dtl_AttendanceData> listStatic_dtl_AttendanceData = new List<dtl_AttendanceData>();
        [OperationContract]
        public bool StartSaveAttendanceData()
        {
            listStatic_dtl_AttendanceData.Clear();
            return true;
        }

        [OperationContract]
        public bool AddSaveAttendanceItem(List<dtl_AttendanceData> Data)
        {
            try
            {
                foreach (var item in Data)
                {
                    listStatic_dtl_AttendanceData.Add(item);
                }
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool CommitSaveAttendanceData()
        {
            bool b = false;

            using (var context = new ERPEntities())
            {
                if (listStatic_dtl_AttendanceData.Count() != 0)
                {
                    foreach (dtl_AttendanceData per_item in listStatic_dtl_AttendanceData)
                    {
                        context.dtl_AttendanceData.AddObject(per_item);
                    }
                    return validateSaveUpdate(context.SaveChanges());
                    listStatic_dtl_AttendanceData.Clear();
                }
            }
            return b;
        }

        #endregion


        [OperationContract]
        public IEnumerable<dtl_AttendanceData> GetEmployeeAttendanceDataForTodayAttendance(DateTime Date)
        {
            ERPEntities context = new ERPEntities();
            var result = context.GetAttendanceDataForTodayAttendance(Date).ToList();
            result.ForEach(g => context.Detach(g));
            return result;

        }
        [OperationContract]
        public IEnumerable<trns_DailyAttendanceProcess> GetDailyAttendanceProcess()
        {
            using (var context = new ERPEntities())
            {
                var result = context.trns_DailyAttendanceProcess.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public bool SaveEmployeeDailyAttendance(IEnumerable<trns_DailyAttendanceProcess> DalyAttendance)
        {
            DeleteDailyProcessData();
            try
            {
                using (var context = new ERPEntities())
                {
                    foreach (trns_DailyAttendanceProcess ot_item in DalyAttendance)
                    {
                        context.trns_DailyAttendanceProcess.AddObject(ot_item);
                    }
                    return validateSaveUpdate(context.SaveChanges());

                }
            }
            catch (Exception)
            {
                return false;
            }
        }
        [OperationContract]
        public bool DeleteDailyProcessData()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    return validateSaveUpdate(context.DeleteDailyProcess());
                }
            }
            catch (Exception)
            {

                return false;
            }
        }

        [OperationContract]
        public IEnumerable<AttendanceManual_view> GetAttendanceDataForManualAttendance(string fromdate, string empid)
        {
            using (var context = new ERPEntities())
            {
                var result = context.GetAttendanceDataForManualAttendance(fromdate, empid).ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public bool DeleteEmployeeAttendanceForManualAttendanceUpload(string date, string empId)
        {
            if (date != null && empId != null)
            {
                try
                {
                    using (var context = new ERPEntities())
                    {
                        return validateSaveUpdate(context.DeleteManualAttendanceForUpdate(date, empId));
                    }
                }
                catch (Exception)
                {

                    return false;
                }
            }
            else
            {
                return false;
            }
        }
        [OperationContract]
        public bool SaveEmployeeDailyAttendanceManualData(IEnumerable<dtl_AttendanceData> data)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    foreach (dtl_AttendanceData ot_item in data)
                    {
                        context.dtl_AttendanceData.AddObject(ot_item);
                    }
                    return validateSaveUpdate(context.SaveChanges());

                }
            }
            catch (Exception)
            {
                return false;
            }
        }
        [OperationContract]
        public bool GenarateAttendanceSumarryCall(Guid periodID)
        {
            if (periodID != null && periodID != Guid.Empty)
            {
                try
                {
                    using (var context = new ERPEntities())
                    {
                        return validateSaveUpdate(context.GenarateAttendanceSumarryCall(periodID.ToString()));
                    }
                }
                catch (Exception)
                {

                    return false;
                }
            }
            else
            {
                return false;
            }
        }

        [OperationContract]
        public bool GenaratePayrollReoprt(Guid periodID)
        {
            if (periodID != null && periodID != Guid.Empty)
            {
                try
                {
                    using (var context = new ERPEntities())
                    {
                        context.CommandTimeout = 0;
                        context.InsertPayrollDataCall(periodID.ToString());
                        context.InsertBasicSalaryTOPayrollSumarry(periodID.ToString());
                        context.InsertBenifitTOPayrollSumarry(periodID.ToString());
                        context.InsertDeductionTOPayrollSumarry(periodID.ToString());
                        return validateSaveUpdate(context.InsertCompanyRuleTOPayrollSumarry(periodID.ToString()));
                    }
                }
                catch (Exception)
                {

                    return false;
                }
            }
            else
            {
                return false;
            }
        }

        #region Royal Institute Allowance Process

        #region mas_Allowance Operations
        [OperationContract]
        public IEnumerable<mas_Allowance> GetAllowanceTypes()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.mas_Allowance.Where(c => c.is_active == false).OrderBy(c => c.allowance_name).ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }
        #endregion

        #region dtl_EmployeeAllowance
        [OperationContract]
        public IEnumerable<EmployeeAllowanceView> GetEmployeeAllowances()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.EmployeeAllowanceViews.Where(c => c.is_delete == false).ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public bool SaveEmployeeAllowance(dtl_EmployeeAllowance addedAllowance)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (context.dtl_EmployeeAllowance.Count(c => c.allowance_id == addedAllowance.allowance_id && c.employee_id == addedAllowance.employee_id) == 0)
                    {
                        addedAllowance.is_delete = false;
                        context.dtl_EmployeeAllowance.AddObject(addedAllowance);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                    return false;
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool UpdateEmployeeAllowance(dtl_EmployeeAllowance updatedAllowance)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    dtl_EmployeeAllowance currentAllowance = context.dtl_EmployeeAllowance.FirstOrDefault(c => c.employee_id == updatedAllowance.employee_id && c.allowance_id == updatedAllowance.allowance_id);
                    currentAllowance.amount = updatedAllowance.amount;
                    currentAllowance.modified_datetime = updatedAllowance.modified_datetime;
                    currentAllowance.modified_user_id = updatedAllowance.modified_user_id;
                    currentAllowance.is_active = updatedAllowance.is_active;

                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool DeleteEmployeeAllowance(dtl_EmployeeAllowance deletedAllowance)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    dtl_EmployeeAllowance currentAllowance = context.dtl_EmployeeAllowance.FirstOrDefault(c => c.employee_id == deletedAllowance.employee_id && c.allowance_id == deletedAllowance.allowance_id);
                    currentAllowance.is_delete = true;
                    currentAllowance.delete_datetime = deletedAllowance.delete_datetime;
                    currentAllowance.delete_user_id = deletedAllowance.delete_user_id;
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }
        #endregion

        #region trn_EmployeeMonthlyAllowance

        [OperationContract]
        public IEnumerable<trn_EmployeeMonthlyAllowance> GetMonthlyAllowances()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.trn_EmployeeMonthlyAllowance.ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public bool SaveAllowanceTransactions(List<trn_EmployeeMonthlyAllowance> processedTrans)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (processedTrans != null)
                    {
                        int x = 0;
                        foreach (trn_EmployeeMonthlyAllowance tran in processedTrans)
                        {
                            if (context.trn_EmployeeMonthlyAllowance.Count(c => c.period_id == tran.period_id && c.employee_id == tran.employee_id && c.allowance_id == tran.allowance_id) == 0)
                            {
                                context.trn_EmployeeMonthlyAllowance.AddObject(tran);
                                x++;
                            }
                        }
                        return context.SaveChanges() == x;
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }

            return false;
        }

        #region Allowance Period
        [OperationContract]
        public IEnumerable<z_Period> GetAllowancePeriod()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.z_Period.Where(c => c.isdelete == false).OrderByDescending(c => c.end_date).ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }
        #endregion
        #endregion

        #region Employee Search
        [OperationContract]
        public IEnumerable<EmployeeSearchView> GetEmloyeeSearch()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.EmployeeSearchViews.Where(c => c.isdelete == false && c.isActive == true).ToList();
                    result.ForEach(p => context.Detach(p));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public IEnumerable<EmployeeSearchView> GetFilteredEmployeeSearch(List<Guid> selectedEmpList)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.EmployeeSearchViews.Where(c => c.isActive == true && c.isdelete == false && selectedEmpList.Contains(c.employee_id)).ToList();
                    result.ForEach(p => context.Detach(p));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        IEnumerable<EmployeeSearchView> GetEmployeeSearchByUserEmployee(Guid userEmployeeID)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    List<Guid> assignedEmployeeIDList = context.dtl_EmployeeSupervisor.Where(c => c.supervisor_employee_id == userEmployeeID).Select(c => c.employee_id).ToList();
                    if (assignedEmployeeIDList != null && assignedEmployeeIDList.Count > 0)
                    {
                        var result = context.EmployeeSearchViews.Where(c => assignedEmployeeIDList.Contains(c.employee_id)).ToList();
                        result.ForEach(c => context.Detach(c));
                        return result;
                    }
                }
            }
            catch (Exception)
            {
            }

            return new List<EmployeeSearchView>();
        }

        #endregion

        #region Database Views Operations

        [OperationContract]
        public IEnumerable<MonthlyAllowanceTransactionView> GetLastPaid()
        {
            return null;
        }

        [OperationContract]
        public IEnumerable<MonthlyAllowanceTransactionView> GetEmployeeCurrentAllowances()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.MonthlyAllowanceTransactionViews.ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        #endregion

        #endregion

        [OperationContract]
        public IEnumerable<trns_EmployeeAttendanceSumarry> GetEmployeePayrollSumarryForPeriod(Guid periodID)
        {
            using (var context = new ERPEntities())
            {
                var result = context.GetEmployeePayrollData(periodID.ToString()).ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }
        [OperationContract]
        public IEnumerable<z_AttendanceAllowance> GetEmployeeAttendanceAllowanceDetail()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_AttendanceAllowance.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }
        [OperationContract]
        private bool saveQuantityFromAttendance(IEnumerable<trns_EmployeePeriodQunatity> quntity, Guid periodid)
        {
            try
            {
                using (var context = new ERPEntities())
                {


                    foreach (trns_EmployeePeriodQunatity qty in quntity)
                    {
                        trns_EmployeePeriodQunatity up = context.trns_EmployeePeriodQunatity.FirstOrDefault(t => t.rule_id == qty.rule_id && t.period_id == periodid && t.employee_id == qty.employee_id);

                        if (up != null)
                        {
                            up.quantity = qty.quantity;
                            context.SaveChanges();
                        }
                    }

                }

                return true;


            }
            catch (Exception)
            {
                return false;
            }
        }
        private IEnumerable<trns_EmployeePeriodQunatity> _PeriodQuntity;
        public IEnumerable<trns_EmployeePeriodQunatity> PeriodQuntity
        {
            get { return _PeriodQuntity; }
            set { _PeriodQuntity = value; }
        }
        private trns_EmployeePeriodQunatity _CurrentPeriodQuntity;
        public trns_EmployeePeriodQunatity CurrentPeriodQuntity
        {
            get { return _CurrentPeriodQuntity; }
            set { _CurrentPeriodQuntity = value; }
        }

        public int GetMinitsEarly(int minit)
        {
            int totalMinit = 0;
            if (minit >= 0 && minit < 15)
            {
                totalMinit = 0;
            }
            else if (minit >= 15 && minit < 30)
            {
                totalMinit = 15;
            }
            else if (minit >= 30 && minit < 45)
            {
                totalMinit = 30;
            }
            else if (minit >= 45 && minit < 60)
            {
                totalMinit = 45;
            }

            return totalMinit;
        }

        public int GetMinitsEvening(int minit)
        {
            int totalMinit = 0;
            if (minit >= 0 && minit < 15)
            {
                totalMinit = 0;
            }
            if (minit >= 15 && minit < 30)
            {
                totalMinit = 15;
            }
            else if (minit >= 30 && minit < 45)
            {
                totalMinit = 30;
            }
            else if (minit >= 45 && minit < 60)
            {
                totalMinit = 45;
            }

            return totalMinit;
        }

        #region Deepal's Roster Operations

        #region Roster Calculation
        [OperationContract]
        public bool RosterProcess(List<EmployeeSumarryView> selectedEmployees, z_Period period)
        {
            List<trns_EmployeeAttendance> listTRNS = new List<trns_EmployeeAttendance>();
            try
            {
                using (var context = new ERPEntities())
                {
                    #region Geting Data
                    List<ROSTER_ROSTERATTENDANCEDATA_PROC_Result> listAttendance = new List<ROSTER_ROSTERATTENDANCEDATA_PROC_Result>();
                    List<ROSTER_HOLIDAYS_PROC_Result> listHolidays = new List<ROSTER_HOLIDAYS_PROC_Result>();
                    List<ROSTER_ROSTEREMPLOYEES_PROC_Result> listRosters = new List<ROSTER_ROSTEREMPLOYEES_PROC_Result>();
                    List<trns_LeavePool> listLeavePool = new List<trns_LeavePool>();
                    List<trns_AuthorizedNoPays> listAuthorizeNopay = new List<trns_AuthorizedNoPays>();

                    listAttendance = context.ROSTER_ROSTERATTENDANCEDATA_PROC(period.start_date.Value.Date, period.end_date.Value.Date).ToList();
                    listHolidays = context.ROSTER_HOLIDAYS_PROC(period.start_date.Value.Date, period.end_date.Value.Date).ToList();
                    listRosters = context.ROSTER_ROSTEREMPLOYEES_PROC(period.start_date.Value.Date, period.end_date.Value.Date).ToList();
                    LeaveType = GetAllLeaveTypes();
                    listLeavePool = GetLeavePoolFromDate(period.start_date.Value.Date, period.end_date.Value.Date).ToList();
                    #endregion

                    #region Fields
                    List<ROSTER_ROSTEREMPLOYEES_PROC_Result> listEmployeeRosters = new List<ROSTER_ROSTEREMPLOYEES_PROC_Result>();
                    List<ROSTER_ROSTERATTENDANCEDATA_PROC_Result> listEmployeeAttendance = new List<ROSTER_ROSTERATTENDANCEDATA_PROC_Result>();
                    List<ROSTER_ROSTERATTENDANCEDATA_PROC_Result> NonRosterslistAttendance = new List<ROSTER_ROSTERATTENDANCEDATA_PROC_Result>();
                    DateTime? Roster_OnTime = new DateTime();
                    DateTime? Roster_OffTime = new DateTime();
                    DateTime? Roster_InTime = new DateTime();
                    DateTime? Roster_OutTime = new DateTime();
                    ROSTER_ROSTERATTENDANCEDATA_PROC_Result attendanceInTime = new ROSTER_ROSTERATTENDANCEDATA_PROC_Result();
                    ROSTER_ROSTERATTENDANCEDATA_PROC_Result attendanceOutTime = new ROSTER_ROSTERATTENDANCEDATA_PROC_Result();
                    List<trns_EmployeeAttendance> listTrnAttendance = new List<trns_EmployeeAttendance>();
                    trns_EmployeeAttendance TranAttendance;

                    z_RosterCalculationRules evening_halfday = GetRosterCalculationRules().FirstOrDefault(c => c.rule_name == "evening_halfday");
                    z_RosterCalculationRules morning_halfday = GetRosterCalculationRules().FirstOrDefault(c => c.rule_name == "morning_halfday");
                    z_RosterCalculationRules morning_shortlive = GetRosterCalculationRules().FirstOrDefault(c => c.rule_name == "morning_shortlive");
                    z_RosterCalculationRules evening_shortlive = GetRosterCalculationRules().FirstOrDefault(c => c.rule_name == "evening_shortlive");
                    z_RosterCalculationRules max_ot_time = GetRosterCalculationRules().FirstOrDefault(c => c.rule_name == "max_ot_time");
                    #endregion

                    foreach (var EmpItem in selectedEmployees)
                    {

                        if (listRosters.Count(c => c.employee_id == EmpItem.employee_id) != 0) // Check Employee is Roster Employee
                        {
                            listEmployeeRosters.Clear();
                            listEmployeeRosters = listRosters.Where(c => c.employee_id == EmpItem.employee_id).ToList();// Filter Rosters of the Employee

                            NonRosterslistAttendance = listAttendance.Where(c => c.employee_id == EmpItem.employee_id).Except(listAttendance.Where(c => listEmployeeRosters.Any(d => d.roster_calender_date == c.attend_date))).ToList();

                            foreach (var item in NonRosterslistAttendance.GroupBy(c => c.attend_date).Select(grp => grp.First()))
                            {
                                // listEmployeeAttendance.Clear();
                                //listEmployeeAttendance = listAttendance.Where(c => c.employee_id == EmpItem.employee_id && c.attend_datetime >= Roster_OnTime).ToList();// Filter Attendance of the Employee for Roster (Taking In Times)


                                TranAttendance = new trns_EmployeeAttendance();
                                TranAttendance.employee_id = EmpItem.employee_id;
                                TranAttendance.period_id = period.period_id;
                                TranAttendance.attend_date = (DateTime)item.attend_date;
                                TranAttendance.roster_header_id = 000;
                                TranAttendance.shift_catagory_id = Guid.Empty;
                                TranAttendance.leave_detail_id = Guid.Empty;

                                #region Set Default Values to Boolean Fields

                                TranAttendance.is_absent =
                                TranAttendance.is_invalid =
                                TranAttendance.is_leave =
                                TranAttendance.is_normal_attendance =
                                TranAttendance.isholiday_work =
                                TranAttendance.isfreeday_work =
                                TranAttendance.is_ficture =
                                TranAttendance.is_nopay =
                                TranAttendance.ismercantile_holiday_work =
                                TranAttendance.is_morning_gracein =
                                TranAttendance.is_morning_normal_attendance =
                                TranAttendance.is_morning_halfday =
                                TranAttendance.is_morning_short_day =
                                TranAttendance.is_evining_normal_attendance =
                                TranAttendance.is_evening_graceout =
                                TranAttendance.is_evining_halfday =
                                TranAttendance.is_evining_short_day =
                                TranAttendance.is_out_cutoff =
                                TranAttendance.is_in_cutoff =
                                TranAttendance.is_late_out =
                                TranAttendance.is_late_in =
                                TranAttendance.is_early_in =
                                TranAttendance.is_early_out =
                                TranAttendance.is_fullday =
                                TranAttendance.is_free_day =
                                TranAttendance.is_holiday = false;
                                TranAttendance.is_nopay = false;
                                TranAttendance.is_Authorized_nopay = false;
                                TranAttendance.cal_dayid = Guid.Empty;
                                TranAttendance.extra_ot_time = new TimeSpan(0, 0, 0);
                                TranAttendance.leave_detail_id = Guid.Empty;
                                TranAttendance.leave_type_id = Guid.Empty;
                                // 
                                #endregion

                                #region Set Default Values to TimeSpan Variables
                                //
                                TranAttendance.poya_ot = new TimeSpan();
                                TranAttendance.additional_days_count = 0;
                                TranAttendance.early_in_time =
                                TranAttendance.early_out_time =
                                TranAttendance.late_in_time =
                                TranAttendance.late_out_time =
                                TranAttendance.actual_ot_intime =
                                TranAttendance.actual_ot_outtime =
                                TranAttendance.early_cutoff_minits =
                                TranAttendance.early_in_time =
                                TranAttendance.early_out_time =
                                TranAttendance.evining_cutoff_minits =
                                TranAttendance.normal_ot =
                                TranAttendance.double_ot =
                                TranAttendance.total_work_time =
                                TranAttendance.triple_ot =
                                TranAttendance.grace_in_time =
                                TranAttendance.grace_out_time =
                                TranAttendance.in_time =
                                TranAttendance.out_time =
                                new TimeSpan(0, 0, 0);
                                //
                                #endregion

                                if (NonRosterslistAttendance.Count() >= 2 && NonRosterslistAttendance.Count(c => c.attend_datetime.Value.Date == item.attend_datetime.Value.Date) > 0)
                                {
                                    TranAttendance.is_normal_attendance = true;
                                    attendanceInTime = NonRosterslistAttendance.OrderBy(c => c.attend_datetime).FirstOrDefault(c => c.attend_date == item.attend_datetime.Value.Date);
                                    attendanceOutTime = NonRosterslistAttendance.OrderByDescending(c => c.attend_datetime).FirstOrDefault(c => c.attend_date == item.attend_datetime.Value.Date);
                                    TranAttendance.in_datetime = attendanceInTime.attend_datetime;
                                    TranAttendance.in_time = new TimeSpan(attendanceInTime.attend_datetime.Value.Hour, attendanceInTime.attend_datetime.Value.Minute, attendanceInTime.attend_datetime.Value.Second);
                                    TranAttendance.out_datetime = attendanceOutTime.attend_datetime;
                                    TranAttendance.out_time = new TimeSpan(attendanceOutTime.attend_datetime.Value.Hour, attendanceOutTime.attend_datetime.Value.Minute, attendanceOutTime.attend_datetime.Value.Second);
                                    TranAttendance.attend_date = attendanceInTime.attend_date.Value;
                                    TranAttendance.total_work_time = attendanceOutTime.attend_datetime.Value.Subtract(attendanceInTime.attend_datetime.Value);

                                    #region Holiday / Mercantile holidays (Sunday)
                                    if (listHolidays.Count(c => c.holiday_Date == TranAttendance.attend_date) != 0)// Holiday
                                    {
                                        if (listHolidays.Count(c => c.holiday_Date == TranAttendance.attend_date && c.isMercantileHoliday == true) != 0)
                                        {
                                            TranAttendance.triple_ot = TranAttendance.total_work_time;
                                            TranAttendance.ismercantile_holiday_work = true;
                                            TranAttendance.is_holiday = true;
                                        }
                                        else
                                        {
                                            // TranAttendance.is_holiday = true;
                                            TranAttendance.triple_ot = TranAttendance.total_work_time;
                                            TranAttendance.isfreeday_work = true;
                                        }
                                    }
                                    else if (TranAttendance.attend_date.DayOfWeek == DayOfWeek.Sunday)// Mercantile holidays (Sunday)
                                    {
                                        TranAttendance.ismercantile_holiday_work = true;
                                        TranAttendance.triple_ot = TranAttendance.total_work_time;
                                    }
                                    #endregion


                                    trns_ExtraOt extraot = new trns_ExtraOt();
                                    extraot = context.trns_ExtraOt.FirstOrDefault(a => a.employee_id == TranAttendance.employee_id && a.ot_date == TranAttendance.attend_date.Date);
                                    if (extraot != null)
                                    {
                                        TranAttendance.extra_ot_time = extraot.extra_ot_time.Value;
                                    }
                                    if (TranAttendance.is_holiday == true || TranAttendance.ismercantile_holiday_work == true)// Day is Holiday || Mercantile Holiday (Sunday)
                                    {

                                        TranAttendance.triple_ot = attendanceOutTime.attend_datetime.Value.Subtract(attendanceInTime.attend_datetime.Value);
                                        TranAttendance.is_morning_halfday = false;
                                        TranAttendance.is_evining_halfday = false;
                                        TranAttendance.is_nopay = false;
                                        TranAttendance.is_leave = false;
                                        TranAttendance.is_fullday = false;
                                        TranAttendance.is_late_in = false;
                                        TranAttendance.is_late_out = false;
                                        TranAttendance.is_early_in = false;
                                        TranAttendance.is_late_in = false;
                                        TranAttendance.early_out_time = new TimeSpan(0, 0, 0);
                                        TranAttendance.late_in_time = new TimeSpan(0, 0, 0);
                                        TranAttendance.late_out_time = new TimeSpan(0, 0, 0);
                                        TranAttendance.early_in_time = new TimeSpan(0, 0, 0);
                                        //TranAttendance.is_late_in = TranAttendance.is_late_out = TranAttendance.is_early_in = TranAttendance.is_early_out = false;
                                        //TranAttendance.late_in_time = TranAttendance.late_out_time = TranAttendance.early_in_time = TranAttendance.early_out_time = TranAttendance.grace_in_time = TranAttendance.grace_out_time = new TimeSpan(0, 0, 0);
                                    }
                                    if (TranAttendance.is_evining_halfday == true)
                                        TranAttendance.early_out_time = new TimeSpan(0, 0, 0);
                                    if (TranAttendance.is_morning_halfday == true)
                                        TranAttendance.late_in_time = new TimeSpan(0, 0, 0);
                                    if (TranAttendance.is_morning_short_day == true)
                                        TranAttendance.late_in_time = new TimeSpan(0, 0, 0);
                                    if (TranAttendance.is_evining_short_day == true)
                                        TranAttendance.early_out_time = new TimeSpan(0, 0, 0);
                                }


                                context.trns_EmployeeAttendance.AddObject(TranAttendance);
                                listTRNS.Add(TranAttendance);

                            }



                            foreach (var RosterItem in listEmployeeRosters) // Loop Rosters for Current Employee
                            {

                                TranAttendance = new trns_EmployeeAttendance();
                                TranAttendance.employee_id = EmpItem.employee_id;
                                TranAttendance.period_id = period.period_id;
                                TranAttendance.roster_header_id = (int)RosterItem.roster_header_id;
                                TranAttendance.shift_catagory_id = Guid.Empty;
                                TranAttendance.leave_detail_id = Guid.Empty;

                                #region Set Default Values to Boolean Fields
                                //
                                TranAttendance.is_absent =
                                    TranAttendance.is_invalid =
                                    TranAttendance.is_leave =
                                    TranAttendance.is_normal_attendance =
                                    TranAttendance.isholiday_work =
                                    TranAttendance.isfreeday_work =
                                    TranAttendance.is_ficture =
                                    TranAttendance.is_nopay =
                                    TranAttendance.ismercantile_holiday_work =
                                    TranAttendance.is_morning_gracein =
                                    TranAttendance.is_morning_normal_attendance =
                                    TranAttendance.is_morning_halfday =
                                    TranAttendance.is_morning_short_day =
                                    TranAttendance.is_evining_normal_attendance =
                                    TranAttendance.is_evening_graceout =
                                    TranAttendance.is_evining_halfday =
                                    TranAttendance.is_evining_short_day =
                                    TranAttendance.is_out_cutoff =
                                    TranAttendance.is_in_cutoff =
                                    TranAttendance.is_late_out =
                                    TranAttendance.is_late_in =
                                    TranAttendance.is_early_in =
                                    TranAttendance.is_early_out =
                                    TranAttendance.is_fullday =
                                    TranAttendance.is_free_day =
                                    TranAttendance.is_holiday = false;
                                TranAttendance.is_nopay = false;
                                TranAttendance.is_Authorized_nopay = false;
                                TranAttendance.cal_dayid = Guid.Empty;
                                TranAttendance.extra_ot_time = new TimeSpan(0, 0, 0);
                                TranAttendance.leave_detail_id = Guid.Empty;
                                TranAttendance.leave_type_id = Guid.Empty;
                                // 
                                #endregion

                                #region Set Default Values to TimeSpan Variables
                                //
                                TranAttendance.early_in_time =
                                    TranAttendance.early_out_time =
                                    TranAttendance.late_in_time =
                                    TranAttendance.late_out_time =
                                    TranAttendance.actual_ot_intime =
                                    TranAttendance.actual_ot_outtime =
                                    TranAttendance.early_cutoff_minits =
                                    TranAttendance.early_in_time =
                                    TranAttendance.early_out_time =
                                    TranAttendance.evining_cutoff_minits =
                                    TranAttendance.normal_ot =
                                    TranAttendance.double_ot =
                                    TranAttendance.total_work_time =
                                    TranAttendance.triple_ot =
                                    TranAttendance.grace_in_time =
                                    TranAttendance.grace_out_time =
                                    TranAttendance.in_time =
                                    TranAttendance.out_time =
                                    new TimeSpan(0, 0, 0);
                                //
                                #endregion

                                #region Set Roster On Time / Off Time / In Time / Out Time
                                // Set Roster On Time / Off Time / In Time / Out Time
                                Roster_OnTime = RosterItem.roster_calender_date.Value.AddSeconds((RosterItem.roster_on_time.Value).TotalSeconds);
                                Roster_OffTime = RosterItem.roster_calender_end_date.Value.AddSeconds((RosterItem.roster_off_time.Value).TotalSeconds);
                                Roster_InTime = RosterItem.roster_calender_date.Value.AddDays(RosterItem.InDay_Value.Value);
                                Roster_InTime = Roster_InTime.Value.AddSeconds((RosterItem.in_time.Value).TotalSeconds);
                                Roster_OutTime = RosterItem.roster_calender_date.Value.AddDays(RosterItem.OutDay_Value.Value);
                                Roster_OutTime = Roster_OutTime.Value.AddSeconds((RosterItem.out_time.Value).TotalSeconds);
                                #endregion

                                listEmployeeAttendance.Clear();
                                listEmployeeAttendance = listAttendance.Where(c => c.employee_id == EmpItem.employee_id && c.attend_datetime >= Roster_OnTime).ToList();// Filter Attendance of the Employee for Roster (Taking In Times)
                                listEmployeeAttendance = listEmployeeAttendance.Where(c => c.attend_datetime <= Roster_OffTime).ToList();// Filter Attendance of the Employee for Roster (Taking Out Times)

                                if (listEmployeeAttendance.Count() >= 2)
                                {
                                    attendanceInTime = listEmployeeAttendance.OrderBy(c => c.attend_datetime).FirstOrDefault();
                                    attendanceOutTime = listEmployeeAttendance.OrderByDescending(c => c.attend_datetime).FirstOrDefault();
                                    TranAttendance.in_datetime = attendanceInTime.attend_datetime;
                                    TranAttendance.in_time = new TimeSpan(attendanceInTime.attend_datetime.Value.Hour, attendanceInTime.attend_datetime.Value.Minute, attendanceInTime.attend_datetime.Value.Second);
                                    TranAttendance.out_datetime = attendanceOutTime.attend_datetime;
                                    TranAttendance.out_time = new TimeSpan(attendanceOutTime.attend_datetime.Value.Hour, attendanceOutTime.attend_datetime.Value.Minute, attendanceOutTime.attend_datetime.Value.Second);
                                    TranAttendance.attend_date = attendanceInTime.attend_date.Value;
                                    TranAttendance.total_work_time = attendanceOutTime.attend_datetime.Value.Subtract(attendanceInTime.attend_datetime.Value);

                                    #region Holiday / Mercantile holidays (Sunday)
                                    if (listHolidays.Count(c => c.holiday_Date == TranAttendance.attend_date) != 0)// Holiday
                                    {
                                        if (listHolidays.Count(c => c.holiday_Date == TranAttendance.attend_date && c.isMercantileHoliday == true) != 0)
                                        {
                                            TranAttendance.triple_ot = TranAttendance.total_work_time;
                                            TranAttendance.ismercantile_holiday_work = true;
                                            TranAttendance.is_holiday = true;
                                        }
                                        else
                                        {
                                            // TranAttendance.is_holiday = true;
                                            TranAttendance.triple_ot = TranAttendance.total_work_time;
                                            TranAttendance.isfreeday_work = true;
                                        }
                                    }
                                    else if (TranAttendance.attend_date.DayOfWeek == DayOfWeek.Sunday)// Mercantile holidays (Sunday)
                                    {
                                        TranAttendance.ismercantile_holiday_work = true;
                                        TranAttendance.triple_ot = TranAttendance.total_work_time;
                                    }
                                    #endregion

                                    if (attendanceInTime.attend_datetime > Roster_InTime.Value.AddSeconds(RosterItem.grace_in.Value.TotalSeconds)) // Late In
                                    {
                                        TranAttendance.late_in_time = attendanceInTime.attend_datetime.Value.Subtract(Roster_InTime.Value);
                                        TranAttendance.is_late_in = true;
                                        TimeSpan RosterDuration = Roster_OutTime.Value.Subtract(Roster_InTime.Value);
                                        TimeSpan ShortDay = TimeSpan.FromTicks(RosterDuration.Ticks / 4);
                                        TimeSpan HaifDay = TimeSpan.FromTicks(RosterDuration.Ticks / 2); TranAttendance.is_late_in = true;
                                        if (attendanceInTime.attend_datetime <= Roster_InTime.Value.Add(ShortDay))// Morning short Day
                                        //Condition was changed from >= to <= 2015-06-30
                                        {
                                            TranAttendance.is_morning_short_day = true;
                                            trns_AuthorizedNoPays authorizenopay = new trns_AuthorizedNoPays();
                                            authorizenopay = context.trns_AuthorizedNoPays.FirstOrDefault(z => z.employee_id == TranAttendance.employee_id && EntityFunctions.TruncateTime(z.nopay_date) == EntityFunctions.TruncateTime(Roster_OnTime));
                                            if (listLeavePool.Count(c => c.is_approved == true && c.leave_date == TranAttendance.attend_date && c.emp_id == TranAttendance.employee_id && c.leave_type_id == HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyShortDays)) != 0)
                                            {
                                                // TranAttendance.is_absent = true;
                                                trns_LeavePool currentLeaveaDetail = listLeavePool.First(c => c.is_approved == true && c.leave_date == TranAttendance.attend_date && c.emp_id == TranAttendance.employee_id && c.leave_type_id == HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyShortDays));
                                                TranAttendance.is_leave = true;
                                                TranAttendance.leave_detail_id = currentLeaveaDetail.leave_detail_id;
                                                TranAttendance.leave_type_id = HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyShortDays);
                                            }
                                            else if (authorizenopay != null)
                                            {
                                                TranAttendance.is_Authorized_nopay = true;
                                            }
                                            else
                                            {
                                                TranAttendance.is_nopay = true;
                                            }
                                        }
                                        else if (attendanceInTime.attend_datetime <= Roster_InTime.Value.Add(HaifDay))// Morning Half Day
                                        //Condition was changed from >= to <= 2015-06-30
                                        {
                                            TranAttendance.is_morning_halfday = true;
                                            //TranAttendance.is_morning_short_day = false;
                                            trns_AuthorizedNoPays authorizenopay = new trns_AuthorizedNoPays();
                                            authorizenopay = context.trns_AuthorizedNoPays.FirstOrDefault(z => z.employee_id == TranAttendance.employee_id && EntityFunctions.TruncateTime(z.nopay_date) == EntityFunctions.TruncateTime(Roster_OnTime));
                                            if (listLeavePool.Count(c => c.is_approved == true && c.leave_date == TranAttendance.attend_date && c.emp_id == TranAttendance.employee_id && c.leave_type_id == HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyHalfDays)) != 0)
                                            {
                                                //TranAttendance.is_absent = true;
                                                TranAttendance.is_leave = true;
                                                trns_LeavePool currentLeaveaDetail = listLeavePool.First(c => c.is_approved == true && c.leave_date == TranAttendance.attend_date && c.emp_id == TranAttendance.employee_id && c.leave_type_id == HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyHalfDays));
                                                TranAttendance.is_leave = true;
                                                TranAttendance.leave_detail_id = currentLeaveaDetail.leave_detail_id;
                                                TranAttendance.leave_type_id = HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyHalfDays);
                                            }
                                            else if (authorizenopay != null)
                                            {
                                                TranAttendance.is_Authorized_nopay = true;
                                            }
                                            else
                                            {
                                                TranAttendance.is_nopay = true;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        TranAttendance.is_morning_normal_attendance = true;

                                        if (attendanceInTime.attend_datetime > Roster_InTime.Value)// Grace In
                                        {
                                            TranAttendance.grace_in_time = attendanceInTime.attend_datetime.Value.Subtract(Roster_InTime.Value);
                                            TranAttendance.is_morning_gracein = true;
                                        }
                                        else // Early In
                                        {
                                            TranAttendance.is_early_in = true;
                                            TranAttendance.early_in_time = Roster_InTime.Value.Subtract(attendanceInTime.attend_datetime.Value);
                                            if (TranAttendance.early_in_time > new TimeSpan(0, 15, 0))
                                            {
                                                TranAttendance.actual_ot_intime = new TimeSpan(TranAttendance.early_in_time.Value.Hours, GetMinitsEarly(TranAttendance.early_in_time.Value.Minutes), 0);
                                            }
                                            else
                                            {
                                                TranAttendance.early_in_time = new TimeSpan(0, 0, 0);
                                            }

                                        }
                                    }

                                    if (attendanceOutTime.attend_datetime < Roster_OutTime.Value.Subtract(RosterItem.grace_out.Value)) // Early Out
                                    {
                                        TranAttendance.early_out_time = Roster_OutTime.Value.Subtract(attendanceOutTime.attend_datetime.Value);
                                        TranAttendance.is_early_out = true;
                                        TimeSpan RosterDuration = Roster_OutTime.Value.Subtract(Roster_InTime.Value);
                                        TimeSpan ShortDay = TimeSpan.FromTicks(RosterDuration.Ticks / 4);
                                        TimeSpan HaifDay = TimeSpan.FromTicks(RosterDuration.Ticks / 2);

                                        if (attendanceOutTime.attend_datetime >= Roster_OutTime.Value.Subtract(ShortDay))//Evening short Day
                                        //Condition was changed from <= to >=  2015-06-30
                                        {
                                            TranAttendance.is_evining_short_day = true;
                                            trns_AuthorizedNoPays authorizenopay = new trns_AuthorizedNoPays();
                                            authorizenopay = context.trns_AuthorizedNoPays.FirstOrDefault(z => z.employee_id == TranAttendance.employee_id && EntityFunctions.TruncateTime(z.nopay_date) == EntityFunctions.TruncateTime(Roster_OnTime));
                                            if (listLeavePool.Count(c => c.is_approved == true && c.leave_date == TranAttendance.attend_date && c.emp_id == TranAttendance.employee_id && c.leave_type_id == HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyShortDays)) != 0)
                                            {
                                                // TranAttendance.is_absent = true;
                                                TranAttendance.is_leave = true;
                                                trns_LeavePool currentLeaveaDetail = listLeavePool.First(c => c.is_approved == true && c.leave_date == TranAttendance.attend_date && c.emp_id == TranAttendance.employee_id && c.leave_type_id == HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyShortDays));
                                                TranAttendance.is_leave = true;
                                                TranAttendance.leave_detail_id = currentLeaveaDetail.leave_detail_id;
                                                TranAttendance.leave_type_id = HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyShortDays);
                                            }
                                            else if (authorizenopay != null)
                                            {
                                                TranAttendance.is_Authorized_nopay = true;
                                            }
                                            else
                                            {
                                                TranAttendance.is_nopay = true;
                                            }
                                            // TranAttendance.is_evining_halfday = true;
                                        }
                                        else if (attendanceOutTime.attend_datetime >= Roster_OutTime.Value.Subtract(HaifDay))//Evening Half Day
                                        //Condition was changed from <= to >=  2015-06-30
                                        {
                                            trns_AuthorizedNoPays authorizenopay = new trns_AuthorizedNoPays();
                                            authorizenopay = context.trns_AuthorizedNoPays.FirstOrDefault(z => z.employee_id == TranAttendance.employee_id && EntityFunctions.TruncateTime(z.nopay_date) == EntityFunctions.TruncateTime(Roster_OnTime));
                                            if (listLeavePool.Count(c => c.is_approved == true && c.leave_date == TranAttendance.attend_date && c.emp_id == TranAttendance.employee_id && c.leave_type_id == HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyHalfDays)) != 0)
                                            {
                                                //TranAttendance.is_absent = true;
                                                TranAttendance.is_leave = true;
                                                TranAttendance.is_evining_halfday = true;
                                                // TranAttendance.is_evining_short_day = false;
                                                trns_LeavePool currentLeaveaDetail = listLeavePool.First(c => c.is_approved == true && c.leave_date == TranAttendance.attend_date && c.emp_id == TranAttendance.employee_id && c.leave_type_id == HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyHalfDays));
                                                TranAttendance.is_leave = true;
                                                TranAttendance.leave_detail_id = currentLeaveaDetail.leave_detail_id;
                                                TranAttendance.leave_type_id = HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyHalfDays);

                                            }
                                            else if (authorizenopay != null)
                                            {
                                                TranAttendance.is_Authorized_nopay = true;
                                            }
                                            else
                                            {
                                                TranAttendance.is_nopay = true;
                                            }
                                            TranAttendance.is_evining_halfday = true;
                                        }

                                        else
                                        {
                                            TranAttendance.is_fullday = true;
                                            TranAttendance.is_absent = false;
                                            TranAttendance.is_leave = true;
                                            if (listLeavePool.Count(c => c.is_approved == true && c.leave_date == TranAttendance.attend_date && c.emp_id == TranAttendance.employee_id && c.leave_type_id == Guid.Parse("877a1ea2-af78-4544-8d95-5c37991e60c6")) != 0)
                                            {
                                                TranAttendance.is_leave = true;
                                                trns_LeavePool currentLeaveaDetail = listLeavePool.First(c => c.is_approved == true && c.leave_date == TranAttendance.attend_date && c.emp_id == TranAttendance.employee_id && c.leave_type_id == HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyFullLeaveDays));
                                                TranAttendance.leave_detail_id = currentLeaveaDetail.leave_detail_id;
                                                TranAttendance.leave_type_id = HelperClass.clsLeave.GetLeaveOption(HelperClass.leaveoption.MonthlyFullLeaveDays);
                                            }
                                        }

                                    }
                                    else
                                    {
                                        TranAttendance.is_evining_normal_attendance = true;
                                        if (attendanceOutTime.attend_datetime.Value <= Roster_OutTime.Value)// Grace Out
                                        {
                                            TranAttendance.grace_out_time = Roster_OutTime.Value.Subtract(attendanceOutTime.attend_datetime.Value);
                                            TranAttendance.is_evening_graceout = true;
                                        }
                                        else // Late Out
                                        {
                                            TranAttendance.late_out_time = attendanceOutTime.attend_datetime.Value.Subtract(Roster_OutTime.Value);
                                            TranAttendance.is_late_out = true;
                                            TranAttendance.late_out_time = TranAttendance.late_out_time;
                                            if (TranAttendance.late_out_time > new TimeSpan(0, 15, 0))
                                            {
                                                TranAttendance.actual_ot_outtime = new TimeSpan(TranAttendance.late_out_time.Value.Hours, GetMinitsEarly(TranAttendance.late_out_time.Value.Minutes), 0);
                                            }
                                            else
                                            {
                                                TranAttendance.actual_ot_outtime = new TimeSpan(0, 0, 0);
                                            }
                                            //
                                        }
                                    }
                                    trns_ExtraOt extraot = new trns_ExtraOt();
                                    extraot = context.trns_ExtraOt.FirstOrDefault(a => a.employee_id == TranAttendance.employee_id && a.ot_date == TranAttendance.attend_date.Date);
                                    if (extraot != null)
                                    {
                                        TranAttendance.extra_ot_time = extraot.extra_ot_time.Value;
                                    }
                                    if (TranAttendance.is_holiday == true || TranAttendance.ismercantile_holiday_work == true)// Day is Holiday || Mercantile Holiday (Sunday)
                                    {

                                        TranAttendance.triple_ot = attendanceOutTime.attend_datetime.Value.Subtract(attendanceInTime.attend_datetime.Value);
                                        TranAttendance.is_morning_halfday = false;
                                        TranAttendance.is_evining_halfday = false;
                                        TranAttendance.is_nopay = false;
                                        TranAttendance.is_leave = false;
                                        TranAttendance.is_fullday = false;
                                        TranAttendance.is_late_in = false;
                                        TranAttendance.is_late_out = false;
                                        TranAttendance.is_early_in = false;
                                        TranAttendance.is_late_in = false;
                                        TranAttendance.early_out_time = new TimeSpan(0, 0, 0);
                                        TranAttendance.late_in_time = new TimeSpan(0, 0, 0);
                                        TranAttendance.late_out_time = new TimeSpan(0, 0, 0);
                                        TranAttendance.early_in_time = new TimeSpan(0, 0, 0);
                                        //TranAttendance.is_late_in = TranAttendance.is_late_out = TranAttendance.is_early_in = TranAttendance.is_early_out = false;
                                        //TranAttendance.late_in_time = TranAttendance.late_out_time = TranAttendance.early_in_time = TranAttendance.early_out_time = TranAttendance.grace_in_time = TranAttendance.grace_out_time = new TimeSpan(0, 0, 0);
                                    }
                                    if (TranAttendance.is_evining_halfday == true)
                                        TranAttendance.early_out_time = new TimeSpan(0, 0, 0);
                                    if (TranAttendance.is_morning_halfday == true)
                                        TranAttendance.late_in_time = new TimeSpan(0, 0, 0);
                                    if (TranAttendance.is_morning_short_day == true)
                                        TranAttendance.late_in_time = new TimeSpan(0, 0, 0);
                                    if (TranAttendance.is_evining_short_day == true)
                                        TranAttendance.early_out_time = new TimeSpan(0, 0, 0);
                                }
                                else if (listEmployeeAttendance.Count() == 0)// Absent
                                {
                                    TranAttendance.is_fullday = true;
                                    TranAttendance.is_absent = true;
                                    trns_AuthorizedNoPays authorizenopay = new trns_AuthorizedNoPays();
                                    authorizenopay = context.trns_AuthorizedNoPays.FirstOrDefault(z => z.employee_id == TranAttendance.employee_id && EntityFunctions.TruncateTime(z.nopay_date) == EntityFunctions.TruncateTime(Roster_OnTime));

                                    TranAttendance.attend_date = RosterItem.roster_calender_date.Value;
                                    TranAttendance.in_datetime = Roster_InTime;
                                    TranAttendance.out_datetime = Roster_OutTime;
                                    if (listLeavePool.Count(c => c.is_approved == true && c.leave_date == TranAttendance.attend_date && c.emp_id == TranAttendance.employee_id && c.leave_type_id == Guid.Parse("877a1ea2-af78-4544-8d95-5c37991e60c6")) != 0)
                                    {
                                        TranAttendance.is_leave = true;
                                    }
                                    else if (listLeavePool.Count(c => c.is_approved == true && c.leave_date == TranAttendance.attend_date && c.emp_id == TranAttendance.employee_id) != 0)
                                    {
                                        TranAttendance.is_leave = true;
                                    }
                                    else if (authorizenopay != null)
                                    {
                                        TranAttendance.is_Authorized_nopay = true;
                                    }
                                    else
                                    {
                                        TranAttendance.is_nopay = true;
                                    }
                                }
                                else // Invalid Attendance 
                                {
                                    TranAttendance.attend_date = RosterItem.roster_calender_date.Value;

                                    if (listLeavePool.Count(c => c.is_approved == true && c.leave_date == TranAttendance.attend_date && c.emp_id == TranAttendance.employee_id && c.leave_type_id == Guid.Parse("877a1ea2-af78-4544-8d95-5c37991e60c6")) != 0)
                                    {
                                        TranAttendance.is_invalid = true;
                                        TranAttendance.is_absent = false;
                                        TranAttendance.is_leave = true;
                                    }
                                    else
                                    {
                                        TranAttendance.is_invalid = true;
                                        //TranAttendance.attend_date = listEmployeeAttendance.FirstOrDefault().attend_date.Value;
                                        //TranAttendance.in_datetime = listEmployeeAttendance.FirstOrDefault().attend_datetime;

                                        TranAttendance.attend_date = RosterItem.roster_calender_date.Value;
                                        TranAttendance.in_datetime = Roster_InTime;
                                        TranAttendance.out_datetime = Roster_OutTime;
                                    }
                                }

                                context.trns_EmployeeAttendance.AddObject(TranAttendance);
                                listTRNS.Add(TranAttendance);

                            }
                        }

                        #region SPMC Special Day
                        //else
                        //{
                        //    listEmployeeAttendance.Clear();
                        //    listEmployeeAttendance = listAttendance.Where(c => c.employee_id == EmpItem.employee_id && c.attend_datetime >= Roster_OnTime).ToList();// Filter Attendance of the Employee for Roster (Taking In Times)

                        //    for (DateTime i = period.start_date.Value; i <= period.end_date.Value; i += TimeSpan.FromDays(1))
                        //    {
                        //        TranAttendance = new trns_EmployeeAttendance();
                        //        TranAttendance.employee_id = EmpItem.employee_id;
                        //        TranAttendance.period_id = period.period_id;
                        //        TranAttendance.attend_date = i;
                        //        TranAttendance.roster_header_id = 000;
                        //        TranAttendance.shift_catagory_id = Guid.Empty;
                        //        TranAttendance.leave_detail_id = Guid.Empty;

                        //        #region Set Default Values to Boolean Fields

                        //        TranAttendance.is_absent =
                        //        TranAttendance.is_invalid =
                        //        TranAttendance.is_leave =
                        //        TranAttendance.is_normal_attendance =
                        //        TranAttendance.isholiday_work =
                        //        TranAttendance.isfreeday_work =
                        //        TranAttendance.is_ficture =
                        //        TranAttendance.is_nopay =
                        //        TranAttendance.ismercantile_holiday_work =
                        //        TranAttendance.is_morning_gracein =
                        //        TranAttendance.is_morning_normal_attendance =
                        //        TranAttendance.is_morning_halfday =
                        //        TranAttendance.is_morning_short_day =
                        //        TranAttendance.is_evining_normal_attendance =
                        //        TranAttendance.is_evening_graceout =
                        //        TranAttendance.is_evining_halfday =
                        //        TranAttendance.is_evining_short_day =
                        //        TranAttendance.is_out_cutoff =
                        //        TranAttendance.is_in_cutoff =
                        //        TranAttendance.is_late_out =
                        //        TranAttendance.is_late_in =
                        //        TranAttendance.is_early_in =
                        //        TranAttendance.is_early_out =
                        //        TranAttendance.is_fullday =
                        //        TranAttendance.is_free_day =

                        //    TranAttendance.is_holiday = false;
                        //        TranAttendance.is_nopay = false;
                        //        TranAttendance.is_Authorized_nopay = false;
                        //        TranAttendance.cal_dayid = Guid.Empty;
                        //        TranAttendance.extra_ot_time = new TimeSpan(0, 0, 0);
                        //        TranAttendance.leave_detail_id = Guid.Empty;
                        //        TranAttendance.leave_type_id = Guid.Empty;
                        //        // 
                        //        #endregion

                        //        #region Set Default Values to TimeSpan Variables
                        //        //
                        //        TranAttendance.poya_ot = new TimeSpan();
                        //        TranAttendance.additional_days_count = 0;
                        //        TranAttendance.early_in_time =
                        //            TranAttendance.early_out_time =
                        //            TranAttendance.late_in_time =
                        //            TranAttendance.late_out_time =
                        //            TranAttendance.actual_ot_intime =
                        //            TranAttendance.actual_ot_outtime =
                        //            TranAttendance.early_cutoff_minits =
                        //            TranAttendance.early_in_time =
                        //            TranAttendance.early_out_time =
                        //            TranAttendance.evining_cutoff_minits =
                        //            TranAttendance.normal_ot =
                        //            TranAttendance.double_ot =
                        //            TranAttendance.total_work_time =
                        //            TranAttendance.triple_ot =
                        //            TranAttendance.grace_in_time =
                        //            TranAttendance.grace_out_time =
                        //            TranAttendance.in_time =
                        //            TranAttendance.out_time =
                        //            new TimeSpan(0, 0, 0);
                        //        //
                        //        #endregion

                        //        if (listEmployeeAttendance.Count() >= 2 && listEmployeeAttendance.Count(c => c.attend_datetime.Value.Date == i.Date) > 0)
                        //        {
                        //            TranAttendance.is_normal_attendance = true;
                        //            attendanceInTime = listEmployeeAttendance.OrderBy(c => c.attend_datetime).FirstOrDefault(c => c.attend_date == i);
                        //            attendanceOutTime = listEmployeeAttendance.OrderByDescending(c => c.attend_datetime).FirstOrDefault(c => c.attend_date == i);
                        //            TranAttendance.in_datetime = attendanceInTime.attend_datetime;
                        //            TranAttendance.in_time = new TimeSpan(attendanceInTime.attend_datetime.Value.Hour, attendanceInTime.attend_datetime.Value.Minute, attendanceInTime.attend_datetime.Value.Second);
                        //            TranAttendance.out_datetime = attendanceOutTime.attend_datetime;
                        //            TranAttendance.out_time = new TimeSpan(attendanceOutTime.attend_datetime.Value.Hour, attendanceOutTime.attend_datetime.Value.Minute, attendanceOutTime.attend_datetime.Value.Second);
                        //            TranAttendance.attend_date = attendanceInTime.attend_date.Value;
                        //            TranAttendance.total_work_time = attendanceOutTime.attend_datetime.Value.Subtract(attendanceInTime.attend_datetime.Value);

                        //            #region Holiday / Mercantile holidays (Sunday)
                        //            if (listHolidays.Count(c => c.holiday_Date == TranAttendance.attend_date) != 0)// Holiday
                        //            {
                        //                if (listHolidays.Count(c => c.holiday_Date == TranAttendance.attend_date && c.isMercantileHoliday == true) != 0)
                        //                {
                        //                    TranAttendance.triple_ot = TranAttendance.total_work_time;
                        //                    TranAttendance.ismercantile_holiday_work = true;
                        //                    TranAttendance.is_holiday = true;
                        //                }
                        //                else
                        //                {
                        //                    // TranAttendance.is_holiday = true;
                        //                    TranAttendance.triple_ot = TranAttendance.total_work_time;
                        //                    TranAttendance.isfreeday_work = true;
                        //                }
                        //            }
                        //            else if (TranAttendance.attend_date.DayOfWeek == DayOfWeek.Sunday)// Mercantile holidays (Sunday)
                        //            {
                        //                TranAttendance.ismercantile_holiday_work = true;
                        //                TranAttendance.triple_ot = TranAttendance.total_work_time;
                        //            }
                        //            #endregion


                        //            trns_ExtraOt extraot = new trns_ExtraOt();
                        //            extraot = context.trns_ExtraOt.FirstOrDefault(a => a.employee_id == TranAttendance.employee_id && a.ot_date == TranAttendance.attend_date.Date);
                        //            if (extraot != null)
                        //            {
                        //                TranAttendance.extra_ot_time = extraot.extra_ot_time.Value;
                        //            }
                        //            if (TranAttendance.is_holiday == true || TranAttendance.ismercantile_holiday_work == true)// Day is Holiday || Mercantile Holiday (Sunday)
                        //            {

                        //                TranAttendance.triple_ot = attendanceOutTime.attend_datetime.Value.Subtract(attendanceInTime.attend_datetime.Value);
                        //                TranAttendance.is_morning_halfday = false;
                        //                TranAttendance.is_evining_halfday = false;
                        //                TranAttendance.is_nopay = false;
                        //                TranAttendance.is_leave = false;
                        //                TranAttendance.is_fullday = false;
                        //                TranAttendance.is_late_in = false;
                        //                TranAttendance.is_late_out = false;
                        //                TranAttendance.is_early_in = false;
                        //                TranAttendance.is_late_in = false;
                        //                TranAttendance.early_out_time = new TimeSpan(0, 0, 0);
                        //                TranAttendance.late_in_time = new TimeSpan(0, 0, 0);
                        //                TranAttendance.late_out_time = new TimeSpan(0, 0, 0);
                        //                TranAttendance.early_in_time = new TimeSpan(0, 0, 0);
                        //                //TranAttendance.is_late_in = TranAttendance.is_late_out = TranAttendance.is_early_in = TranAttendance.is_early_out = false;
                        //                //TranAttendance.late_in_time = TranAttendance.late_out_time = TranAttendance.early_in_time = TranAttendance.early_out_time = TranAttendance.grace_in_time = TranAttendance.grace_out_time = new TimeSpan(0, 0, 0);
                        //            }
                        //            if (TranAttendance.is_evining_halfday == true)
                        //                TranAttendance.early_out_time = new TimeSpan(0, 0, 0);
                        //            if (TranAttendance.is_morning_halfday == true)
                        //                TranAttendance.late_in_time = new TimeSpan(0, 0, 0);
                        //            if (TranAttendance.is_morning_short_day == true)
                        //                TranAttendance.late_in_time = new TimeSpan(0, 0, 0);
                        //            if (TranAttendance.is_evining_short_day == true)
                        //                TranAttendance.early_out_time = new TimeSpan(0, 0, 0);
                        //        }


                        //        context.trns_EmployeeAttendance.AddObject(TranAttendance);
                        //        listTRNS.Add(TranAttendance);
                        //    }


                        //}

                        #endregion

                    }
                    int x = listTRNS.Count();
                    return context.SaveChanges() != 0;
                }
            }
            catch (Exception)
            {
                return false;
                //throw;
            }
        }


        private TimeSpan? RoundOTTime(TimeSpan? OTTime, TimeSpan? maxTime)
        {
            TimeSpan? runingTime = new TimeSpan(0, 0, 0);
            if (OTTime < maxTime)
            {
                while (runingTime <= maxTime)
                {
                    if (runingTime > OTTime)
                        return runingTime.Value.Subtract(new TimeSpan(0, 15, 0));
                    else
                        runingTime = runingTime.Value.Add(new TimeSpan(0, 15, 0));
                }
            }
            return maxTime;
        }
        #endregion

        // Old Roster
        #region z_RosterDetail Operations
        [OperationContract]
        public IEnumerable<z_RosterDetail> GetRosterDetail()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.z_RosterDetail.Where(c => c.is_delete == false).ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public bool SaveRosterDetail(z_RosterDetail rosterdetails)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    context.z_RosterDetail.AddObject(rosterdetails);
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool UpdateRosterDetail(z_RosterDetail rosterdetails)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    z_RosterDetail upRoster = context.z_RosterDetail.FirstOrDefault(c => c.roster_detail_id == rosterdetails.roster_detail_id);
                    upRoster.grace_in = rosterdetails.grace_in;
                    upRoster.grace_out = rosterdetails.grace_out;
                    upRoster.in_day_id = rosterdetails.in_day_id;
                    upRoster.in_time = rosterdetails.in_time;
                    upRoster.is_active = rosterdetails.is_active;
                    upRoster.is_off = rosterdetails.is_off;
                    upRoster.modified_datetime = rosterdetails.modified_datetime;
                    upRoster.modified_user_id = rosterdetails.modified_user_id;
                    upRoster.out_day_id = rosterdetails.out_day_id;
                    upRoster.out_time = rosterdetails.out_time;
                    upRoster.roster_detail_name = rosterdetails.roster_detail_name;
                    upRoster.roster_in_day_id = rosterdetails.roster_in_day_id;
                    upRoster.roster_off_time = rosterdetails.roster_off_time;
                    upRoster.roster_on_time = rosterdetails.roster_on_time;
                    upRoster.roster_out_day_id = rosterdetails.roster_out_day_id;
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool DeleteRosterDetail(z_RosterDetail rosterdetails)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    z_RosterDetail upRoster = context.z_RosterDetail.FirstOrDefault(c => c.roster_detail_id == rosterdetails.roster_detail_id);
                    upRoster.delete_datetime = rosterdetails.delete_datetime;
                    upRoster.delete_user_id = rosterdetails.delete_user_id;
                    upRoster.is_delete = true;
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }
        #endregion

        #region z_RosterDays Oprations
        [OperationContract]
        public IEnumerable<z_RosterDays> GetRosterDays()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.z_RosterDays.Where(c => c.is_active == true).ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }
        #endregion
        // 28-08-2014
        #region Roster PROCEDURES Operations
        [OperationContract]
        public IEnumerable<RosterCalenderHeaderView_PROC_Result> GetRosterCalenderHeaderView_PROC(DateTime? date)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    string calDate = ((DateTime)date).Year + "-" + ((DateTime)date).Month + "-" + ((DateTime)date).Day;
                    var result = context.RosterCalenderHeaderView_PROC(calDate).ToList();
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public IEnumerable<RosterCalenderDetailView_PROC_Result> GetRosterCalenderDetailView_PROC(DateTime? date)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    string calDate = ((DateTime)date).Year + "-" + ((DateTime)date).Month + "-" + ((DateTime)date).Day;
                    var result = context.RosterCalenderDetailView_PROC(calDate).ToList();
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public IEnumerable<RosterCalenderSummary_PROC_Result> GetRosterCalenderSummaryw_PROC(DateTime? startDate, DateTime? endDate)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    string StartDate = ((DateTime)startDate).Year + "-" + ((DateTime)startDate).Month + "-" + ((DateTime)startDate).Day;
                    string EndDate = ((DateTime)endDate).Year + "-" + ((DateTime)endDate).Month + "-" + ((DateTime)endDate).Day;
                    var result = context.RosterCalenderSummary_PROC(StartDate, EndDate).ToList();
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }
        #endregion

        #region z_RosterCalenderHeader Operations

        [OperationContract]
        public IEnumerable<z_RosterCalenderHeader> GetRosterCalenderHeader()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.z_RosterCalenderHeader.Where(c => c.is_delete == false).ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public bool SaveRosterCalenderHeader(z_RosterCalenderHeader rosterHeader, List<dtl_RosterCalenderDetail> rosterDetails)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    rosterHeader.roster_header_id = GetLastRosterCalenderHeaderNo();
                    context.z_RosterCalenderHeader.AddObject(rosterHeader);
                    if (context.SaveChanges() == 1)
                    {
                        SaveRosterCalenderDetail(rosterHeader, rosterDetails);
                        return true;
                    }
                    return false;
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool UpdateRosterCalenderHeader(z_RosterCalenderHeader rosterHeader, List<dtl_RosterCalenderDetail> rosterDetails)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    z_RosterCalenderHeader upRosterHeader = context.z_RosterCalenderHeader.FirstOrDefault(c => c.roster_header_id == rosterHeader.roster_header_id);
                    upRosterHeader.modified_datetime = rosterHeader.modified_datetime;
                    upRosterHeader.modified_user_id = rosterHeader.modified_user_id;
                    context.SaveChanges();
                    return UpdateRosterCalenderDetail(rosterHeader, rosterDetails);
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool DeleteRosterCalenderHeader(z_RosterCalenderHeader rosterHeader)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    z_RosterCalenderHeader dRoster = context.z_RosterCalenderHeader.FirstOrDefault(c => c.roster_header_id == rosterHeader.roster_header_id);
                    dRoster.is_delete = true;
                    dRoster.delete_datetime = rosterHeader.delete_datetime;
                    dRoster.delete_user_id = rosterHeader.delete_user_id;

                    List<dtl_RosterCalenderDetail> list = new List<dtl_RosterCalenderDetail>();
                    list = context.dtl_RosterCalenderDetail.Where(c => c.is_delete == false && c.roster_header_id == rosterHeader.roster_header_id).ToList();
                    foreach (var item in list)
                    {
                        item.is_delete = true;
                    }
                    if (context.SaveChanges() != 0)
                        return true;
                    else
                        return false;
                    /*
                    if (context.SaveChanges() != 0)
                    {
                        DeleteRosterCalenderDetail(rosterHeader);
                        return true;
                    }
                    else
                        return false;*/

                }
            }
            catch (Exception)
            {
                return false;
            }
        }
        #endregion

        #region dtl_RosterCalenderDetail Operations
        [OperationContract]
        public IEnumerable<dtl_RosterCalenderDetail> GetRosterCalenderDetails()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.dtl_RosterCalenderDetail.Where(c => c.is_delete == false).ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        private bool SaveRosterCalenderDetail(z_RosterCalenderHeader rosterHeader, List<dtl_RosterCalenderDetail> rosterDetails)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    foreach (var item in rosterDetails)
                    {
                        item.roster_header_id = rosterHeader.roster_header_id;
                        context.dtl_RosterCalenderDetail.AddObject(item);
                    }
                    if (context.SaveChanges() == rosterDetails.Count())
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        private bool UpdateRosterCalenderDetail(z_RosterCalenderHeader rosterHeader, List<dtl_RosterCalenderDetail> rosterDetails)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    List<dtl_RosterCalenderDetail> listOld = new List<dtl_RosterCalenderDetail>();
                    listOld = context.dtl_RosterCalenderDetail.Where(c => c.roster_header_id == rosterHeader.roster_header_id).ToList();
                    foreach (var item in rosterDetails)
                    {
                        if (listOld.Count(c => c.employee_id == item.employee_id) == 0)
                            context.dtl_RosterCalenderDetail.AddObject(item);
                        else
                        {
                            if (listOld.Count(c => c.employee_id == item.employee_id && c.is_delete == true) != 0)
                            {
                                dtl_RosterCalenderDetail up = context.dtl_RosterCalenderDetail.FirstOrDefault(c => c.employee_id == item.employee_id && c.roster_header_id == rosterHeader.roster_header_id);
                                up.is_delete = false;
                            }
                        }
                    }
                    listOld = context.dtl_RosterCalenderDetail.Where(c => c.roster_header_id == rosterHeader.roster_header_id && c.is_delete == false).ToList();
                    foreach (var item in listOld)
                    {
                        if (rosterDetails.Count(c => c.employee_id == item.employee_id) == 0)
                        {
                            dtl_RosterCalenderDetail up = context.dtl_RosterCalenderDetail.FirstOrDefault(c => c.employee_id == item.employee_id && c.roster_header_id == rosterHeader.roster_header_id);
                            up.is_delete = true;
                        }
                    }
                    context.SaveChanges();
                    return true;
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        private bool DeleteRosterCalenderDetail(z_RosterCalenderHeader rosterHeader)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    List<dtl_RosterCalenderDetail> list = new List<dtl_RosterCalenderDetail>();
                    list = context.dtl_RosterCalenderDetail.Where(c => c.is_delete == false && c.roster_header_id == rosterHeader.roster_header_id).ToList();
                    foreach (var item in list)
                    {
                        item.is_delete = true;
                    }
                    context.SaveChanges();
                    return true;
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        #endregion

        #region RosterCalenderHeaderView Operations
        [OperationContract]
        public IEnumerable<RosterCalenderHeaderView> GetRosterCalenderHeaderView()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.RosterCalenderHeaderViews.Where(c => c.is_delete == false).ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }
        #endregion

        #region z_Calender
        [OperationContract]
        public IEnumerable<z_Calender> GetCalender()
        {
            //List<z_Calender> result = new List<z_Calender>();
            return new List<z_Calender>();
        }

        [OperationContract]
        public IEnumerable<z_Holiday> GetHolidaysForCalender()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.z_Holiday.ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }
        #endregion

        #region z_RosterGroup Operations
        [OperationContract]
        public IEnumerable<z_RosterGroup> GetRosterGroup()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.z_RosterGroup.Where(c => c.is_delete == false).ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public bool SaveRosterGroup(z_RosterGroup rosterGroup, List<dtl_RosterGroupDetail> rosterEmployees)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    context.z_RosterGroup.AddObject(rosterGroup);
                    if (context.z_RosterGroup.Count(c => c.roster_group_id == rosterGroup.roster_group_id) != 0)
                        rosterGroup.roster_group_id = GetLastRosterGroupNo();
                    if (validateSaveUpdate(context.SaveChanges()))
                    {
                        ModifyRosterGroup(rosterGroup, rosterEmployees);
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool UpdateRosterGroup(z_RosterGroup rosterGroup, List<dtl_RosterGroupDetail> rosterEmployees)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    z_RosterGroup updateRoster = context.z_RosterGroup.FirstOrDefault(c => c.roster_group_id == rosterGroup.roster_group_id);
                    updateRoster.roster_group_name = rosterGroup.roster_group_name;
                    updateRoster.modified_datetime = rosterGroup.modified_datetime;
                    updateRoster.modified_user_id = rosterGroup.modified_user_id;
                    updateRoster.is_active = rosterGroup.is_active;
                    if (validateSaveUpdate(context.SaveChanges()))
                    {
                        ModifyRosterGroup(rosterGroup, rosterEmployees);
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        private void ModifyRosterGroup(z_RosterGroup rosterGroup, List<dtl_RosterGroupDetail> rosterEmployees)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    List<dtl_RosterGroupDetail> listOldRGD = context.dtl_RosterGroupDetail.Where(c => c.roster_group_id == rosterGroup.roster_group_id).ToList();
                    List<dtl_RosterGroupDetail> listEmp = context.dtl_RosterGroupDetail.Where(c => c.is_delete == false && c.roster_group_id != rosterGroup.roster_group_id).ToList();

                    foreach (var item in rosterEmployees)
                    {
                        if (listOldRGD.Count(c => c.employee_id == item.employee_id && c.is_delete == false) == 0)
                        {
                            if (listOldRGD.Count(c => c.employee_id == item.employee_id && c.is_delete == true) != 0)
                            {
                                dtl_RosterGroupDetail updateRG = context.dtl_RosterGroupDetail.FirstOrDefault(c => c.employee_id == item.employee_id && c.roster_group_id == item.roster_group_id);
                                updateRG.is_delete = false;
                                updateRG.is_active = true;          //---------------- edited due to SPMC requirement at 2015-06-11. newly added only this line of code
                                updateRG.modified_datetime = rosterGroup.modified_datetime;
                                updateRG.modified_user_id = rosterGroup.modified_user_id;
                            }
                            else
                                context.dtl_RosterGroupDetail.AddObject(item);
                        }
                        if (listEmp.Count(c => c.employee_id == item.employee_id) != 0)
                        {
                            foreach (var item2 in listEmp.Where(c => c.employee_id == item.employee_id))
                            {
                                dtl_RosterGroupDetail updateRG = context.dtl_RosterGroupDetail.FirstOrDefault(c => c.employee_id == item.employee_id && c.roster_group_id == item2.roster_group_id);
                                updateRG.is_delete = true;
                                updateRG.delete_datetime = rosterGroup.modified_datetime;
                                updateRG.delete_user_id = rosterGroup.modified_user_id;
                            }
                        }
                    }

                    /*
                     * Employee removed from one roster group temporarily by setting his is_active into false.
                     * To get only necessary data one more filtering is added to EmployeeRosterDetailView ( from db) as get records is_active = true
                     * If same employee is assigned to another group then his is_delete sets into true by already implemented code (By former developer)
                     */
                    //--------------------------------- edited due to SPMC requirement at 2015-06-11 
                    List<dtl_RosterGroupDetail> removedList = listOldRGD.Where(c => c.roster_group_id == rosterGroup.roster_group_id && !rosterEmployees.Any(d => d.employee_id == c.employee_id) && c.is_active == true).ToList();
                    foreach (dtl_RosterGroupDetail removeEmp in removedList)
                    {
                        if (removeEmp != null)
                        {
                            var current = context.dtl_RosterGroupDetail.FirstOrDefault(c => c.roster_group_id == removeEmp.roster_group_id && c.employee_id == removeEmp.employee_id);
                            current.is_active = false;
                            current.modified_datetime = rosterGroup.modified_datetime;
                            current.modified_user_id = rosterGroup.modified_user_id;
                        }
                    }
                    //-------------------------------- end of edited due to SPMC requirement at 2015-06-11
                    context.SaveChanges();
                }
            }
            catch (Exception)
            { }
        }

        [OperationContract]
        public bool DeleteRosterGroup(z_RosterGroup rosterGroup)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    z_RosterGroup updateRoster = context.z_RosterGroup.FirstOrDefault(c => c.roster_group_id == rosterGroup.roster_group_id);
                    updateRoster.delete_datetime = rosterGroup.modified_datetime;
                    updateRoster.delete_user_id = rosterGroup.modified_user_id;
                    updateRoster.is_delete = true;
                    if (validateSaveUpdate(context.SaveChanges()))
                    {
                        List<dtl_RosterGroupDetail> listRGD = new List<dtl_RosterGroupDetail>();
                        listRGD = context.dtl_RosterGroupDetail.Where(c => c.roster_group_id == rosterGroup.roster_group_id && c.is_delete == false).ToList();
                        foreach (var item in listRGD)
                        {
                            item.delete_datetime = rosterGroup.delete_datetime;
                            item.delete_user_id = rosterGroup.delete_user_id;
                            DeleteRosterGroupDetail(item);
                        }
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (Exception)
            {
                return false;
            }
        }
        #endregion

        #region dtl_RosterGroupDetail Operation
        [OperationContract]
        public IEnumerable<dtl_RosterGroupDetail> GetRosterGroupDetail()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.dtl_RosterGroupDetail.Where(c => c.is_delete == false).ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public bool SaveRosterGroupDetail(dtl_RosterGroupDetail rosterGroupDetail)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (context.dtl_RosterGroupDetail.Count(c => c.roster_group_id == rosterGroupDetail.roster_group_id && c.employee_id == rosterGroupDetail.employee_id) != 0)
                    {
                        dtl_RosterGroupDetail rosterGD = context.dtl_RosterGroupDetail.FirstOrDefault(c => c.roster_group_id == rosterGroupDetail.roster_group_id && c.employee_id == rosterGroupDetail.employee_id);
                        rosterGD.is_active = true;
                        rosterGD.is_delete = false;
                    }
                    else
                        context.dtl_RosterGroupDetail.AddObject(rosterGroupDetail);
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool UpdateRosterGroupDetail(dtl_RosterGroupDetail rosterGroupDetail)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    dtl_RosterGroupDetail rosterGD = context.dtl_RosterGroupDetail.FirstOrDefault(c => c.roster_group_id == rosterGroupDetail.roster_group_id && c.employee_id == rosterGroupDetail.employee_id);
                    rosterGD.is_active = rosterGroupDetail.is_active;
                    rosterGD.employee_id = rosterGroupDetail.employee_id;
                    rosterGD.roster_group_id = rosterGroupDetail.roster_group_id;
                    rosterGD.modified_datetime = rosterGroupDetail.modified_datetime;
                    rosterGD.modified_user_id = rosterGroupDetail.modified_user_id;
                    rosterGD.is_delete = rosterGroupDetail.is_delete;
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool DeleteRosterGroupDetail(dtl_RosterGroupDetail rosterGroupDetail)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    dtl_RosterGroupDetail rosterGD = context.dtl_RosterGroupDetail.FirstOrDefault(c => c.roster_group_id == rosterGroupDetail.roster_group_id && c.employee_id == rosterGroupDetail.employee_id);
                    rosterGD.delete_datetime = rosterGroupDetail.delete_datetime;
                    rosterGD.delete_user_id = rosterGroupDetail.delete_user_id;
                    rosterGD.is_delete = true;
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }
        #endregion

        #region z_RosterCalculationRules Operation
        private IEnumerable<z_RosterCalculationRules> GetRosterCalculationRules()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.z_RosterCalculationRules.ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }
        #endregion

        #region Roster Views
        [OperationContract]
        public IEnumerable<RosterDetailView> GetRosterDetailView()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.RosterDetailViews.ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public IEnumerable<EmployeeRosterDetailView> GetEmployeeRosterDetailView()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.EmployeeRosterDetailViews.ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public IEnumerable<EmployeesForRosterView> GetEmployeesForRosterView()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.EmployeesForRosterViews.ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }
        #endregion

        #region Get Last Nos
        [OperationContract]
        public int GetLastRosterGroupNo()
        {
            int x = 0;
            try
            {
                using (var context = new ERPEntities())
                {
                    x = context.z_RosterGroup.OrderByDescending(c => c.roster_group_id).FirstOrDefault().roster_group_id;
                }
            }
            catch (Exception)
            { }
            return x + 1;
        }

        private int GetLastRosterCalenderHeaderNo()
        {
            int x = 999;
            try
            {
                using (var context = new ERPEntities())
                {
                    x = context.z_RosterCalenderHeader.OrderByDescending(c => c.roster_header_id).FirstOrDefault().roster_header_id;
                }
            }
            catch (Exception)
            { }
            return x + 1;
        }
        #endregion
        #endregion

        [OperationContract]
        public IEnumerable<trns_AuthorizedNoPays> GetEmployeeAuthorizeNopay()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.trns_AuthorizedNoPays.ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }
        [OperationContract]
        private bool SaveAuthorizeNoPay(IEnumerable<trns_AuthorizedNoPays> nopay)
        {
            bool isSucess = false;
            try
            {
                if (nopay != null)
                {
                    using (var context = new ERPEntities())
                    {
                        foreach (var item in nopay)
                        {
                            context.trns_AuthorizedNoPays.AddObject(item);
                        }
                        int i = context.SaveChanges();
                        isSucess = validateSaveUpdate(i);
                    }
                }
                return isSucess;
            }
            catch (Exception)
            {

                return isSucess = false;
            }

        }


        [OperationContract]
        public IEnumerable<trns_ExtraOt> GetEmployeeExtraOt()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.trns_ExtraOt.ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }
        [OperationContract]
        private bool SaveExtraOt(IEnumerable<trns_ExtraOt> Extraot)
        {
            bool isSucess = false;
            try
            {
                if (Extraot != null)
                {
                    using (var context = new ERPEntities())
                    {
                        foreach (var item in Extraot)
                        {
                            context.trns_ExtraOt.AddObject(item);
                        }
                        int i = context.SaveChanges();
                        isSucess = validateSaveUpdate(i);
                    }
                }
                return isSucess;
            }
            catch (Exception)
            {

                return isSucess = false;
            }

        }

        #region Diyath


        #region Loan Module Operations


        [OperationContract]
        public IEnumerable<AprrovedLoanPaymentView> GetAprrovedLoanPaymentView()
        {
            using (var context = new ERPEntities())
            {
                var result = context.AprrovedLoanPaymentViews.ToList();
                result.ForEach(r => context.Detach(r));
                return result;
            }
        }

        #region Loan Payment

        [OperationContract]
        public IEnumerable<z_LoanPayment> GetLoanPayment()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_LoanPayment.ToList();
                result.ForEach(r => context.Detach(r));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<dtl_LoanPayment> GetDetailedLoanPayment(Guid payment_id)
        {
            using (var context = new ERPEntities())
            {
                var result = context.dtl_LoanPayment.Where(r => r.payment_id == payment_id).ToList();
                result.ForEach(r => context.Detach(r));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<dtl_LoanPayment> GetLDetailedLoanPayment()
        {
            using (var context = new ERPEntities())
            {
                var result = context.dtl_LoanPayment.ToList();
                result.ForEach(r => context.Detach(r));
                return result;
            }
        }

        [OperationContract]
        public GETLASTPAYMENT_PROC_Result GetLastLoan(Guid LoanId)
        {
            using (var context = new ERPEntities())
            {
                GETLASTPAYMENT_PROC_Result result = context.GETLASTPAYMENT_PROC(LoanId.ToString()).FirstOrDefault();
                return result;
            }
        }

        [OperationContract]
        public bool SaveLoanPayment(z_LoanPayment LoanPayment, List<dtl_LoanPayment> LoanPayments)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    context.z_LoanPayment.AddObject(LoanPayment);
                    if (context.SaveChanges() == 1)
                        return SaveLoanPaymentDetail(LoanPayments);
                    else
                        return false;
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        private bool SaveLoanPaymentDetail(List<dtl_LoanPayment> LoanPayments)
        {
            using (var context = new ERPEntities())
            {
                foreach (var item in LoanPayments)
                {
                    context.dtl_LoanPayment.AddObject(item);
                }
                return context.SaveChanges() == LoanPayments.Count;
            }
        }
        #endregion

        #region Loan Automation

        [OperationContract]
        public bool GetDeductionCheck(Guid ID)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    bool result = (bool)context.GetDeductionRuleCheck_PROC(ID).FirstOrDefault().ischeck;
                    return result;
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        [OperationContract]
        public bool GetLoanCompletelyEnd(Guid ID)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    bool result = (bool)context.GetLoanEnd_PROC(ID).FirstOrDefault().result;
                    return result;
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }
        [OperationContract]
        public bool UpdateCompleteLoans(Guid EmployeeLoansID)
        {
            using (var context = new ERPEntities())
            {
                dtl_EmployeeLoans newEmployeeLoan = context.dtl_EmployeeLoans.FirstOrDefault(p => p.employee_loan_id == EmployeeLoansID);
                newEmployeeLoan.is_completed = true;
                return validateSaveUpdate(context.SaveChanges());
            }
        }
        [OperationContract]
        public decimal SaveLoanToPeriodQuantity(decimal amount, Guid Rule, Guid EMP, Guid SaveUser, DateTime DateTime, Guid PeriodID)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    try
                    {
                        return (decimal)context.LoanSaveToEmployeeRule_PROC(amount, Rule, EMP, SaveUser, DateTime, PeriodID).FirstOrDefault().COMPLETE;

                    }
                    catch (Exception)
                    {
                        return 0;
                    }
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        #endregion

        #region Loan Approved Operation
        [OperationContract]
        public IEnumerable<LoanApprovedView> GetLoanApprovedView()
        {
            using (var context = new ERPEntities())
            {
                var result = context.LoanApprovedViews.Where(r => r.approved == null).ToList();
                result.ForEach(q => context.Detach(q));
                return result;
            }
        }

        [OperationContract]
        public bool GetSavedApprovedLoan(Guid gu_id)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    return context.dtl_ApprovedLoan.Count(i => i.approved_loan_id == gu_id) == 1;
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public IEnumerable<dtl_ApprovedLoan> GetApprovedLoan()
        {
            using (var context = new ERPEntities())
            {
                var result = context.dtl_ApprovedLoan.OrderBy(o => o.save_datetime).ToList();
                result.ForEach(p => context.Detach(p));
                return result;
            }
        }

        [OperationContract]
        public bool UpdatePendingEmloyeeLoans(dtl_EmployeeLoans empLoans)
        {
            try
            {
                if (empLoans != null)
                    using (var context = new ERPEntities())
                    {
                        dtl_EmployeeLoans newEmpLoans = context.dtl_EmployeeLoans.FirstOrDefault(i => i.employee_loan_id == empLoans.employee_loan_id);
                        newEmpLoans.save_datetime = empLoans.save_datetime;
                        newEmpLoans.save_user_id = empLoans.save_user_id;

                        newEmpLoans.pending = false;
                        return validateSaveUpdate(context.SaveChanges());
                    }
                else { return false; }

            }
            catch (Exception)
            { return false; }
        }
        [OperationContract]
        public bool SaveApprovedLoan(dtl_ApprovedLoan ApprovedLoan)
        {
            try
            {
                if (ApprovedLoan != null)
                {
                    using (var context = new ERPEntities())
                    {
                        context.dtl_ApprovedLoan.AddObject(ApprovedLoan);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {

                return false;
            }

            return false;
        }

        [OperationContract]
        public bool UpdateApprovedLoan(dtl_ApprovedLoan ApprovedLoan)
        {
            try
            {
                if (ApprovedLoan != null)
                {
                    using (var context = new ERPEntities())
                    {
                        dtl_ApprovedLoan newApprovedLoan = context.dtl_ApprovedLoan.FirstOrDefault(p => p.approved_loan_id == ApprovedLoan.approved_loan_id);
                        newApprovedLoan.approved_loan_id = ApprovedLoan.approved_loan_id;
                        newApprovedLoan.employee_loan_id = ApprovedLoan.employee_loan_id;
                        newApprovedLoan.comment = ApprovedLoan.comment;
                        newApprovedLoan.modified_user_id = ApprovedLoan.modified_user_id;
                        newApprovedLoan.modified_datetime = ApprovedLoan.modified_datetime;
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {

                return false;
            }
            return false;
        }
        #endregion

        #region z_LoanCatergory Operations


        [OperationContract]
        public IEnumerable<z_LoanCatergories> GetLoanCatergories()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_LoanCatergories.Where(p => p.is_delete == false).OrderBy(l => l.loan_no).ToList();
                result.ForEach(p => context.Detach(p));
                return result;
            }
        }

        [OperationContract]
        public bool SaveLoanCatergories(z_LoanCatergories LoanCatergory)
        {
            using (var context = new ERPEntities())
            {
                LoanCatergory.loan_no = GetLastLoanCatergoryNo();
                context.z_LoanCatergories.AddObject(LoanCatergory);
                return validateSaveUpdate(context.SaveChanges());
            }
        }

        [OperationContract]
        public bool UpdateLoanCatergories(z_LoanCatergories LoanCatergory)
        {
            using (var context = new ERPEntities())
            {
                z_LoanCatergories newLoanCatergory = context.z_LoanCatergories.FirstOrDefault(p => p.loan_Catergory_id == LoanCatergory.loan_Catergory_id);
                newLoanCatergory.loan_Catergory_id = LoanCatergory.loan_Catergory_id;
                newLoanCatergory.loan_no = LoanCatergory.loan_no;
                newLoanCatergory.loan_catergory_name = LoanCatergory.loan_catergory_name;
                newLoanCatergory.loan_description = LoanCatergory.loan_description;
                newLoanCatergory.is_active = LoanCatergory.is_active;
                newLoanCatergory.is_delete = LoanCatergory.is_delete;
                newLoanCatergory.modified_user_id = LoanCatergory.modified_user_id;
                newLoanCatergory.modified_datetime = LoanCatergory.modified_datetime;
                return validateSaveUpdate(context.SaveChanges());
            }
        }

        [OperationContract]
        public bool DeleteLoanCatergory(z_LoanCatergories LoanCatergory)
        {
            using (var context = new ERPEntities())
            {
                z_LoanCatergories newLoanCatergory = context.z_LoanCatergories.FirstOrDefault(p => p.loan_Catergory_id == LoanCatergory.loan_Catergory_id);
                newLoanCatergory.delete_user_id = LoanCatergory.delete_user_id;
                newLoanCatergory.delete_datetime = LoanCatergory.delete_datetime;
                newLoanCatergory.is_delete = true;
                return validateSaveUpdate(context.SaveChanges());
            }
        }
        #endregion

        #region z_Loans Operations
        [OperationContract]
        public IEnumerable<z_Loan> GetLoans()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_Loan.Where(p => p.is_delete == false).OrderByDescending(l => l.loan_no).ToList();
                result.ForEach(p => context.Detach(p));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<LoansView> GetLoansView()
        {
            using (var context = new ERPEntities())
            {
                var result = context.LoansViews.Where(p => p.is_delete == false).OrderByDescending(l => l.loan_no).ToList();
                result.ForEach(p => context.Detach(p));
                return result;
            }
        }

        [OperationContract]
        public bool SaveLoans(z_Loan Loans)
        {
            using (var context = new ERPEntities())
            {
                //z_Loan newLoan = new z_Loan();
                //newLoan = Loans;
                Loans.loan_no = GetLastLoanNo();
                context.z_Loan.AddObject(Loans);
                return validateSaveUpdate(context.SaveChanges());
            }
        }

        [OperationContract]
        public bool UpdateLoan(z_Loan Loan)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    z_Loan newLoan = context.z_Loan.FirstOrDefault(p => p.loan_id == Loan.loan_id);
                    newLoan.loan_id = Loan.loan_id;
                    newLoan.loan_Catergory_id = Loan.loan_Catergory_id;
                    newLoan.loan_name = Loan.loan_name;
                    newLoan.loan_no = Loan.loan_no;
                    newLoan.maximum_amount = Loan.maximum_amount;
                    newLoan.minimum_amount = Loan.minimum_amount;
                    newLoan.default_rate = Loan.default_rate;
                    newLoan.maximum_time_duration_period = Loan.maximum_time_duration_period;
                    newLoan.maximum_time_duration_type = Loan.maximum_time_duration_type;
                    newLoan.minimum_time_duration_period = Loan.minimum_time_duration_period;
                    newLoan.minimum_time_duration_type = Loan.minimum_time_duration_type;
                    newLoan.is_active = Loan.is_active;
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        #endregion

        #region dtl_EmployeeLoans Operations

        [OperationContract]
        public IEnumerable<mas_Employee> GetSaveEmployee(Guid gid)
        {
            using (var context = new ERPEntities())
            {
                var result = context.mas_Employee.Where(i => i.employee_id == gid).ToList();
                result.ForEach(p => context.Detach(p));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<dtl_EmployeeLoans> GetEmployeeLoans()
        {
            using (var context = new ERPEntities())
            {
                var result = context.dtl_EmployeeLoans.Where(p => p.is_delete == false).ToList();
                result.ForEach(p => context.Detach(p));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<EmployeeLoansView> GetEmployeeLoansView()
        {
            using (var context = new ERPEntities())
            {
                var result = context.EmployeeLoansViews.Where(r => r.pending == true).ToList();
                result.ForEach(p => context.Detach(p));
                return result;
            }
        }

        [OperationContract]
        public bool SaveEmployeeLoans(dtl_EmployeeLoans EmployeeLoans)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    context.dtl_EmployeeLoans.AddObject(EmployeeLoans);
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool UpdateEmployeeLoans(dtl_EmployeeLoans EmployeeLoans)
        {
            using (var context = new ERPEntities())
            {
                dtl_EmployeeLoans newEmployeeLoan = context.dtl_EmployeeLoans.FirstOrDefault(p => p.employee_loan_id == EmployeeLoans.employee_loan_id);
                newEmployeeLoan.employee_loan_id = EmployeeLoans.employee_loan_id;
                newEmployeeLoan.employee_id = EmployeeLoans.employee_id;
                newEmployeeLoan.loan_id = EmployeeLoans.loan_id;
                newEmployeeLoan.loan_start_date = EmployeeLoans.loan_start_date;
                newEmployeeLoan.loan_end_date = EmployeeLoans.loan_end_date;
                newEmployeeLoan.is_special_rate = EmployeeLoans.is_special_rate;
                newEmployeeLoan.rate = EmployeeLoans.rate;
                newEmployeeLoan.pending = true;
                newEmployeeLoan.monthly_installment = EmployeeLoans.monthly_installment;
                newEmployeeLoan.is_auto_deduct = EmployeeLoans.is_auto_deduct;
                newEmployeeLoan.monthly_installment_with_intrest = EmployeeLoans.monthly_installment_with_intrest;
                newEmployeeLoan.intrest_amount = EmployeeLoans.intrest_amount;
                newEmployeeLoan.final_installment = EmployeeLoans.final_installment;
                newEmployeeLoan.no_of_installment = EmployeeLoans.no_of_installment;
                return validateSaveUpdate(context.SaveChanges());
            }
        }

        [OperationContract]
        public bool DeleteEmployeeLoans(EmployeeLoansView EmployeeLoans)
        {
            using (var context = new ERPEntities())
            {
                dtl_EmployeeLoans newEmployeeLoan = context.dtl_EmployeeLoans.FirstOrDefault(p => p.employee_loan_id == EmployeeLoans.employee_loan_id);
                newEmployeeLoan.delete_user_id = EmployeeLoans.delete_user_id;
                newEmployeeLoan.delete_datetime = EmployeeLoans.delete_datetime;
                newEmployeeLoan.is_delete = true;
                return validateSaveUpdate(context.SaveChanges());
            }
        }
        #endregion

        #region Auto Generated Numbers
        [OperationContract]
        public int GetLastLoanCatergoryNo()
        {
            int x = 0;
            try
            {
                using (var context = new ERPEntities())
                {
                    x = context.z_LoanCatergories.OrderByDescending(p => p.loan_no).FirstOrDefault(c => c.is_delete == false).loan_no;
                }
            }
            catch (Exception)
            { }
            return x + 1;
        }

        [OperationContract]
        public int GetLastLoanNo()
        {
            using (var context = new ERPEntities())
            {
                int x = 0;
                try
                {
                    x = context.z_Loan.OrderByDescending(p => p.loan_no).FirstOrDefault(c => c.is_delete == false).loan_no;
                }
                catch (Exception)
                { }
                return x + 1;
            }
        }
        #endregion

        #region Dilshan Loan

        #region CheckApprovedLoan
        [OperationContract]
        public IEnumerable<LoanApprovedView> GetApprovedActiveLoanForEmployee()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.LoanApprovedViews.Where(r => r.approved == true && (r.is_completed == false || r.is_completed == null)).ToList();
                    result.ForEach(q => context.Detach(q));
                    return result;
                }
                catch (Exception)
                {

                    return null;
                }
            }
        }

        #endregion

        #region EmployeeDeductionPercentageCheckCalculation

        [OperationContract]
        public IEnumerable<rpt_EPFEReturnView> GetEmpSalaryDetailsForLastmonth(Guid employee_id, Guid Period_ID)
        {
            using (var Context = new ERPEntities())
            {
                try
                {
                    var result = Context.rpt_EPFEReturnView.Where(c => c.employee_id == employee_id && c.period_id == Period_ID).ToList();
                    result.ForEach(e => Context.Detach(e));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }

        }

        //var result = context.EmployeeMedicalSummaryViews.Where(a => a.employee_id == empId && a.period_id == periodId && a.cat_id == catId).FirstOrDefault();
        //        //result.ForEach(e => context.Detach(e));
        //        return result;
        #endregion

        #region External Bank Loan

        [OperationContract]
        public IEnumerable<mas_ExtBankLoan> GetExternalLoanS()
        {
            try
            {
                using (var Context = new ERPEntities())
                {
                    var result = Context.mas_ExtBankLoan.Where(c => c.isdelete == false && c.isCanceled == false).ToList();
                    result.ForEach(d => Context.Detach(d));
                    return result;
                }
            }
            catch (Exception)
            {

                return null;
            }
        }

        [OperationContract]
        public IEnumerable<ExternalBankLoanView> GetExternalLoanViewForMainWindow()
        {
            try
            {
                using (var Context = new ERPEntities())
                {
                    var result = Context.ExternalBankLoanViews.Where(c => c.isdelete == false && c.isCanceled == false).ToList();
                    result.ForEach(d => Context.Detach(d));
                    return result;
                }
            }
            catch (Exception)
            {

                return null;
            }
        }

        [OperationContract]
        public IEnumerable<ExternalBankLoanView> GetExternalLoanView()
        {
            try
            {
                using (var Context = new ERPEntities())
                {
                    var result = Context.ExternalBankLoanViews.Where(c => c.isdelete == false && c.isCanceled == false && c.is_Hold == false).ToList();
                    result.ForEach(d => Context.Detach(d));
                    return result;
                }
            }
            catch (Exception)
            {

                return null;
            }
        }

        [OperationContract]
        public bool SaveExternalBankLoan(mas_ExtBankLoan ExtBankLoan)
        {
            try
            {
                using (var Context = new ERPEntities())
                {
                    Context.mas_ExtBankLoan.AddObject(ExtBankLoan);

                    var Count = Context.dtl_EmployeeRule.Count(c => c.employee_id == ExtBankLoan.employee_id && c.rule_id == new Guid("80d43a19-0687-49be-b984-da9ae524958a"));
                    if (Count == 0)
                    {
                        dtl_EmployeeRule AssignLoanRuleToEmployee = new dtl_EmployeeRule();
                        AssignLoanRuleToEmployee.rule_id = new Guid("80d43a19-0687-49be-b984-da9ae524958a");
                        AssignLoanRuleToEmployee.employee_id = (Guid)ExtBankLoan.employee_id;
                        AssignLoanRuleToEmployee.is_special = true;
                        AssignLoanRuleToEmployee.isactive = true;
                        AssignLoanRuleToEmployee.isdelete = false;
                        AssignLoanRuleToEmployee.special_amount = 0;
                        AssignLoanRuleToEmployee.save_user_id = ExtBankLoan.save_user_id;
                        AssignLoanRuleToEmployee.save_datetime = DateTime.Now;
                        Context.dtl_EmployeeRule.AddObject(AssignLoanRuleToEmployee);
                    }

                    return validateSaveUpdate(Context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool UpdateExternalBankLoan(mas_ExtBankLoan ExtBankLoan)
        {
            try
            {
                using (var Context = new ERPEntities())
                {
                    mas_ExtBankLoan exist = Context.mas_ExtBankLoan.FirstOrDefault(c => c.BankLoanID == ExtBankLoan.BankLoanID);
                    exist.bank_id = ExtBankLoan.bank_id;
                    exist.Bankbranch_id = ExtBankLoan.Bankbranch_id;
                    exist.bankAccountNo = ExtBankLoan.bankAccountNo;
                    exist.bankAccountName = ExtBankLoan.bankAccountName;
                    exist.isBank = ExtBankLoan.isBank;
                    exist.isCheque = ExtBankLoan.isCheque;
                    exist.is_Hold = ExtBankLoan.is_Hold;
                    exist.modified_user_id = ExtBankLoan.modified_user_id;
                    exist.modified_datetime = ExtBankLoan.modified_datetime;
                    return validateSaveUpdate(Context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool DeleteExternalBankLoan(mas_ExtBankLoan ExtBankLoan)
        {
            using (var Context = new ERPEntities())
            {
                try
                {
                    mas_ExtBankLoan Temp = Context.mas_ExtBankLoan.FirstOrDefault(c => c.BankLoanID == ExtBankLoan.BankLoanID);
                    Temp.isdelete = ExtBankLoan.isdelete;
                    Temp.delete_user_id = ExtBankLoan.delete_user_id;
                    Temp.delete_datetime = ExtBankLoan.delete_datetime;
                    return validateSaveUpdate(Context.SaveChanges());
                }
                catch (Exception)
                {

                    return false;
                }
            }
        }

        [OperationContract]
        public bool CancelExternalBankLoan(mas_ExtBankLoan ExtBankLoan)
        {
            using (var Context = new ERPEntities())
            {
                try
                {
                    mas_ExtBankLoan Temp = Context.mas_ExtBankLoan.FirstOrDefault(c => c.BankLoanID == ExtBankLoan.BankLoanID);
                    Temp.isCanceled = ExtBankLoan.isCanceled;
                    return validateSaveUpdate(Context.SaveChanges());
                }
                catch (Exception)
                {

                    return false;
                }
            }
        }

        [OperationContract]
        public IEnumerable<ProcessDetailsForExternalLoanView> GetProcessDetailsForExternalLoanView()
        {
            using (var Context = new ERPEntities())
            {
                try
                {
                    var result = Context.ProcessDetailsForExternalLoanViews.Where(c => c.isdelete == false && c.isCanceled == false && c.isComplete == false).ToList();
                    result.ForEach(d => Context.Detach(d));
                    return result;
                }
                catch (Exception)
                {

                    return null;
                }
            }
        }

        [OperationContract]

        public bool SaveExternalBankLoanProcess(List<ProcessDetailsForExternalLoanView> SaveexternalProcessList)
        {
            using (var Context = new ERPEntities())
            {
                try
                {
                    List<ProcessDetailsForExternalLoanView> tempListToCheckEmployeeCount = new List<ProcessDetailsForExternalLoanView>();

                    foreach (var item in SaveexternalProcessList)
                    {
                        trns_ExtBankLoan temp = new trns_ExtBankLoan();
                        temp.BankLoanID = item.BankLoanID;
                        temp.period_id = item.period_id;
                        temp.InstallmentAmount = item.InstallmentAmount;
                        temp.Installment_No = item.Installment_No;
                        temp.save_user_id = item.save_user_id;
                        temp.save_datetime = item.save_datetime;
                        Context.trns_ExtBankLoan.AddObject(temp);

                        mas_ExtBankLoan UpdateObj = Context.mas_ExtBankLoan.FirstOrDefault(c => c.employee_id == item.employee_id && c.BankLoanID == item.BankLoanID);
                        UpdateObj.isComplete = (bool)item.isComplete;

                        int TempCount = tempListToCheckEmployeeCount.Where(c => c.employee_id == item.employee_id).Count();
                        if (TempCount == 0)
                        {
                            tempListToCheckEmployeeCount.Add(item);

                            decimal TotalAmountOfEmployeeExternalBankLoan = (decimal)SaveexternalProcessList.Where(c => c.employee_id == item.employee_id).Select(d => d.InstallmentAmount).Sum();
                            dtl_EmployeeRule UpdateEmployeeLoanAmount = Context.dtl_EmployeeRule.FirstOrDefault(c => c.rule_id == new Guid("80d43a19-0687-49be-b984-da9ae524958a") && c.employee_id == item.employee_id);
                            UpdateEmployeeLoanAmount.special_amount = TotalAmountOfEmployeeExternalBankLoan;
                            UpdateEmployeeLoanAmount.modified_datetime = DateTime.Now;
                            UpdateEmployeeLoanAmount.modified_user_id = item.save_user_id;

                            trns_EmployeePeriodQunatity UpdatePeriodQuantity = Context.trns_EmployeePeriodQunatity.FirstOrDefault(c => c.employee_id == item.employee_id && c.rule_id == new Guid("80d43a19-0687-49be-b984-da9ae524958a") && c.period_id == item.period_id);
                            // AddLoanPeriodQuantity.employee_id = (Guid)item.employee_id;
                            // AddLoanPeriodQuantity.rule_id = new Guid("80d43a19-0687-49be-b984-da9ae524958a");
                            // AddLoanPeriodQuantity.period_id = (Guid)item.period_id;
                            UpdatePeriodQuantity.quantity = (decimal)1.00;
                            // AddLoanPeriodQuantity.is_proceed = false;
                            //AddLoanPeriodQuantity.isdelete = false;
                            UpdatePeriodQuantity.modified_datetime = DateTime.Now;
                            UpdatePeriodQuantity.modified_user_id = item.save_user_id;
                            //  Context.trns_EmployeePeriodQunatity.AddObject(AddLoanPeriodQuantity);
                        }
                    }
                    return validateSaveUpdate(Context.SaveChanges());
                }
                catch (Exception)
                {

                    return false;
                }
            }
        }

        #endregion

        #region Internal Bank Loan

        [OperationContract]
        public IEnumerable<InternalLoanMainView> GetInternalBankLoan()
        {
            using (var Context = new ERPEntities())
            {
                try
                {
                    var result = Context.InternalLoanMainViews.Where(c => c.is_delete == false && c.is_Completed == false && c.is_active == true && c.is_Approved == true && c.is_Pending == false && c.is_Rejected == false).ToList();
                    result.ForEach(d => Context.Detach(d));
                    return result;
                }
                catch (Exception)
                {

                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<mas_InternalLoanDetails> GetInternalLoans()
        {
            using (var Context = new ERPEntities())
            {
                try
                {
                    var result = Context.mas_InternalLoanDetails.Where(c => c.is_delete == false && c.is_Completed == false && c.is_active == true && c.is_Approved == true && c.is_Pending == false && c.is_Rejected == false).ToList();
                    result.ForEach(d => Context.Detach(d));
                    return result;
                }
                catch (Exception)
                {

                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<InternalLoanWithoutGurantorsView> GetInternalBankLoanWithoutGurantors()
        {
            using (var Context = new ERPEntities())
            {
                try
                {
                    var result = Context.InternalLoanWithoutGurantorsViews.Where(c => c.is_delete == false && c.is_Completed == false && c.is_active == true && c.is_Approved == true && c.is_Rejected == false && c.is_Pending == false && c.is_Hold == false).ToList();
                    result.ForEach(d => Context.Detach(d));
                    return result;
                }
                catch (Exception)
                {

                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<InternalLoanWithoutGurantorsView> GetInternalBankLoanWithoutGurantorsForMainWindow()
        {
            using (var Context = new ERPEntities())
            {
                try
                {
                    var result = Context.InternalLoanWithoutGurantorsViews.Where(c => c.is_delete == false && c.is_Completed == false && c.is_active == true && c.is_Approved == true && c.is_Rejected == false && c.is_Pending == false).ToList();
                    result.ForEach(d => Context.Detach(d));
                    return result;
                }
                catch (Exception)
                {

                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveInternalLoan(mas_InternalLoanDetails InternalLoan)
        {
            try
            {
                using (var Context = new ERPEntities())
                {
                    Context.mas_InternalLoanDetails.AddObject(InternalLoan);
                    IEnumerable<dtl_EmployeeSupervisor> ListSupervisors = Context.dtl_EmployeeSupervisor.Where(c => c.employee_id == InternalLoan.employee_id && c.module_id == new Guid("9A8922B9-BDFE-4198-904C-A19bCAAFB5EB"));
                    Guid Max = ListSupervisors.OrderByDescending(c => c.z_SupervisorLevel.supervisor_level).FirstOrDefault().supervisor_level_id;
                    foreach (var Supervisor in ListSupervisors)
                    {
                        trns_LoanSupervisorWiseApproval SaveObj = new trns_LoanSupervisorWiseApproval();
                        SaveObj.InternalLoanID = InternalLoan.InternalLoanID;
                        SaveObj.Supervisor_EmployeeID = Supervisor.supervisor_employee_id;
                        SaveObj.Is_Approved = false;
                        SaveObj.Is_Pending = false;
                        SaveObj.Is_Rejected = false;
                        SaveObj.Is_Active = Supervisor.supervisor_level_id == Max ? true : false;
                        Context.trns_LoanSupervisorWiseApproval.AddObject(SaveObj);
                    }
                    return validateSaveUpdate(Context.SaveChanges());
                }
            }
            catch (Exception)
            {

                return false;
            }
        }

        [OperationContract]
        public bool UpdateInternalLoan(mas_InternalLoanDetails ExistLoan)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    mas_InternalLoanDetails exist = context.mas_InternalLoanDetails.FirstOrDefault(c => c.InternalLoanID == ExistLoan.InternalLoanID);
                    exist.is_Hold = ExistLoan.is_Hold;
                    exist.modified_user_id = ExistLoan.modified_user_id;
                    exist.modified_datetime = ExistLoan.modified_datetime;
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        //[OperationContract]
        //public bool SaveInternalLoanProcess(List<trns_InternalLoanPayment> InternalLoanPaymentList,List<mas_InternalLoanDetails> UpdateRemainingAmount)
        //{
        //    try
        //    {
        //        using (var Context = new ERPEntities())
        //        {
        //            foreach (var item in InternalLoanPaymentList)
        //            {
        //                mas_InternalLoanDetails temp  = UpdateRemainingAmount.FirstOrDefault(c=> c.employee_id == item.EmployeeID && c.loan_id == item.loan_id);
        //                Context.trns_InternalLoanPayment.AddObject(item);
        //                mas_InternalLoanDetails updateob;
        //                updateob.LoanRemainingAmount = 
        //            }

        //            return validateSaveUpdate(Context.SaveChanges());
        //        }
        //    }
        //    catch (Exception)
        //    {               
        //        throw;
        //    }
        //}
        [OperationContract]
        public bool SaveInternalLoanProcess(List<InternalLoanProcessForView> SaveProcessList)
        {
            using (var Context = new ERPEntities())
            {
                try
                {
                    foreach (var item in SaveProcessList)
                    {
                        trns_InternalLoanPayment temp = new trns_InternalLoanPayment();
                        temp.int_loan_id = item.InternalLoanID;
                        temp.EmployeeID = item.EmployeeID;
                        temp.loan_id = item.loan_id;
                        temp.period_id = item.period_id;
                        temp.Installment_No = item.Installment_No;
                        temp.Payment_Amount = item.Payment_Amount;
                        temp.PaymentDate = item.PaymentDate;
                        temp.PaidAmount_WithoutIntrest = item.PaidAmount_WithoutIntrest;
                        temp.Paid_IntrestAmount = item.Paid_IntrestAmount;
                        temp.PaidAmount_WithoutIntrest = item.PaidAmount_WithoutIntrest;
                        temp.Paid_IntrestAmount = item.Paid_IntrestAmount;
                        temp.Loan_RemainingAmount = item.LoanRemainingAmount;
                        Context.trns_InternalLoanPayment.AddObject(temp);

                        mas_InternalLoanDetails UpdateObj = Context.mas_InternalLoanDetails.FirstOrDefault(c => c.employee_id == item.EmployeeID && c.loan_id == item.loan_id && c.is_active == true && c.InternalLoanID == item.InternalLoanID);
                        UpdateObj.LoanRemainingAmount = (decimal)item.LoanRemainingAmount;
                        UpdateObj.is_Completed = (bool)item.is_Completed;
                        UpdateObj.is_active = (bool)item.is_active;

                        //Guid GetRuleID = Context.dtl_LoanRules.FirstOrDefault(c => c.loan_id == item.loan_id).Rule_id;
                        //dtl_EmployeeRule UpdateEmployeeLoanAmount = Context.dtl_EmployeeRule.FirstOrDefault(c => c.rule_id == GetRuleID && c.employee_id == item.EmployeeID);
                        //UpdateEmployeeLoanAmount.special_amount = item.Payment_Amount;
                        //UpdateEmployeeLoanAmount.modified_datetime = DateTime.Now;
                        //UpdateEmployeeLoanAmount.modified_user_id = item.save_user_id;

                        //trns_EmployeePeriodQunatity UpdatePeriodQuantity = Context.trns_EmployeePeriodQunatity.FirstOrDefault(c => c.employee_id == item.EmployeeID && c.rule_id == GetRuleID && c.period_id == item.period_id);
                        //AddLoanPeriodQuantity.employee_id = item.EmployeeID;
                        //AddLoanPeriodQuantity.rule_id = GetRuleID;
                        // AddLoanPeriodQuantity.period_id = item.period_id;
                        //UpdatePeriodQuantity.quantity = (Decimal)1.00;
                        // AddLoanPeriodQuantity.is_proceed = false;
                        //AddLoanPeriodQuantity.isdelete = false;
                        //UpdatePeriodQuantity.modified_datetime = DateTime.Now;
                        //UpdatePeriodQuantity.modified_user_id = item.save_user_id;
                        //Context.trns_EmployeePeriodQunatity.AddObject(AddLoanPeriodQuantity);
                    }
                    return validateSaveUpdate(Context.SaveChanges());
                }
                catch (Exception)
                {

                    return false;
                }
            }
        }

        [OperationContract]
        public IEnumerable<InternalLoanProcessForView> GetAllLoanPaymentDetails()
        {
            using (var Context = new ERPEntities())
            {
                try
                {
                    var result = Context.InternalLoanProcessForViews.Where(c => c.is_active == true && c.is_Completed == false).ToList();
                    //result.ForEach(d => Context.Detach(d));
                    return result;
                }
                catch (Exception)
                {

                    return null;
                }
            }
        }

        #endregion

        #region Create Loan

        [OperationContract]
        public IEnumerable<LoanWithRulesView> GetLoansWithRules()
        {
            using (var Context = new ERPEntities())
            {
                try
                {
                    var result = Context.LoanWithRulesViews.Where(c => c.is_active == true && c.is_delete == false).ToList();
                    result.ForEach(d => Context.Detach(d));
                    return result;
                }
                catch (Exception)
                {

                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveCreateLoan(LoanWithRulesView Loans)
        {
            using (var Context = new ERPEntities())
            {
                try
                {
                    z_Loan temploan = new z_Loan();
                    z_LoanRule temploanRules = new z_LoanRule();
                    temploan.loan_id = Loans.loan_id;
                    temploan.loan_name = Loans.loan_name;
                    temploan.loan_Catergory_id = Loans.loan_Catergory_id;
                    temploan.maximum_amount = Loans.maximum_amount;
                    temploan.minimum_amount = Loans.minimum_amount;
                    temploan.minimum_time_duration_period = Loans.minimum_time_duration_period;
                    temploan.minimum_time_duration_type = Loans.minimum_time_duration_type;
                    temploan.maximum_time_duration_period = Loans.maximum_time_duration_period;
                    temploan.maximum_time_duration_type = Loans.maximum_time_duration_type;
                    temploan.save_datetime = Loans.save_datetime;
                    temploan.save_user_id = Loans.save_user_id;
                    temploan.is_delete = Loans.is_delete;
                    temploan.is_active = Loans.is_active;
                    temploan.default_rate = Loans.default_rate;
                    Context.z_Loan.AddObject(temploan);
                    temploanRules.loan_id = Loans.loan_id;
                    temploanRules.Emp_DeductionPercentageOfPayroll = (int)Loans.Emp_DeductionPercentageOfPayroll;
                    temploanRules.Emp_MaxguaranteedLoans = (int)Loans.Emp_MaxguaranteedLoans;
                    temploanRules.Emp_MinServicePeriod = (int)Loans.Emp_MinServicePeriod;
                    temploanRules.Emp_MinServicePeriod_Type = Loans.Emp_MinServicePeriod_Type;
                    temploanRules.Emp_NoLoansInProgress = (int)Loans.Emp_NoLoansInProgress;
                    temploanRules.Emp_NoOfGurantors = (int)Loans.Emp_NoOfGurantors;
                    temploanRules.Emp_Permanent = (bool)Loans.Emp_Permanent;
                    temploanRules.Guarantor_DeductionPercentageinPayroll = Loans.Guarantor_DeductionPercentageinPayroll;
                    temploanRules.Guarantor_MaxguaranteedLoans = Loans.Guarantor_MaxguaranteedLoans;
                    temploanRules.Guarantor_MinServicePeriod = Loans.Guarantor_MinServicePeriod;
                    temploanRules.Guarantor_MinServicePeriod_Type = Loans.Guarantor_MinServicePeriod_Type;
                    temploanRules.Guarantor_NoLoansInProgress = Loans.Guarantor_NoLoansInProgress;
                    temploanRules.Guarantor_Permanent = Loans.Guarantor_Permanent;
                    Context.z_LoanRule.AddObject(temploanRules);
                    dtl_LoanRules LoanRuleAssign = new dtl_LoanRules();
                    LoanRuleAssign.loan_id = Loans.loan_id;
                    LoanRuleAssign.Rule_id = Guid.NewGuid();
                    LoanRuleAssign.is_active = true;
                    LoanRuleAssign.is_delete = false;
                    LoanRuleAssign.save_datetime = Loans.save_datetime;
                    LoanRuleAssign.save_user_id = Loans.save_user_id;
                    Context.dtl_LoanRules.AddObject(LoanRuleAssign);
                    mas_CompanyRule NewCompanyRule = new mas_CompanyRule();
                    NewCompanyRule.rule_id = LoanRuleAssign.Rule_id;
                    NewCompanyRule.department_id = Guid.Empty;
                    NewCompanyRule.benifit_id = Guid.Empty;
                    NewCompanyRule.deduction_id = LoanRuleAssign.Rule_id;
                    NewCompanyRule.unit_id = Guid.Empty;
                    NewCompanyRule.rule_name = Loans.loan_name;
                    NewCompanyRule.minimum_value = Loans.minimum_amount;
                    NewCompanyRule.maximum_value = Loans.maximum_amount;
                    NewCompanyRule.rate = Loans.default_rate;
                    NewCompanyRule.isActive = true;
                    NewCompanyRule.isdelete = false;
                    NewCompanyRule.isEffecToTheCompanyVariable = false;
                    NewCompanyRule.save_datetime = Loans.save_datetime;
                    NewCompanyRule.save_user_id = Loans.save_user_id;
                    Context.mas_CompanyRule.AddObject(NewCompanyRule);
                    mas_Deduction NewDeductionRule = new mas_Deduction();
                    NewDeductionRule.deduction_id = LoanRuleAssign.Rule_id;
                    NewDeductionRule.deduction_name = Loans.loan_name;
                    NewDeductionRule.isActive = true;
                    NewDeductionRule.isdelete = false;
                    NewDeductionRule.save_datetime = DateTime.Now;
                    NewDeductionRule.save_user_id = Loans.save_user_id;
                    Context.mas_Deduction.AddObject(NewDeductionRule);

                    return validateSaveUpdate(Context.SaveChanges());
                }
                catch (Exception)
                {

                    return false;
                }
            }
        }

        [OperationContract]
        public bool DeleteLoan(LoanWithRulesView Loan)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    z_Loan newLoan = context.z_Loan.FirstOrDefault(p => p.loan_id == Loan.loan_id);
                    newLoan.delete_user_id = Loan.delete_user_id;
                    newLoan.delete_datetime = Loan.delete_datetime;
                    newLoan.is_delete = Loan.is_delete;
                    newLoan.is_active = Loan.is_active;
                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {

                    return false;
                }
            }
        }

        #endregion

        #region InternalLoanApproval

        [OperationContract]
        public IEnumerable<InternalLoanMainView> GetEmpLoanDetailsOfloggedSupervisor(Guid SupervisorID)
        {
            List<InternalLoanMainView> FilteredLoansForSupervisors = new List<InternalLoanMainView>();
            using (var Context = new ERPEntities())
            {
                try
                {
                    List<int?> temp = Context.trns_LoanSupervisorWiseApproval.Where(c => c.Is_Active == true && c.Supervisor_EmployeeID == SupervisorID).Select(c => c.InternalLoanID).ToList();
                    foreach (var item in temp)
                    {
                        InternalLoanMainView TempLoan = Context.InternalLoanMainViews.FirstOrDefault(c => c.InternalLoanID == item) as InternalLoanMainView;
                        FilteredLoansForSupervisors.Add(TempLoan);
                    }
                    return FilteredLoansForSupervisors;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<EmployeeInternalLoanWithSupervisorsView> GetEmployeeInternalLoanWithSupervisorsView()
        {
            using (var Context = new ERPEntities())
            {
                try
                {
                    var result = Context.EmployeeInternalLoanWithSupervisorsViews.ToList();
                    result.ForEach(d => Context.Detach(d));
                    return result;
                }
                catch (Exception)
                {

                    return null;
                }
            }
        }

        [OperationContract]
        public bool PenddingLoanApprove(EmployeeInternalLoanWithSupervisorsView ApproveLoanDetails)
        {
            using (var Context = new ERPEntities())
            {
                try
                {
                    mas_InternalLoanDetails UpdateObj = Context.mas_InternalLoanDetails.FirstOrDefault(c => c.InternalLoanID == ApproveLoanDetails.InternalLoanID);
                    UpdateObj.is_active = true;
                    UpdateObj.is_Approved = ApproveLoanDetails.Is_Approved;
                    UpdateObj.is_Pending = ApproveLoanDetails.Is_Pending;
                    UpdateObj.is_Rejected = ApproveLoanDetails.Is_Rejected;
                    UpdateObj.ApprovedorRejected_UserID = ApproveLoanDetails.ApprovedorRejected_UserID;
                    foreach (var response in UpdateObj.trns_LoanSupervisorWiseApproval)
                    {
                        if (response.Supervisor_EmployeeID == ApproveLoanDetails.Supervisor_EmployeeID)
                        {
                            response.Is_Approved = ApproveLoanDetails.Is_Approved;
                            if (ApproveLoanDetails.Comments == null || ApproveLoanDetails.Comments == string.Empty)
                                response.Comments = "Approved by the supervisor";
                            else
                                response.Comments = ApproveLoanDetails.Comments;
                            response.Is_Active = false;
                            response.Is_Pending = ApproveLoanDetails.Is_Pending;
                            response.Is_Rejected = ApproveLoanDetails.Is_Rejected;
                        }
                        else
                        {
                            response.Is_Approved = ApproveLoanDetails.Is_Approved;
                            response.Comments = "Automatically approved by the system";
                            response.Is_Active = false;
                            response.Is_Pending = ApproveLoanDetails.Is_Pending;
                            response.Is_Rejected = ApproveLoanDetails.Is_Rejected;
                        }
                    }
                    //Guid RuleID = Context.dtl_LoanRules.FirstOrDefault(c => c.loan_id == UpdateObj.loan_id).Rule_id;
                    //dtl_EmployeeRule AssignLoanRuleToEmployee = new dtl_EmployeeRule();
                    //AssignLoanRuleToEmployee.rule_id = RuleID;
                    //AssignLoanRuleToEmployee.employee_id = UpdateObj.employee_id;
                    //AssignLoanRuleToEmployee.is_special = true;
                    //AssignLoanRuleToEmployee.isactive = true;
                    //AssignLoanRuleToEmployee.isdelete = false;
                    //AssignLoanRuleToEmployee.special_amount = 0;
                    //AssignLoanRuleToEmployee.save_user_id = ApproveLoanDetails.ApprovedorRejected_UserID;
                    //AssignLoanRuleToEmployee.save_datetime = DateTime.Now;
                    //Context.dtl_EmployeeRule.AddObject(AssignLoanRuleToEmployee);

                    return validateSaveUpdate(Context.SaveChanges());
                }
                catch (Exception)
                {

                    return false;
                }
            }
        }

        [OperationContract]
        public bool PenddingLoanReject(EmployeeInternalLoanWithSupervisorsView RejectLoanDetails)
        {
            using (var Context = new ERPEntities())
            {
                try
                {
                    mas_InternalLoanDetails UpdateObj = Context.mas_InternalLoanDetails.FirstOrDefault(c => c.InternalLoanID == RejectLoanDetails.InternalLoanID);
                    UpdateObj.is_active = false;
                    UpdateObj.is_Approved = RejectLoanDetails.Is_Approved;
                    UpdateObj.is_Pending = RejectLoanDetails.Is_Pending;
                    UpdateObj.is_Rejected = RejectLoanDetails.Is_Rejected;
                    UpdateObj.ApprovedorRejected_UserID = RejectLoanDetails.ApprovedorRejected_UserID;
                    foreach (var response in UpdateObj.trns_LoanSupervisorWiseApproval)
                    {
                        if (response.Supervisor_EmployeeID == RejectLoanDetails.Supervisor_EmployeeID)
                        {
                            response.Is_Approved = RejectLoanDetails.Is_Approved;
                            if (RejectLoanDetails.Comments == null || RejectLoanDetails.Comments == string.Empty)
                                response.Comments = "Rejected By The Supervisor";
                            else
                                response.Comments = RejectLoanDetails.Comments;
                            response.Is_Active = false;
                            response.Is_Pending = RejectLoanDetails.Is_Pending;
                            response.Is_Rejected = RejectLoanDetails.Is_Rejected;
                        }
                        else
                        {
                            response.Is_Approved = RejectLoanDetails.Is_Approved;
                            response.Is_Active = false;
                            response.Comments = "Automatically Rejected By The System";
                            response.Is_Pending = RejectLoanDetails.Is_Pending;
                            response.Is_Rejected = RejectLoanDetails.Is_Rejected;
                        }
                    }
                    return validateSaveUpdate(Context.SaveChanges());

                }
                catch (Exception)
                {

                    return false;
                }
            }
        }

        [OperationContract]
        public bool PendingLoanTransfer(EmployeeInternalLoanWithSupervisorsView TransferDetails)
        {
            using (var Context = new ERPEntities())
            {
                try
                {
                    int GetSupervisorLevel = Context.dtl_EmployeeSupervisor.FirstOrDefault(c => c.supervisor_employee_id == TransferDetails.Supervisor_EmployeeID).z_SupervisorLevel.supervisor_level;
                    mas_InternalLoanDetails UpdateObj = Context.mas_InternalLoanDetails.FirstOrDefault(c => c.InternalLoanID == TransferDetails.InternalLoanID);
                    IEnumerable<trns_LoanSupervisorWiseApproval> TransfredLoan = UpdateObj.trns_LoanSupervisorWiseApproval.ToList();
                    IEnumerable<dtl_EmployeeSupervisor> employeesSupervisors = Context.dtl_EmployeeSupervisor.Where(c => c.module_id == new Guid("9A8922B9-BDFE-4198-904C-A19BCAAFB5EB") && c.employee_id == UpdateObj.employee_id && c.supervisor_employee_id != TransferDetails.Supervisor_EmployeeID).OrderByDescending(c => c.z_SupervisorLevel.supervisor_level);
                    IEnumerable<dtl_EmployeeSupervisor> FilteredEmpSupervisorsLevelWise = employeesSupervisors.Where(c => c.z_SupervisorLevel.supervisor_level != GetSupervisorLevel).OrderByDescending(c => c.z_SupervisorLevel.supervisor_level);
                    IEnumerable<dtl_EmployeeSupervisor> employeesSupervisorswithsamelevelsupervisor = Context.dtl_EmployeeSupervisor.Where(c => c.module_id == new Guid("9A8922B9-BDFE-4198-904C-A19BCAAFB5EB") && c.employee_id == UpdateObj.employee_id && c.z_SupervisorLevel.supervisor_level == GetSupervisorLevel).OrderByDescending(c => c.z_SupervisorLevel.supervisor_level);
                    int count = FilteredEmpSupervisorsLevelWise.FirstOrDefault(c => TransfredLoan.Count(d => d.Supervisor_EmployeeID == c.supervisor_employee_id && d.Is_Approved == false && d.Is_Pending == false && d.Is_Rejected == false) > 0).z_SupervisorLevel.supervisor_level;

                    foreach (var item in FilteredEmpSupervisorsLevelWise.Where(c => c.z_SupervisorLevel.supervisor_level == count))
                    {
                        trns_LoanSupervisorWiseApproval update = Context.trns_LoanSupervisorWiseApproval.FirstOrDefault(c => c.Supervisor_EmployeeID == item.supervisor_employee_id && c.InternalLoanID == TransferDetails.InternalLoanID);
                        update.Is_Pending = false;
                        update.Is_Rejected = false;
                        update.Is_Active = true;
                        update.Is_Approved = false;
                    }
                    foreach (var item in employeesSupervisorswithsamelevelsupervisor)
                    {
                        trns_LoanSupervisorWiseApproval temp = Context.trns_LoanSupervisorWiseApproval.FirstOrDefault(c => c.Supervisor_EmployeeID == item.supervisor_employee_id && c.InternalLoanID == TransferDetails.InternalLoanID);
                        temp.Is_Pending = TransferDetails.Is_Pending;
                        temp.Is_Active = TransferDetails.Is_Active;
                        if (item.supervisor_employee_id == TransferDetails.Supervisor_EmployeeID)
                        {
                            if (TransferDetails.Comments == null || TransferDetails.Comments == string.Empty)
                                temp.Comments = "Supervisor Transferred The Response...";
                            else
                                temp.Comments = TransferDetails.Comments;
                        }
                        else
                            temp.Comments = "Automatically Transferred The Response From The System...";
                    }
                    return validateSaveUpdate(Context.SaveChanges());
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        #endregion

        #region ManualLoanPayment

        [OperationContract]
        public bool SaveManualPayment(List<trns_ManualLoanPayment> ManualPayment)
        {
            using (var Context = new ERPEntities())
            {
                try
                {
                    List<trns_ManualLoanPayment> SaveObj = new List<trns_ManualLoanPayment>();
                    foreach (var item in ManualPayment)
                    {
                        mas_InternalLoanDetails UpdateObj = Context.mas_InternalLoanDetails.FirstOrDefault(c => c.InternalLoanID == item.InternalLoanID);
                        if (item.Is_Guarantor == true)
                        {
                            UpdateObj.LoanRemainingAmount = UpdateObj.LoanRemainingAmount - item.payingAmountWithoutIntrest;
                            if (UpdateObj.LoanRemainingAmount == 0)
                            {
                                UpdateObj.is_active = false;
                                UpdateObj.is_Completed = true;
                            }
                        }
                        else
                        {
                            UpdateObj.LoanRemainingAmount = UpdateObj.LoanRemainingAmount - item.payingAmountWithoutIntrest;
                            UpdateObj.is_active = false;
                            UpdateObj.is_Completed = true;
                        }
                        Context.trns_ManualLoanPayment.AddObject(item);
                    }
                    return validateSaveUpdate(Context.SaveChanges());
                }
                catch (Exception)
                {

                    return false;
                }
            }
        }

        #endregion

        #endregion

        [OperationContract]
        public IEnumerable<GetPayPeriodLoan_PROC_Result> GetLoanPayPeriod(string GuidID)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.GetPayPeriodLoan_PROC(GuidID).ToList();
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }

        }

        #region Get Loan Remaining Amounts
        [OperationContract]
        public IEnumerable<trns_InternalLoanPayment> GetLoanRemainingAmount(Guid PeriodID)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.trns_InternalLoanPayment.Where(c => c.period_id == PeriodID).ToList();
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }

        }
        #endregion

        #endregion

        #region Title
        [OperationContract]
        public IEnumerable<z_Title> GetTitle()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.z_Title.ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {

                return null;
            }
        }
        #endregion

        #region Blood
        [OperationContract]
        public IEnumerable<z_blood_type> GetBloodTypes()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.z_blood_type.ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }
        [OperationContract]
        public IEnumerable<dtl_blood_type> GetBlood()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.dtl_blood_type.ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }
        [OperationContract]
        public bool bloodSave(dtl_blood_type blood)
        {
            try
            {
                if (blood != null)
                {
                    using (var context = new ERPEntities())
                    {
                        context.dtl_blood_type.AddObject(blood);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }
            return false;
        }
        [OperationContract]
        public bool bloodUpdate(dtl_blood_type blood)
        {
            try
            {
                if (blood != null)
                {
                    using (var context = new ERPEntities())
                    {
                        dtl_blood_type newBlood = context.dtl_blood_type.FirstOrDefault(c => c.employee_id == blood.employee_id);
                        newBlood.blood_id = blood.blood_id;
                        newBlood.description = blood.description;
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
                else
                    return false;
            }
            catch (Exception)
            {

                return false;

            }
        }
        #endregion


        #endregion

        #region GetPayrollSummary
        [OperationContract]
        IEnumerable<GetEmployeeMonthlyPayrollSumarry_Result> GetEmployeePayrollSummarry_RPT(string periodID, string companyBranchID, string departmentID, string designationID, string sectionID, string gradeID, string employeeID, string paymetMethordId)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.GetEmployeeMonthlyPayrollSumarry(periodID, companyBranchID, departmentID, designationID, sectionID, gradeID, employeeID, paymetMethordId).ToList();
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }
        #endregion


        #region Employee Multiple Bank Payments
        [OperationContract]
        public IEnumerable<trns_EmployeeMultiplePayments> GetEmployeeMultiplePayments()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.trns_EmployeeMultiplePayments.ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {

                return null;
            }
        }
        //[OperationContract]
        //public IEnumerable<EmployeeMulitiplePaymentView> GetMultiplePaymentView()
        //{
        //    try
        //    {
        //        using (var context = new ERPEntities())
        //        {
        //            var result = context.EmployeeMulitiplePaymentViews.ToList();
        //            result.ForEach(c => context.Detach(c));
        //            return result;
        //        }
        //    }
        //    catch
        //    {
        //        return null;
        //    }
        //}
        [OperationContract]
        public bool SaveMultiplePayments(trns_EmployeeMultiplePayments EmployeeMultiplePayments)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    context.trns_EmployeeMultiplePayments.AddObject(EmployeeMultiplePayments);
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {

                return false;
            }
        }


        #endregion


        #region EPF Status
        [OperationContract]
        public IEnumerable<dtl_member_status> GetMemberStatus()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.dtl_member_status.ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }
        [OperationContract]
        public bool SaveMemberSatus(dtl_member_status Member)
        {
            try
            {
                if (Member != null)
                    using (var context = new ERPEntities())
                    {
                        context.dtl_member_status.AddObject(Member);
                        return context.SaveChanges() == 1;
                    }
            }
            catch (Exception)
            {

                return false;
            }
            return false;
        }
        [OperationContract]
        public bool UpdateMemberStatus(dtl_member_status Member)
        {
            try
            {
                if (Member != null)
                    using (var context = new ERPEntities())
                    {
                        dtl_member_status newMember = context.dtl_member_status.FirstOrDefault(c => c.employee_id == Member.employee_id);
                        newMember.member_status = Member.member_status;
                        return context.SaveChanges() == 1;
                    }

            }
            catch (Exception)
            {

                return false;
            }
            return false;
        }
        #endregion

        #region Employee Manager

        [OperationContract]
        public IEnumerable<z_SupervisorLevel> GetEmpoyeeSupervisorLevels()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.z_SupervisorLevel.ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }

            }
        }


        [OperationContract]
        public IEnumerable<dtl_EmployeeSupervisor> GetEmployeeManager()
        {
            using (var context = new ERPEntities())
            {
                var result = context.dtl_EmployeeSupervisor.ToList();
                result.ForEach(p => context.Detach(p));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<dtl_EmployeeSupervisor> GetEmployeeManagerByModule(Guid Module)
        {
            using (var context = new ERPEntities())
            {
                var result = context.dtl_EmployeeSupervisor.Where(c => c.module_id == Module).ToList();
                result.ForEach(p => context.Detach(p));
                return result;
            }
        }

        [OperationContract]
        public bool SaveEmployeeManager(List<dtl_EmployeeSupervisor> EmployeeManager)
        {
            try
            {
                int valid = 0;

                if (EmployeeManager != null)
                {
                    foreach (var item in EmployeeManager)
                    {
                        using (var context = new ERPEntities())
                        {
                            context.dtl_EmployeeSupervisor.AddObject(item);
                            valid += context.SaveChanges();
                        }

                    }
                }
                if (EmployeeManager.Count == valid)
                    return true;
                else
                    return false;
            }
            catch (Exception)
            {
                return false;
            }
        }


        [OperationContract]
        public bool DeleteEmployeeManger(List<dtl_EmployeeSupervisor> EmployeeManager)
        {
            try
            {
                int valid = 0;

                if (EmployeeManager != null)
                {
                    foreach (var item in EmployeeManager)
                    {
                        using (var context = new ERPEntities())
                        {

                            dtl_EmployeeSupervisor old = context.dtl_EmployeeSupervisor.FirstOrDefault(c => c.module_id == item.module_id && c.employee_id == item.employee_id && c.supervisor_employee_id == item.supervisor_employee_id);
                            context.dtl_EmployeeSupervisor.DeleteObject(old);
                            valid += context.SaveChanges();
                            try
                            {
                                List<trns_EmployeeApprovedAttendance> NewTrns = context.trns_EmployeeApprovedAttendance.Where(c => c.Manager_ID == item.supervisor_employee_id).ToList();
                                foreach (trns_EmployeeApprovedAttendance NewTrnsitem in NewTrns)
                                {
                                    trns_EmployeeApprovedAttendance oldTrns = context.trns_EmployeeApprovedAttendance.Where(c => c.Manager_ID == NewTrnsitem.Manager_ID && c.Employee_ID == NewTrnsitem.Employee_ID).FirstOrDefault();
                                    context.trns_EmployeeApprovedAttendance.DeleteObject(oldTrns);
                                }

                                context.SaveChanges();
                            }
                            catch (Exception)
                            {
                            }

                        }

                    }
                }
                if (EmployeeManager.Count == valid)
                    return true;
                else
                    return false;
            }
            catch (Exception)
            {

                return false;
            }

        }
        #endregion

        #region Act
        [OperationContract]
        public bool SaveActBenifts(mas_Benifit Benifits)
        {
            try
            {
                if (Benifits != null)
                {
                    using (var context = new ERPEntities())
                    {
                        context.mas_Benifit.AddObject(Benifits);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }
            return false;
        }
        [OperationContract]
        public bool SaveActDeductions(mas_Deduction Deductions)
        {
            try
            {
                if (Deductions != null)
                {
                    using (var context = new ERPEntities())
                    {
                        context.mas_Deduction.AddObject(Deductions);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {

                return false;
            }
            return false;
        }
        [OperationContract]
        public IEnumerable<dtl_OtConfiguration> GetOtConfiguration()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.dtl_OtConfiguration.ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }
        [OperationContract]
        public IEnumerable<dtl_LateConfiguration> GetLateConfiguration()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.dtl_LateConfiguration.ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {

                return null;
            }
        }
        [OperationContract]
        public IEnumerable<dtl_NoPayConfiguration> GetNoPayConfiguration()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.dtl_NoPayConfiguration.ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {

                return null;
            }
        }
        [OperationContract]
        public IEnumerable<z_EmployeeAct> GetEMployeeAct()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.z_EmployeeAct.ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }
        [OperationContract]
        public bool UpdateEmployeeRulesForAct(dtl_EmployeeRule UpdateEmployeeRule)
        {
            try
            {
                if (UpdateEmployeeRule != null)
                {
                    using (var context = new ERPEntities())
                    {
                        dtl_EmployeeRule newEmployeeRule = context.dtl_EmployeeRule.FirstOrDefault(c => c.employee_id == UpdateEmployeeRule.employee_id && c.rule_id == UpdateEmployeeRule.rule_id);

                        newEmployeeRule.special_amount = UpdateEmployeeRule.special_amount;
                        newEmployeeRule.is_special = UpdateEmployeeRule.is_special;
                        newEmployeeRule.isactive = UpdateEmployeeRule.isactive;
                        newEmployeeRule.isdelete = UpdateEmployeeRule.isdelete;
                        newEmployeeRule.modified_user_id = UpdateEmployeeRule.modified_user_id;
                        newEmployeeRule.modified_datetime = UpdateEmployeeRule.modified_datetime;
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
                else
                    return false;
            }
            catch (Exception)
            {

                return false;

            }
        }
        [OperationContract]
        public bool DeleteEmployeeRulesForAct(dtl_EmployeeRule DeleteEmployeeRule)
        {
            try
            {
                if (DeleteEmployeeRule != null)
                {
                    using (var context = new ERPEntities())
                    {
                        dtl_EmployeeRule newEmployeeRule = context.dtl_EmployeeRule.FirstOrDefault(c => c.employee_id == DeleteEmployeeRule.employee_id && c.rule_id == DeleteEmployeeRule.rule_id);
                        newEmployeeRule.isdelete = DeleteEmployeeRule.isdelete;
                        newEmployeeRule.modified_user_id = DeleteEmployeeRule.delete_user_id;
                        newEmployeeRule.modified_datetime = DeleteEmployeeRule.delete_datetime;
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
                else
                    return false;
            }
            catch (Exception)
            {

                return false;

            }
        }
        [OperationContract]
        public IEnumerable<dtl_EmployeeRule> GetEmployeeRuleForAct(Guid EmpID)
        {
            using (var context = new ERPEntities())
            {
                var result = context.dtl_EmployeeRule.Where(c => c.employee_id == EmpID).ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }

        }
        #endregion

        #region Lieu Leave
        [OperationContract]
        bool LieuProcess()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.LieuLeavesViews.Where(c => c.is_processed == false);

                    foreach (var item in result)
                    {
                        dtl_AttendanceData newAttendance = new dtl_AttendanceData();
                        newAttendance.emp_id = item.emp_id;
                        newAttendance.attend_datetime = new DateTime(item.lieu_date.Year, item.lieu_date.Month, item.lieu_date.Day, item.in_time.Value.Hours, item.in_time.Value.Minutes, item.in_time.Value.Seconds);
                        newAttendance.device_id = Guid.Empty;
                        newAttendance.year = item.lieu_date.Year;
                        newAttendance.month = item.lieu_date.Month;
                        newAttendance.day = item.lieu_date.Day;
                        newAttendance.hour = item.in_time.Value.Hours;
                        newAttendance.minute = item.in_time.Value.Minutes;
                        newAttendance.second = item.in_time.Value.Seconds;
                        newAttendance.attend_date = newAttendance.attend_datetime;
                        newAttendance.attend_time = item.in_time;
                        newAttendance.attendance_data_id = Guid.NewGuid();

                        context.dtl_AttendanceData.AddObject(newAttendance);

                        newAttendance = new dtl_AttendanceData();
                        newAttendance.emp_id = item.emp_id;
                        newAttendance.attend_datetime = new DateTime(item.lieu_date.Year, item.lieu_date.Month, item.lieu_date.Day, item.out_time.Value.Hours, item.out_time.Value.Minutes, item.out_time.Value.Seconds);
                        newAttendance.device_id = Guid.Empty;
                        newAttendance.year = item.lieu_date.Year;
                        newAttendance.month = item.lieu_date.Month;
                        newAttendance.day = item.lieu_date.Day;
                        newAttendance.hour = item.out_time.Value.Hours;
                        newAttendance.minute = item.out_time.Value.Minutes;
                        newAttendance.second = item.out_time.Value.Seconds;
                        newAttendance.attend_date = newAttendance.attend_datetime;
                        newAttendance.attend_time = item.out_time;
                        newAttendance.attendance_data_id = Guid.NewGuid();

                        context.dtl_AttendanceData.AddObject(newAttendance);

                        if (item.holiday_work_day_in != null)
                        {
                            var AttendanceResult = context.dtl_AttendanceData.Where(c => c.attend_datetime <= item.holiday_work_day_out && c.attend_datetime >= item.holiday_work_day_in);

                            foreach (var Attenditem in AttendanceResult)
                            {
                                context.dtl_AttendanceData.DeleteObject(Attenditem);
                            }

                        }

                    }
                    return validateSaveUpdate(context.SaveChanges());

                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        bool DeleteLieuLeave(trns_LieuLeaves LieuLeave)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    trns_LieuLeaves newLieuLeave = context.trns_LieuLeaves.FirstOrDefault(c => c.employee_id == LieuLeave.employee_id && c.lieu_date == LieuLeave.lieu_date && c.is_processed == false);
                    context.trns_LieuLeaves.DeleteObject(newLieuLeave);
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }
        [OperationContract]
        bool SaveLieuLeave(trns_LieuLeaves LieuLeave)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (context.trns_LieuLeaves.Count(c => c.employee_id == LieuLeave.employee_id && c.lieu_date == LieuLeave.lieu_date && c.is_processed == false) > 0)
                    {
                        trns_LieuLeaves newLieuLeave = context.trns_LieuLeaves.FirstOrDefault(c => c.employee_id == LieuLeave.employee_id && c.lieu_date == LieuLeave.lieu_date);
                        newLieuLeave.shift_id = LieuLeave.shift_id;
                        newLieuLeave.save_user_id = LieuLeave.save_user_id;
                        newLieuLeave.holiday_work_day_in = LieuLeave.holiday_work_day_in;
                        newLieuLeave.holiday_work_day_out = LieuLeave.holiday_work_day_out;
                        newLieuLeave.is_processed = LieuLeave.is_processed;
                        newLieuLeave.period_id = LieuLeave.period_id;
                    }
                    else
                        context.trns_LieuLeaves.AddObject(LieuLeave);
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }
        [OperationContract]
        IEnumerable<EmployeeSearchView> GetHolidayEmployees(DateTime From, DateTime To)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var HolidayEmp = context.trns_EmployeeAttendance.Where(c => c.attend_date >= From && c.attend_date <= To && c.is_holiday == true);
                    var EmployeeSearch = context.EmployeeSearchViews.Where(l => HolidayEmp.Count(x => l.employee_id == x.employee_id) > 0).ToList();
                    EmployeeSearch.ForEach(c => context.Detach(c));
                    return EmployeeSearch.OrderBy(c => c.emp_id);

                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        IEnumerable<trns_EmployeeAttendance> GetDateRangeEmployeeAttendances(DateTime From, DateTime To, Guid EmployeeID)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var Result = context.trns_EmployeeAttendance.Where(c => c.attend_date >= From && c.attend_date <= To && c.is_holiday == true && c.employee_id == EmployeeID).ToList();
                    Result.ForEach(c => context.Detach(c));
                    return Result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        IEnumerable<LieuLeavesView> GetLieuData()
        {
            try
            {
                using (var contex = new ERPEntities())
                {
                    var result = contex.LieuLeavesViews.Where(c => c.is_processed == false).ToList();
                    result.ForEach(c => contex.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }
        #endregion

        //#endregion

        #region HR Mods
        #region Visitor Information
        #region Visitor
        #region z_visitor
        [OperationContract]
        public IEnumerable<z_Visitor> GetVisitors()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_Visitor.Where(i => i.isdelete == false).ToList();
                result.ForEach(p => context.Detach(p));
                return result;
            }
        }
        [OperationContract]
        public bool SaveVisitors(z_Visitor Visitors)
        {
            try
            {
                if (Visitors != null)
                {
                    using (var context = new ERPEntities())
                    {
                        context.z_Visitor.AddObject(Visitors);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }
            return false;
        }
        [OperationContract]
        public bool UpdateVisitors(z_Visitor Visitors)
        {
            try
            {
                if (Visitors != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_Visitor newVisitors = context.z_Visitor.FirstOrDefault(p => p.visitor_id == Visitors.visitor_id);
                        newVisitors.visitor_name = Visitors.visitor_name;
                        newVisitors.nic_no = Visitors.nic_no;
                        newVisitors.contact_no = Visitors.contact_no;
                        newVisitors.company_name = Visitors.company_name;
                        newVisitors.company_address = Visitors.company_name;
                        newVisitors.contact_no = Visitors.contact_no;
                        newVisitors.modified_user_id = Visitors.modified_user_id;
                        newVisitors.modified_datetime = Visitors.modified_datetime;
                        return validateSaveUpdate(context.SaveChanges());

                    }
                }
            }
            catch (Exception)
            {
                return false;
            }
            return false;
        }
        [OperationContract]
        public bool DeleteVisitors(z_Visitor Visitors)
        {
            try
            {
                if (Visitors != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_Visitor newVisitors = context.z_Visitor.FirstOrDefault(i => i.visitor_id == Visitors.visitor_id);
                        newVisitors.isdelete = true;
                        newVisitors.delete_datetime = Visitors.delete_datetime;
                        newVisitors.delete_user_id = Visitors.delete_user_id;
                        return context.SaveChanges() == 1;
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }
            return false;
        }
        #endregion

        #region dtl_visitor

        [OperationContract]
        public IEnumerable<dtl_VisitDetails> GetVisitDetail()
        {
            using (var context = new ERPEntities())
            {
                var result = context.dtl_VisitDetails.Where(i => i.isdelete == false).ToList();
                result.ForEach(p => context.Detach(p));
                return result;
            }
        }
        [OperationContract]
        public bool SaveVisitDetails(dtl_VisitDetails VisitDetails)
        {
            try
            {
                if (VisitDetails != null)
                {
                    using (var context = new ERPEntities())
                    {
                        context.dtl_VisitDetails.AddObject(VisitDetails);
                        return context.SaveChanges() == 1;
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }
            return false;
        }
        [OperationContract]
        public bool UpdateDetails(dtl_VisitDetails VisitDetails)
        {
            try
            {
                if (VisitDetails != null)
                {
                    using (var context = new ERPEntities())
                    {
                        dtl_VisitDetails newVisitDetail = context.dtl_VisitDetails.FirstOrDefault(p => p.visitor_detail_id == VisitDetails.visitor_detail_id);
                        newVisitDetail.emp_id = VisitDetails.emp_id;
                        newVisitDetail.visitor_id = VisitDetails.visitor_id;
                        newVisitDetail.visit_intime = VisitDetails.visit_intime;
                        newVisitDetail.visit_reason = VisitDetails.visit_reason;
                        newVisitDetail.visitor_belongings = VisitDetails.visitor_belongings;
                        newVisitDetail.visit_outtime = VisitDetails.visit_outtime;
                        newVisitDetail.visitor_card_number = VisitDetails.visitor_card_number;
                        newVisitDetail.modified_user_id = VisitDetails.modified_user_id;
                        newVisitDetail.modified_datetime = VisitDetails.modified_datetime;
                        return context.SaveChanges() == 1;

                    }
                }
            }
            catch (Exception)
            {
                return false;
            }
            return false;
        }
        [OperationContract]
        public bool DeleteDetails(dtl_VisitDetails VisitDetails)
        {
            try
            {
                if (VisitDetails != null)
                {
                    using (var context = new ERPEntities())
                    {
                        dtl_VisitDetails newVisitDetail = context.dtl_VisitDetails.FirstOrDefault(p => p.visitor_detail_id == VisitDetails.visitor_detail_id);
                        newVisitDetail.isdelete = true;
                        newVisitDetail.delete_user_id = VisitDetails.delete_user_id;
                        newVisitDetail.delete_datetime = VisitDetails.delete_datetime;
                        return context.SaveChanges() == 1;
                    }
                }

            }
            catch (Exception)
            { return false; }
            return false;
        }
        #endregion
        #endregion
        #endregion
        #endregion

        #region Mihiri

        [OperationContract]
        public IEnumerable<OldConfirmationDate> GetConfirmationDetails()
        {
            using (var context = new ERPEntities())
            {
                var results = context.OldConfirmationDates.ToList();
                results.ForEach(e => context.Detach(e));
                return results;
            }
        }


        [OperationContract]
        public IEnumerable<GetBirthDaysWeek> GetBirthday()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.GetBirthDaysWeeks.ToList();
                    result.ForEach(u => context.Detach(u));
                    return result;
                }
            }
            catch (Exception)
            {

            }
            return null;
        }

        [OperationContract]
        public IEnumerable<GetConfirmationDetail> GetConfirmation()
        {
            using (var context = new ERPEntities())
            {
                var result = context.GetConfirmationDetails.ToList();
                result.ForEach(u => context.Detach(u));
                return result;
            }
        }

        [OperationContract]
        public void saveNotification(z_Notifications Notification)
        {
            if (Notification != null)
            {
                using (var context = new ERPEntities())
                {
                    z_Notifications newNotification = new z_Notifications();
                    newNotification.Notification_Id = Notification.Notification_Id;
                    newNotification.Notification = Notification.Notification;
                    newNotification.Status = Notification.Status;
                    newNotification.ViewDate = Notification.ViewDate;
                    newNotification.DateofNot = Notification.DateofNot;
                    newNotification.Title = Notification.Title;

                    context.z_Notifications.AddObject(newNotification);
                    context.SaveChanges();
                }
            }
        }

        [OperationContract]
        public IEnumerable<z_Notifications> GetNotifications()
        {
            using (var context = new ERPEntities())
            {
                var results = context.z_Notifications.ToList();
                results.ForEach(e => context.Detach(e));
                return results;
            }
        }



        [OperationContract]
        public bool updateNotification(z_Notifications NotificationUpdate)
        {
            bool isSucess = false;

            try
            {
                using (var context = new ERPEntities())
                {
                    z_Notifications newNotificationUpdate = context.z_Notifications.First(c => c.Notification_Id == NotificationUpdate.Notification_Id);
                    newNotificationUpdate.Notification_Id = NotificationUpdate.Notification_Id;
                    newNotificationUpdate.Notification = NotificationUpdate.Notification;
                    newNotificationUpdate.Title = NotificationUpdate.Title;
                    newNotificationUpdate.ViewDate = NotificationUpdate.ViewDate;
                    newNotificationUpdate.Status = NotificationUpdate.Status;
                    newNotificationUpdate.DateofNot = NotificationUpdate.DateofNot;

                    isSucess = validateSaveUpdate(context.SaveChanges());
                    return isSucess;
                }
            }
            catch (Exception)
            {
                return isSucess = false;
            }
            return isSucess;
        }

        #endregion

        #region Chandima

        #region PayRoll

        #region Company Rules Window

        [OperationContract]
        public IEnumerable<z_Department> GetDepartment()
        {

            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.z_Department.Where(c => c.isdelete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {

                    return null;
                }
            }

        }

        [OperationContract]
        public IEnumerable<mas_CompanyRule> GetCompany()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.mas_CompanyRule.Where(c => c.isdelete == false).OrderBy(c => c.rule_name).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {

                    return null;
                }
            }
        }

        public IEnumerable<CompanyRuleView> GetCompanyRuleDetails()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.CompanyRuleViews.Where(c => c.isActive == true && c.isdelete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {

                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveCompanyRule(mas_CompanyRule NewRule)
        {
            if (NewRule != null)
            {
                try
                {
                    using (var context = new ERPEntities())
                    {
                        context.mas_CompanyRule.AddObject(NewRule);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
                catch (Exception)
                {

                    return false;
                }
            }
            return false;
        }//if not save or no update remove mas_CompanyRule table relationship of mas_benifit and mas_deduction 

        [OperationContract]
        public bool UpdateCompanyRule(mas_CompanyRule UpdateRule)
        {
            bool IsSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    mas_CompanyRule current = context.mas_CompanyRule.FirstOrDefault(c => c.rule_id == UpdateRule.rule_id);
                    if (current != null)
                    {
                        current.rule_name = UpdateRule.rule_name;
                        current.department_id = UpdateRule.department_id;
                        current.benifit_id = UpdateRule.benifit_id;
                        current.deduction_id = UpdateRule.deduction_id;
                        current.isActive = UpdateRule.isActive;
                        current.status = UpdateRule.status;
                        current.ext_acc_no = UpdateRule.ext_acc_no;
                        current.nonext_acc_no = UpdateRule.nonext_acc_no;
                        int i = context.SaveChanges();
                        return IsSuccess = validateSaveUpdate(i);
                    }
                }
            }
            catch (Exception)
            {
                return IsSuccess;
            }
            return IsSuccess;
        }

        [OperationContract]
        public bool DeleteCompanyRule(mas_CompanyRule DeleteRule)
        {
            bool IsSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.mas_CompanyRule.FirstOrDefault(c => c.rule_id == DeleteRule.rule_id);
                    if (result != null)
                    {
                        result.isdelete = true;
                        result.isActive = false;
                        result.delete_user_id = DeleteRule.delete_user_id;
                        result.delete_datetime = DeleteRule.delete_datetime;
                        int i = context.SaveChanges();
                        return IsSuccess = validateSaveUpdate(i);
                    }
                }
            }
            catch (Exception)
            {

                return IsSuccess;
            }
            return IsSuccess;
        }

        #region Chandima Fix Rule Details

        [OperationContract]
        public bool SaveFixRule(z_Datamigration_Configuration fixRule)
        {
            bool isSuccess = false;
            using (var context = new ERPEntities())
            {
                try
                {
                    if (fixRule != null)
                    {
                        z_Datamigration_Configuration updatefix = context.z_Datamigration_Configuration.FirstOrDefault(z => z.rule_id == fixRule.rule_id);
                        if (updatefix != null)
                        {
                            if (fixRule.is_active == true)
                            {
                                updatefix.is_update = true;
                                int i = context.SaveChanges();
                                isSuccess = validateSaveUpdate(i);
                                return isSuccess;
                            }

                            if (fixRule.is_active == false)
                            {
                                context.DeleteObject(updatefix);
                                int i = context.SaveChanges();
                                return isSuccess = validateSaveUpdate(i);

                            }
                        }
                        if (updatefix == null)
                        {
                            if (fixRule.is_active == true)
                            {
                                z_Datamigration_Configuration update = new z_Datamigration_Configuration();
                                update = fixRule;
                                context.z_Datamigration_Configuration.AddObject(update);
                                int i = context.SaveChanges();
                                isSuccess = validateSaveUpdate(i);
                                return isSuccess;
                            }
                            else
                            {
                                return isSuccess;
                            }
                        }
                    }
                }
                catch (Exception)
                {
                    return isSuccess;
                }
            }
            return isSuccess;
        }

        [OperationContract]
        public IEnumerable<z_Datamigration_Configuration> GetFix()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.z_Datamigration_Configuration.Where(c => c.is_active == true).ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {

                return null;
            }
        }

        #endregion



        #endregion

        #region Company Variable Window

        [OperationContract]
        public IEnumerable<z_CompanyVariable> GetCompanyVariable()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.z_CompanyVariable.ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<payroll_CompanyVariable_View> GetEmployeeVariable()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.payroll_CompanyVariable_View.Where(c => c.isdelete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {

                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveCompanyVariable(IEnumerable<dtl_EmployeeCompanyVariable> EmployeeVariableList)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    foreach (var item in EmployeeVariableList)
                    {
                        if (context.dtl_EmployeeCompanyVariable.Count(c => c.employee_id == item.employee_id && c.company_variableID == item.company_variableID && c.isdelete == true) > 0)
                        {
                            dtl_EmployeeCompanyVariable tempDel = context.dtl_EmployeeCompanyVariable.FirstOrDefault(c => c.employee_id == item.employee_id && c.company_variableID == item.company_variableID && c.isdelete == true);
                            tempDel.isdelete = false;
                            tempDel.delete_datetime = null;
                            tempDel.delete_user_id = null;
                            tempDel.modified_datetime = item.save_datetime;
                            tempDel.modified_user_id = item.save_user_id;
                        }
                        else
                        {
                            context.dtl_EmployeeCompanyVariable.AddObject(item);
                        }
                    }
                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        [OperationContract]
        public bool DeleteCompanyVariable(IEnumerable<dtl_EmployeeCompanyVariable> DeleteList)
        {
            bool IsSuccess = false;
            using (var context = new ERPEntities())
            {
                try
                {
                    foreach (var item in DeleteList)
                    {
                        dtl_EmployeeCompanyVariable Result = context.dtl_EmployeeCompanyVariable.FirstOrDefault(c => c.company_variableID == item.company_variableID && c.employee_id == item.employee_id);
                        Result.isdelete = item.isdelete;
                        Result.delete_datetime = item.delete_datetime;
                        Result.delete_user_id = item.delete_user_id;
                    }
                    int i = context.SaveChanges();
                    return IsSuccess = validateSaveUpdate(i);
                }
                catch (Exception)
                {
                    return IsSuccess;
                }
            }
        }

        #endregion

        #endregion

        #endregion

        #region Vidura

        #region Web Portal

        #region DashBoard Maintenance

        #region Events

        [OperationContract]
        public IEnumerable<z_Events> GetEvents()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.z_Events.Where(c => c.Is_Visible == true).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<EmployeeEventsView> GetEmployeeEvents()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.EmployeeEventsViews.Where(c => c.is_active == true).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveEmployeeEvents(z_Events Event)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    if (context.z_Events.Count(c => c.Event_ID == Event.Event_ID) > 0)
                    {
                        z_Events EventObj = context.z_Events.FirstOrDefault(c => c.Event_ID == Event.Event_ID);
                        EventObj.Heading = Event.Heading;
                        EventObj.Description = Event.Description;
                        EventObj.ModifiedUser_ID = EventObj.SaveUser_ID;

                        foreach (var employee in Event.dtl_EmployeeEvents)
                        {
                            if (context.dtl_EmployeeEvents.Count(c => c.Event_ID == employee.Event_ID && c.Employee_ID == employee.Employee_ID) > 0)
                            {
                                dtl_EmployeeEvents temp = context.dtl_EmployeeEvents.FirstOrDefault(c => c.Event_ID == employee.Event_ID && c.Employee_ID == employee.Employee_ID);
                                temp.is_active = employee.is_active;
                            }
                            else
                            {
                                dtl_EmployeeEvents temp = new dtl_EmployeeEvents();
                                temp.Employee_ID = employee.Employee_ID;
                                temp.Event_ID = employee.Event_ID;
                                temp.is_active = employee.is_active;
                                context.dtl_EmployeeEvents.AddObject(temp);
                            }
                        }

                        return validateSaveUpdate(context.SaveChanges());
                    }
                    else
                    {
                        context.z_Events.AddObject(Event);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        [OperationContract]
        public bool DeleteEvent(z_Events Event)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    z_Events DeleteObj = context.z_Events.FirstOrDefault(c => c.Event_ID == Event.Event_ID);
                    DeleteObj.Is_Visible = false;

                    //foreach (var Employee in context.dtl_EmployeeEvents.Where(c => c.Event_ID == Event.Event_ID))
                    //{
                    //    Employee.is_active = false;
                    //}

                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        #endregion

        #region Meetings

        [OperationContract]
        public IEnumerable<z_Meetings> GetMeetings()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.z_Meetings.Where(c => c.is_visible == true).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<EmployeeMeetingsView> GetEmployeeMeetings()
        {
            using (var context = new ERPEntities())
            {
                try
                {

                    var result = context.EmployeeMeetingsViews.Where(c => c.is_active == true).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveEmployeeMeetings(z_Meetings Meeting)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    if (context.z_Meetings.Count(c => c.Meeting_ID == Meeting.Meeting_ID) > 0)
                    {
                        z_Meetings MeetingObj = context.z_Meetings.FirstOrDefault(c => c.Meeting_ID == Meeting.Meeting_ID);
                        MeetingObj.Name = Meeting.Name;
                        MeetingObj.Venue = Meeting.Venue;
                        MeetingObj.Participants = Meeting.Participants;
                        MeetingObj.Meeting_Date = Meeting.Meeting_Date;
                        MeetingObj.Meeting_Start = Meeting.Meeting_Start;
                        MeetingObj.Meeting_End = Meeting.Meeting_End;

                        foreach (var employee in Meeting.dtl_EmployeeMeetings)
                        {
                            if (context.dtl_EmployeeMeetings.Count(c => c.Meeting_ID == employee.Meeting_ID && c.Employee_ID == employee.Employee_ID) > 0)
                            {
                                dtl_EmployeeMeetings temp = context.dtl_EmployeeMeetings.FirstOrDefault(c => c.Meeting_ID == employee.Meeting_ID && c.Employee_ID == employee.Employee_ID);
                                temp.is_active = employee.is_active;
                            }
                            else
                            {
                                dtl_EmployeeMeetings temp = new dtl_EmployeeMeetings();
                                temp.Employee_ID = employee.Employee_ID;
                                temp.Meeting_ID = employee.Meeting_ID;
                                temp.is_active = employee.is_active;
                                context.dtl_EmployeeMeetings.AddObject(temp);
                            }
                        }

                        return validateSaveUpdate(context.SaveChanges());
                    }
                    else
                    {
                        context.z_Meetings.AddObject(Meeting);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        [OperationContract]
        public bool DeleteMeeting(z_Meetings Meeting)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    z_Meetings DeleteObj = context.z_Meetings.FirstOrDefault(c => c.Meeting_ID == Meeting.Meeting_ID);
                    DeleteObj.is_visible = false;

                    foreach (var Employee in context.dtl_EmployeeMeetings.Where(c => c.Meeting_ID == Meeting.Meeting_ID))
                    {
                        Employee.is_active = false;
                    }

                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        #endregion

        #region News

        [OperationContract]
        public IEnumerable<z_News> GetNews()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.z_News.Where(c => c.Is_Visible == true).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveNews(z_News News)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    if (context.z_News.Count(c => c.News_ID == News.News_ID) == 0)
                    {
                        context.z_News.AddObject(News);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                    else
                    {
                        z_News UpdateObj = context.z_News.FirstOrDefault(c => c.News_ID == News.News_ID);
                        UpdateObj.Heading = News.Heading;
                        UpdateObj.Image = News.Image;
                        UpdateObj.ModifiedUser_Id = News.SaveUser_ID;

                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        [OperationContract]
        public bool DeleteNews(z_News News)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    z_News DeleteObj = context.z_News.FirstOrDefault(c => c.News_ID == News.News_ID);
                    DeleteObj.Is_Visible = false;
                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        #endregion

        #endregion

        #endregion

        #region Slip Transfer
        [OperationContract]

        public IEnumerable<SlipTransferView> GetSlipTransferView(Guid Payperiod, Guid companybranchid)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.SlipTransferViews.Where(c => c.period_id == Payperiod && c.companyBranch_id == companybranchid).ToList();
                    result.ForEach(r => context.Detach(r));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }
        #endregion

        #region Fake Attendance Process

        #region DefaultMaxOtOperations
        [OperationContract]
        public bool DefaultMaxOtSave(IEnumerable<dtl_DefaultMaxOT> defaultMaxOt)
        {
            try
            {
                if (defaultMaxOt != null)
                {

                    using (var context = new ERPEntities())
                    {

                        foreach (var item in defaultMaxOt)
                        {
                            context.dtl_DefaultMaxOT.AddObject(item);

                        }
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }
            return false;
        }

        [OperationContract]
        public bool DefaultMaxOtUpdate(IEnumerable<dtl_DefaultMaxOT> defaultMaxOt)
        {
            try
            {
                if (defaultMaxOt != null)
                {
                    using (var context = new ERPEntities())
                    {
                        foreach (var item in defaultMaxOt)
                        {
                            dtl_DefaultMaxOT newMaxOT = context.dtl_DefaultMaxOT.FirstOrDefault(c => c.empID == item.empID && c.dayID == item.dayID);
                            //newMaxOT.empID = item.empID;
                            //newMaxOT.dayID = item.dayID;
                            newMaxOT.day_of_week = item.day_of_week;
                            newMaxOT.maxMoOT = item.maxMoOT;
                            newMaxOT.maxEvOT = item.maxEvOT;
                            newMaxOT.isActive = item.isActive;
                        }
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
                else
                    return false;
            }
            catch (Exception)
            {

                return false;

            }
        }

        [OperationContract]
        public IEnumerable<dtl_DefaultMaxOT> GetDeafaultMaxOT()
        {
            using (var context = new ERPEntities())
            {
                var result = context.dtl_DefaultMaxOT.ToList();
                result.ForEach(c => context.Detach(c));
                return result;
            }
        }
        #endregion

        #region MaxOtApprovedEmployeeOperations

        [OperationContract]
        public bool MaxOtApprovedEmployeesSave(dtl_MaxOtApprovedEmployees maxOtApprovedEmp)
        {
            try
            {
                if (maxOtApprovedEmp != null)
                {
                    using (var context = new ERPEntities())
                    {
                        context.dtl_MaxOtApprovedEmployees.AddObject(maxOtApprovedEmp);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }
            return false;
        }

        [OperationContract]
        public bool MaxOtApprovedEmployeesUpdate(dtl_MaxOtApprovedEmployees maxOtApprovedEmp)
        {
            try
            {
                if (maxOtApprovedEmp != null)
                {
                    using (var context = new ERPEntities())
                    {
                        dtl_MaxOtApprovedEmployees newMaxOtEmp = context.dtl_MaxOtApprovedEmployees.FirstOrDefault(c => c.empID == maxOtApprovedEmp.empID);
                        // newMaxOtEmp.empID = maxOtApprovedEmp.empID;
                        newMaxOtEmp.isMaxOtApproved = maxOtApprovedEmp.isMaxOtApproved;
                        newMaxOtEmp.isDefault = maxOtApprovedEmp.isDefault;
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
                else
                    return false;
            }
            catch (Exception)
            {

                return false;

            }
        }

        [OperationContract]
        public IEnumerable<dtl_MaxOtApprovedEmployees> GetMaxOtApprovedEmployees()
        {
            using (var context = new ERPEntities())
            {
                var result = context.dtl_MaxOtApprovedEmployees.ToList();
                result.ForEach(c => context.Detach(c));
                return result;
            }
        }

        #endregion

        #region RandomMaxOtOperations
        [OperationContract]
        public bool RandomMaxOtSave(IEnumerable<trns_RandomMaxOT> randomMaxOt)
        {
            try
            {
                if (randomMaxOt != null)
                {
                    using (var context = new ERPEntities())
                    {
                        foreach (var item in randomMaxOt)
                        {
                            context.trns_RandomMaxOT.AddObject(item);
                        }

                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }
            return false;
        }

        [OperationContract]
        public bool RandomMaxOtUpdate(IEnumerable<trns_RandomMaxOT> randomMaxOt)
        {
            try
            {
                if (randomMaxOt != null)
                {
                    using (var context = new ERPEntities())
                    {
                        foreach (var item in randomMaxOt)
                        {
                            trns_RandomMaxOT newMaxOT = context.trns_RandomMaxOT.FirstOrDefault(c => c.empId == item.empId && c.date == item.date);
                            // newMaxOT.empId = item.empId;
                            //newMaxOT.date = item.date;
                            newMaxOT.dayId = item.dayId;
                            newMaxOT.maxMoOT = item.maxMoOT;
                            newMaxOT.maxEvOT = item.maxEvOT;
                            newMaxOT.isActive = item.isActive;
                        }

                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
                else
                    return false;
            }
            catch (Exception)
            {

                return false;

            }
        }

        [OperationContract]
        public IEnumerable<trns_RandomMaxOT> GetRandomMaxOt()
        {
            try
            {
                using (var Context = new ERPEntities())
                {
                    var result = Context.trns_RandomMaxOT.ToList();
                    result.ForEach(c => Context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {

                return null;
            }
        }

        #endregion

        #region MaxOtAttendanceDataOpertaions

        [OperationContract]
        public IEnumerable<sp_Get_Max_Ot_Attendance_Data_Result> GetMaxOtAttendance_PROC(string periodID, string empID)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.sp_Get_Max_Ot_Attendance_Data(periodID, empID).ToList();
                    result.ForEach(r => context.Detach(r));
                    return result;
                }
            }
            catch (Exception)
            {

                return null;
            }
        }

        public IEnumerable<dtl_MaxOtAttendanceData> GetMaxOtAttendanceData()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.dtl_MaxOtAttendanceData.ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {

                return null;
            }
        }

        List<dtl_MaxOtAttendanceData> SaveMaxOtAttendanceData = new List<dtl_MaxOtAttendanceData>();
        List<dtl_MaxOtAttendanceData> UpdateMaxOtAttendanceData = new List<dtl_MaxOtAttendanceData>();

        public void SaveMaxOtList()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    if (SaveMaxOtAttendanceData != null && SaveMaxOtAttendanceData.Count > 0)
                        foreach (var item in SaveMaxOtAttendanceData)
                        {
                            context.dtl_MaxOtAttendanceData.AddObject(item);
                        }
                    context.SaveChanges();
                }
                catch (Exception)
                {
                    throw;
                }

            }
        }

        public void UpdateMaxOtList()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (UpdateMaxOtAttendanceData != null && UpdateMaxOtAttendanceData.Count > 0)
                        foreach (var maxOtAttendance in UpdateMaxOtAttendanceData)
                        {
                            dtl_MaxOtAttendanceData newMaxOtAttendanceData = context.dtl_MaxOtAttendanceData.FirstOrDefault(c => c.EmpID == maxOtAttendance.EmpID && c.Date == maxOtAttendance.Date && c.DayID == maxOtAttendance.DayID && c.ShiftID == maxOtAttendance.ShiftID && c.RosterID == maxOtAttendance.RosterID);
                            newMaxOtAttendanceData.IsRosterEmployee = maxOtAttendance.IsRosterEmployee;
                            newMaxOtAttendanceData.Act_InTime = maxOtAttendance.Act_InTime;
                            newMaxOtAttendanceData.Act_OutTime = maxOtAttendance.Act_OutTime;
                            newMaxOtAttendanceData.Fake_In = maxOtAttendance.Fake_In;
                            newMaxOtAttendanceData.Fake_Out = maxOtAttendance.Fake_Out;
                            newMaxOtAttendanceData.Fake_M_OT = maxOtAttendance.Fake_M_OT;
                            newMaxOtAttendanceData.Fake_E_OT = maxOtAttendance.Fake_E_OT;
                            newMaxOtAttendanceData.Extra_M_OT = maxOtAttendance.Extra_M_OT;
                            newMaxOtAttendanceData.Extra_E_OT = maxOtAttendance.Extra_E_OT;
                        }
                    context.SaveChanges();
                }
            }
            catch (Exception)
            {

                throw;
            }
        }
        public void MaxOtAttendanceDataSave(dtl_MaxOtAttendanceData maxOtAttendance)
        {
            try
            {
                SaveMaxOtAttendanceData.Add(maxOtAttendance);

            }
            catch (Exception)
            {

                throw;
            }
        }


        public void MaxOtAttendanceDataUpdate(dtl_MaxOtAttendanceData maxOtAttendance)
        {
            try
            {
                UpdateMaxOtAttendanceData.Add(maxOtAttendance);

            }
            catch (Exception)
            {

                throw;
            }
        }

        #endregion

        #region Stored Procedures

        //public bool GetYoungWorker(string empID)
        //{
        //    try
        //    {
        //        using (var context = new ERPEntities())
        //        {
        //            var result = context.sp_Get_young_worker_data(empID).FirstOrDefault();
        //            return (bool)result.young;
        //        }
        //    }
        //    catch (Exception)
        //    {

        //        throw;
        //    }
        //}

        public sp_get_employee_shift_data_Result GetEmployeeShiftData(string empID, string dayID)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.sp_get_employee_shift_data(empID, dayID).FirstOrDefault();
                    return result;
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        public sp_GetMaxOtApprovedEmployeeData_Result GetMaxOtApprovedEmployeeData(string empID)
        {
            try
            {
                using (var conetxt = new ERPEntities())
                {
                    var result = conetxt.sp_GetMaxOtApprovedEmployeeData(Convert.ToInt32(empID)).FirstOrDefault();
                    return result;
                };
            }
            catch (Exception)
            {

                throw;
            }
        }

        public sp_GetEmployeeMaxOtValues_Result GetEmployeeMaxOtVales(string empID, string dayID, DateTime date)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.sp_GetEmployeeMaxOtValues(empID, dayID, date);
                    if (result != null)
                    {
                        return result.FirstOrDefault();
                    }
                    else
                    {
                        return null;

                    }
                };
            }
            catch (Exception)
            {

                return null;
            }
        }
        #endregion

        public dtl_MaxOtAttendanceData InTime(TimeSpan InTime, string empID, string dayID, DateTime date, dtl_Shift Shift, dtl_EmployeeAttendance EmployeeShift, sp_GetMaxOtApprovedEmployeeData_Result maxApprovedEmp, sp_GetEmployeeMaxOtValues_Result maxOtValues)
        {


            dtl_MaxOtAttendanceData maxOtData = new dtl_MaxOtAttendanceData();
            try
            {

                TimeSpan OtCheck1 = new TimeSpan(01, 00, 00);
                TimeSpan OtCheck2 = new TimeSpan(00, 30, 00);
                TimeSpan OtCheck3 = new TimeSpan(00, 00, 00);
                string Sunday = "9d27cbfe-4a8c-47bc-978e-8ab5476e9b67";
                TimeSpan actualIn = InTime;
                TimeSpan fakeInTime = System.DateTime.MinValue.TimeOfDay;
                // sp_get_employee_shift_data_Result shiftDetail;
                //sp_GetMaxOtApprovedEmployeeData_Result maxApprovedEmp;
                //sp_GetEmployeeMaxOtValues_Result maxOtValues;
                bool IsMaxOtEmployee;
                bool ISDefault;
                TimeSpan maxMorningOttime;
                TimeSpan shiftIn = new TimeSpan();
                TimeSpan fakeMorningOT = new TimeSpan(00, 00, 00);

                #region Young Worker
                //if ((bool)GetYoungWorker(empID) == true)
                //{
                //    //shiftDetail = this.GetEmployeeShiftData(empID, dayID);
                //    // maxApprovedEmp = this.GetMaxOtApprovedEmployeeData(empID);
                //    // maxOtValues = this.GetEmployeeMaxOtVales(empID, dayID, date);
                //    //IsMaxOtEmployee = maxApprovedEmp.isMaxOtApproved;
                //    // ISDefault = maxApprovedEmp.isDefault;
                //    //s maxMorningOttime = maxOtValues.maxMoOT;
                //    shiftIn = Shift != null ? (TimeSpan)Shift.in_time : new TimeSpan();

                //    if (dayID == Sunday)
                //    {

                //        maxOtData.EmpID = empID;
                //        maxOtData.Date = date;
                //        maxOtData.DayID = new Guid(dayID);
                //        maxOtData.ShiftID = Shift != null ? Shift.shift_category_id.Value : Guid.Empty;
                //        maxOtData.RosterID = Guid.Empty;
                //        maxOtData.IsRosterEmployee = EmployeeShift.is_roster_employee;
                //        maxOtData.Act_InTime = actualIn;
                //        maxOtData.Fake_In = OtCheck3;
                //        maxOtData.Fake_M_OT = OtCheck3;
                //        maxOtData.Extra_M_OT = OtCheck3;
                //        return maxOtData;

                //    }
                //    else
                //    {


                //        maxOtData.EmpID = empID;
                //        maxOtData.Date = date;
                //        maxOtData.DayID = new Guid(dayID);
                //        maxOtData.ShiftID = Shift.shift_category_id.Value;
                //        maxOtData.RosterID = Guid.Empty;
                //        maxOtData.IsRosterEmployee = EmployeeShift.is_roster_employee;
                //        maxOtData.Act_InTime = actualIn;
                //        maxOtData.Fake_In = actualIn;
                //        maxOtData.Fake_M_OT = fakeMorningOT;
                //        maxOtData.Extra_M_OT = fakeMorningOT;
                //        return maxOtData;
                //    }
                //}
                #endregion

                // else
                // {
                //shiftDetail = this.GetEmployeeShiftData(empID, dayID);
                maxApprovedEmp = this.GetMaxOtApprovedEmployeeData(empID);
                maxOtValues = this.GetEmployeeMaxOtVales(empID, dayID, date);
                IsMaxOtEmployee = maxApprovedEmp.isMaxOtApproved;
                ISDefault = maxApprovedEmp.isDefault;
                maxMorningOttime = maxOtValues.maxMoOT;
                shiftIn = Shift != null ? (TimeSpan)Shift.in_time : new TimeSpan();

                if (maxMorningOttime == OtCheck3 && dayID == Sunday && actualIn != OtCheck3)
                {
                    maxOtData.EmpID = empID;
                    maxOtData.Date = date;
                    maxOtData.DayID = new Guid(dayID);
                    maxOtData.ShiftID = Shift != null ? Shift.shift_category_id.Value : Guid.Empty;
                    maxOtData.RosterID = Guid.Empty;
                    maxOtData.IsRosterEmployee = EmployeeShift.is_roster_employee;
                    maxOtData.Act_InTime = actualIn;
                    maxOtData.Fake_In = OtCheck3;
                    maxOtData.Fake_M_OT = OtCheck3;
                    maxOtData.Extra_M_OT = OtCheck3;
                    return maxOtData;

                }


                // }
                maxOtData.EmpID = empID;
                maxOtData.Date = date;
                maxOtData.DayID = new Guid(dayID);
                maxOtData.ShiftID = Shift.shift_category_id.Value;
                maxOtData.RosterID = Guid.Empty;
                maxOtData.IsRosterEmployee = EmployeeShift.is_roster_employee;
                maxOtData.Act_InTime = actualIn;
                maxOtData.Fake_In = actualIn;
                maxOtData.Fake_M_OT = fakeMorningOT;
                maxOtData.Extra_M_OT = fakeMorningOT;
                return maxOtData;

            }
            catch (Exception)
            {

                throw;
            }
        }

        public TimeSpan OutTime(TimeSpan OutTime, dtl_MaxOtAttendanceData MaxOt, dtl_Shift shift, IEnumerable<dtl_MaxOtAttendanceData> maxotData)
        {
            try
            {

                TimeSpan OtCheck3 = new TimeSpan(00, 00, 00);
                string Sunday = "9d27cbfe-4a8c-47bc-978e-8ab5476e9b67";
                TimeSpan YoungWorkerOut = new TimeSpan(00, 00, 00);
                TimeSpan MaxOtOut = new TimeSpan(00, 00, 00);
                TimeSpan OtCheck1 = new TimeSpan(01, 00, 00);
                TimeSpan OtCheck2 = new TimeSpan(00, 30, 00);
                TimeSpan actualOut = OutTime;
                TimeSpan fakeOutTime = System.DateTime.MinValue.TimeOfDay;
                //sp_get_employee_shift_data_Result shiftDetail;
                sp_GetMaxOtApprovedEmployeeData_Result maxApprovedEmp;
                sp_GetEmployeeMaxOtValues_Result maxOtValues;
                bool IsMaxOtEmployee;
                bool ISDefault;
                TimeSpan maxEveningOttime;
                TimeSpan shiftOut;
                TimeSpan fakeEveningOT;

                #region Young Worker Out Time
                //if ((bool)GetYoungWorker(MaxOt.EmpID) == true)
                //{
                //    shiftOut = shift != null ? (TimeSpan)shift.out_time : new TimeSpan();

                //    if (MaxOt.DayID.ToString() == Sunday && actualOut != OtCheck3)
                //    {



                //        TimeSpan actualIn = (TimeSpan)MaxOt.Act_InTime;
                //        MaxOt.Act_OutTime = actualOut;
                //        MaxOt.Fake_Out = OtCheck3;
                //        MaxOt.Fake_E_OT = OtCheck3;
                //        MaxOt.Extra_E_OT = actualIn.Subtract(actualOut).Duration();

                //        if (maxotData != null && maxotData.Where(c => c.EmpID == MaxOt.EmpID && c.Date == MaxOt.Date && c.DayID == MaxOt.DayID && c.ShiftID == MaxOt.ShiftID).ToList().Count == 1)
                //        {
                //            //if (MaxOtAttendanceDataUpdate(MaxOt))
                //            //{
                //            MaxOtAttendanceDataUpdate(MaxOt);
                //            return (TimeSpan)MaxOt.Fake_Out;
                //            //}
                //            //else
                //            //{
                //            //    fakeOutTime = actualOut;
                //            //    return fakeOutTime;
                //            //}

                //        }
                //        else
                //        {
                //            //if (MaxOtAttendanceDataSave(MaxOt))
                //            //{
                //            MaxOtAttendanceDataSave(MaxOt);
                //            return (TimeSpan)MaxOt.Fake_Out;
                //            //}
                //            //else
                //            //{
                //            fakeOutTime = actualOut;
                //            return fakeOutTime;
                //            //}
                //        }


                //    }



                //    if (DayOfWeek.Saturday == MaxOt.Date.DayOfWeek)
                //    {
                //        YoungWorkerOut = new TimeSpan(01, new Random().Next(16), new Random().Next(60));

                //        if (actualOut > YoungWorkerOut)
                //        {
                //            MaxOt.Act_OutTime = actualOut;
                //            MaxOt.Fake_Out = YoungWorkerOut;
                //            MaxOt.Fake_E_OT = new TimeSpan(00, 00, 00);
                //            MaxOt.Extra_E_OT = actualOut.Subtract(shiftOut).Duration();
                //            MaxOt.IsYoungWorker = true;

                //            if (maxotData != null && maxotData.Where(c => c.EmpID == MaxOt.EmpID && c.Date == MaxOt.Date && c.DayID == MaxOt.DayID && c.ShiftID == MaxOt.ShiftID).ToList().Count == 1)
                //            {
                //                //if ()
                //                //{
                //                MaxOtAttendanceDataUpdate(MaxOt);
                //                return (TimeSpan)MaxOt.Fake_Out;
                //                //}
                //                //else
                //                //{
                //                //    fakeOutTime = actualOut;
                //                //    return fakeOutTime;
                //                //}

                //            }
                //            else
                //            {
                //                //if ()
                //                //{
                //                MaxOtAttendanceDataSave(MaxOt);
                //                return (TimeSpan)MaxOt.Fake_Out;
                //                //}
                //                //else
                //                //{
                //                //    fakeOutTime = actualOut;
                //                //    return fakeOutTime;
                //                //}
                //            }
                //        }

                //        else
                //        {

                //            fakeOutTime = actualOut;
                //            return fakeOutTime;

                //        }
                //    }
                //    else
                //    {
                //        YoungWorkerOut = new TimeSpan(04, new Random().Next(30, 46), new Random().Next(60));
                //        if (actualOut > YoungWorkerOut)
                //        {
                //            MaxOt.Act_OutTime = actualOut;
                //            MaxOt.Fake_Out = YoungWorkerOut;
                //            MaxOt.Fake_E_OT = new TimeSpan(00, 00, 00);
                //            MaxOt.Extra_E_OT = actualOut.Subtract(shiftOut).Duration();
                //            MaxOt.IsYoungWorker = true;

                //            if (maxotData != null && maxotData.Where(c => c.EmpID == MaxOt.EmpID && c.Date == MaxOt.Date && c.DayID == MaxOt.DayID && c.ShiftID == MaxOt.ShiftID).ToList().Count == 1)
                //            {
                //                //if (MaxOtAttendanceDataUpdate(MaxOt))
                //                //{
                //                MaxOtAttendanceDataUpdate(MaxOt);
                //                return (TimeSpan)MaxOt.Fake_Out;
                //                //}
                //                //else
                //                //{
                //                //    fakeOutTime = actualOut;
                //                //    return fakeOutTime;
                //                //}

                //            }
                //            else
                //            {
                //                //if (MaxOtAttendanceDataSave(MaxOt))
                //                //{
                //                MaxOtAttendanceDataSave(MaxOt);
                //                return (TimeSpan)MaxOt.Fake_Out;
                //                //}
                //                //else
                //                //{
                //                fakeOutTime = actualOut;
                //                return fakeOutTime;
                //                //}
                //            }
                //        }
                //        else
                //        {
                //            fakeOutTime = actualOut;
                //            return fakeOutTime;
                //        }


                //    }


                //}

                #endregion


                // else
                //   {
                //shiftDetail = this.GetEmployeeShiftData(MaxOt.EmpID, MaxOt.DayID.ToString());
                maxApprovedEmp = this.GetMaxOtApprovedEmployeeData(MaxOt.EmpID);
                maxOtValues = this.GetEmployeeMaxOtVales(MaxOt.EmpID, MaxOt.DayID.ToString(), MaxOt.Date);
                IsMaxOtEmployee = maxApprovedEmp.isMaxOtApproved;
                ISDefault = maxApprovedEmp.isDefault;
                maxEveningOttime = maxOtValues.maxEvOT;
                shiftOut = shift != null ? (TimeSpan)shift.out_time : new TimeSpan();



                if (maxEveningOttime == OtCheck3 && MaxOt.DayID.ToString() == Sunday && actualOut != OtCheck3)
                {

                    TimeSpan actualIn = (TimeSpan)MaxOt.Act_InTime;
                    MaxOt.Act_OutTime = actualOut;
                    MaxOt.Fake_Out = OtCheck3;
                    MaxOt.Fake_E_OT = OtCheck3;
                    MaxOt.Extra_E_OT = actualIn.Subtract(actualOut).Duration();

                    if (maxotData != null && maxotData.Where(c => c.EmpID == MaxOt.EmpID && c.Date == MaxOt.Date && c.DayID == MaxOt.DayID && c.ShiftID == MaxOt.ShiftID).ToList().Count == 1)
                    {
                        //if (MaxOtAttendanceDataUpdate(MaxOt))
                        //{
                        MaxOtAttendanceDataUpdate(MaxOt);
                        return (TimeSpan)MaxOt.Fake_Out;
                        //}
                        //else
                        //{
                        //    fakeOutTime = actualOut;
                        //    return fakeOutTime;
                        //}

                    }
                    else
                    {
                        //if (MaxOtAttendanceDataSave(MaxOt))
                        //{
                        MaxOtAttendanceDataSave(MaxOt);
                        return (TimeSpan)MaxOt.Fake_Out;
                        //}
                        //else
                        //{
                        fakeOutTime = actualOut;
                        return fakeOutTime;
                        //}
                    }


                }


                if (actualOut != null && IsMaxOtEmployee == true)
                {
                    if (maxEveningOttime == OtCheck3)
                    {
                        return actualOut;
                    }

                    if (actualOut > shiftOut + maxEveningOttime)
                    {
                        if (DayOfWeek.Saturday == MaxOt.Date.DayOfWeek && ISDefault)
                        {
                            MaxOtOut = new TimeSpan((shiftOut + maxEveningOttime).Hours, new Random().Next(30, 40), new Random().Next(60));
                        }
                        else if (DayOfWeek.Saturday == MaxOt.Date.DayOfWeek)
                        {
                            MaxOtOut = new TimeSpan((shiftOut + maxEveningOttime).Hours, new Random().Next(0, 5), new Random().Next(60));
                        }
                        else
                        {
                            MaxOtOut = new TimeSpan((shiftOut + maxEveningOttime).Hours, new Random().Next(45, 55), new Random().Next(60));
                        }
                        MaxOt.Act_OutTime = actualOut;
                        MaxOt.Fake_Out = MaxOtOut;
                        MaxOt.Fake_E_OT = MaxOtOut.Subtract(shiftOut).Duration();
                        MaxOt.Extra_E_OT = actualOut.Subtract(MaxOtOut).Duration();

                        if (maxotData != null && maxotData.Where(c => c.EmpID == MaxOt.EmpID && c.Date == MaxOt.Date && c.DayID == MaxOt.DayID && c.ShiftID == MaxOt.ShiftID).ToList().Count == 1)
                        {
                            //if (MaxOtAttendanceDataUpdate(MaxOt))
                            //{
                            MaxOtAttendanceDataUpdate(MaxOt);
                            return (TimeSpan)MaxOt.Fake_Out;
                            //}
                            //else
                            ////{
                            //    fakeOutTime = actualOut;
                            //    return fakeOutTime;
                            //}

                        }
                        else
                        {
                            //if (MaxOtAttendanceDataSave(MaxOt))

                            MaxOtAttendanceDataSave(MaxOt);
                            return (TimeSpan)MaxOt.Fake_Out;
                            //}
                            //else
                            //{
                            //    fakeOutTime = actualOut;
                            //    return fakeOutTime;
                            //}
                        }


                    }



                    fakeOutTime = actualOut;
                    return fakeOutTime;
                }

                //   }
                return actualOut;

            }

            catch (Exception)
            {

                throw;
            }
        }



        #endregion

        #region Attendance Break Process

        #region EmployeeBreakTimeOperations

        public bool EmployeeBreakTimetSave(List<dtl_EmployeeBreakTime> BreakTimeList)
        {
            try
            {
                if (BreakTimeList != null)
                {

                    using (var context = new ERPEntities())
                    {

                        foreach (var item in BreakTimeList)
                        {
                            context.dtl_EmployeeBreakTime.AddObject(item);

                        }
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }
            return false;
        }

        #endregion


        public void AttendanceBreakTrack(List<dtl_AttendanceData> Attendance, string empID, string Period, DateTime Date)
        {

            TimeSpan Duration;
            TimeSpan BreakIn;
            TimeSpan BreakOut;
            TimeSpan In;
            TimeSpan Out;

            In = (TimeSpan)Attendance.First().attend_time;
            Out = (TimeSpan)Attendance.Last().attend_time;
            List<dtl_EmployeeBreakTime> BreakTimeList = new List<dtl_EmployeeBreakTime>();

            if (Attendance.Count == 2)
            {
                for (int i = 0; i < Attendance.Count; i += 2)
                {
                    dtl_EmployeeBreakTime BreakTime = new dtl_EmployeeBreakTime();
                    BreakIn = (TimeSpan)Attendance[i].attend_time;
                    BreakOut = (TimeSpan)Attendance[i].attend_time;
                    Duration = (BreakOut - BreakIn).Duration();
                    BreakTime.EmpID = empID;
                    BreakTime.PeriodID = new Guid(Period);
                    BreakTime.Date = Date;
                    BreakTime.BreakIN = BreakIn;
                    BreakTime.BreakOUT = BreakOut;
                    BreakTime.Duration = new TimeSpan();
                    BreakTime.Status = "Default";
                    BreakTime.InTime = In;
                    BreakTime.OutTime = Out;
                    BreakTimeList.Add(BreakTime);
                }

            }

            else
            {
                Attendance.RemoveAt(0);
                Attendance.RemoveAt(Attendance.Count - 1);


                if (Attendance.Count % 2 != 0)
                {
                    dtl_AttendanceData temp = new dtl_AttendanceData();
                    temp.attend_time = Attendance.Last().attend_time.Value.Add(new TimeSpan(0, 0, 1));
                    Attendance.Insert(Attendance.Count, temp);

                    for (int i = 0; i < Attendance.Count; i += 2)
                    {
                        dtl_EmployeeBreakTime BreakTime = new dtl_EmployeeBreakTime();
                        BreakIn = (TimeSpan)Attendance[i].attend_time;
                        BreakOut = (TimeSpan)Attendance[i + 1].attend_time;
                        Duration = (BreakOut - BreakIn).Duration();
                        BreakTime.EmpID = empID;
                        BreakTime.PeriodID = new Guid(Period);
                        BreakTime.Date = Date;
                        BreakTime.BreakIN = BreakIn;
                        BreakTime.BreakOUT = BreakOut;
                        BreakTime.Duration = Duration;
                        BreakTime.Status = "Default";
                        BreakTime.InTime = In;
                        BreakTime.OutTime = Out;
                        BreakTimeList.Add(BreakTime);
                    }

                }

                else
                {
                    for (int i = 0; i < Attendance.Count; i += 2)
                    {
                        dtl_EmployeeBreakTime BreakTime = new dtl_EmployeeBreakTime();
                        BreakIn = (TimeSpan)Attendance[i].attend_time;
                        BreakOut = (TimeSpan)Attendance[i + 1].attend_time;
                        Duration = (BreakOut - BreakIn).Duration();
                        BreakTime.EmpID = empID;
                        BreakTime.PeriodID = new Guid(Period);
                        BreakTime.Date = Date;
                        BreakTime.BreakIN = BreakIn;
                        BreakTime.BreakOUT = BreakOut;
                        BreakTime.Duration = Duration;
                        BreakTime.Status = "Default";
                        BreakTime.InTime = In;
                        BreakTime.OutTime = Out;
                        BreakTimeList.Add(BreakTime);
                    }
                }
            }

            if (BreakTimeList != null)
            {
                EmployeeBreakTimetSave(BreakTimeList);
            }

        }


        #endregion

        #region PaymenMethod(CashOnly)

        [OperationContract]
        public IEnumerable<PaymentMethodView_Cash_> GetPaymentMethodView_Cash_()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.PaymentMethodView_Cash_.ToList();
                    return result;
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        #endregion

        #region CoinAnalyzer

        [OperationContract]
        public int GetCoinAnalyzeData(string period, string method)
        {
            int result;
            try
            {

                using (var context = new ERPEntities())
                {
                    context.GetCoinAnalysisData_PROC(period, method);
                    result = 1;
                    return result;
                }
            }
            catch (Exception)
            {
                result = 0;
                return result;

            }
        }

        #endregion

        #region ID Print

        [OperationContract]
        public IEnumerable<GetIDCardDetailsView> GetIDCardInformationView()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.GetIDCardDetailsViews.ToList();
                    result.ForEach(r => context.Detach(r));
                    return result;
                }

            }
            catch (Exception)
            {

                throw null;
            }
        }

        #endregion

        #region MAG Operations

        [OperationContract]
        public IEnumerable<EPFeReturnView> GetEPFeReturnView(Guid PayPeriod, Guid Employee)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.EPFeReturnViews.ToList();
                    result.ForEach(r => context.Detach(r));
                    return result;
                }

            }
            catch (Exception)
            {

                throw null;
            }

        }

        [OperationContract]

        public GetEVEMPData_Result GetEVEMPDataRows(string period, string employer)
        {
            try
            {

                using (var context = new ERPEntities())
                {
                    var result = context.GetEVEMPData(period, employer).FirstOrDefault();
                    return result;
                }
            }
            catch (Exception)
            {
                return null;

            }
        }

        [OperationContract]

        public IEnumerable<Get_EPF_Data_Result> GET_EPF_DataRows(string period, string employer)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.Get_EPF_Data(period, employer).ToList();
                    return result;
                }

            }
            catch (Exception)
            {

                return null;
            }
        }

        [OperationContract]
        public IEnumerable<z_Payment_Mode> GetPaymentMode()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.z_Payment_Mode.ToList();
                    result.ForEach(r => context.Detach(r));
                    return result;
                }
            }
            catch (Exception)
            {

                throw null;
            }
        }

        [OperationContract]
        public IEnumerable<z_Zone_Code> GetZoneCode()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.z_Zone_Code.ToList();
                    result.ForEach(r => context.Detach(r));
                    return result;
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        [OperationContract]
        public IEnumerable<z_District_Office_Code> GetDistrictOfficeCode()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.z_District_Office_Code.ToList();
                    result.ForEach(r => context.Detach(r));
                    return result;
                }
            }
            catch (Exception)
            {

                throw;
            }
        }


        #endregion


        #endregion

        #region Avenesh
        #region Medical Reimbursement

        [OperationContract]
        public IEnumerable<z_MedicalPeriod> GetMedicalPeriods()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_MedicalPeriod.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public bool UpdateMedicalPeriods(z_MedicalPeriod period)
        {
            bool IsSuccess = false;
            try
            {
                if (period != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_MedicalPeriod newPeriod = context.z_MedicalPeriod.First(a => a.period_id == period.period_id);
                        if (newPeriod != null)
                        {
                            newPeriod.period_id = period.period_id;
                            newPeriod.from_date = period.from_date;
                            newPeriod.period_name = period.period_name;
                            newPeriod.to_date = period.to_date;
                            newPeriod.is_active = period.is_active;
                            newPeriod.modified_datetime = System.DateTime.Now;
                            int i = context.SaveChanges();
                            return IsSuccess = validateSaveUpdate(i);
                        }
                    }
                }
            }
            catch (Exception)
            {
                return IsSuccess = false;
            }
            return IsSuccess;
        }

        [OperationContract]
        public bool SaveMedicalPeriods(z_MedicalPeriod period)
        {
            bool IsSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    z_MedicalPeriod newPeriod = new z_MedicalPeriod();
                    newPeriod = period;
                    context.z_MedicalPeriod.AddObject(period);
                    int i = context.SaveChanges();
                    return IsSuccess = validateSaveUpdate(i);
                }
            }
            catch (Exception)
            {
                return IsSuccess = false;
            }
        }

        [OperationContract]
        public bool DeleteMedicalPeriods(z_MedicalPeriod period)
        {
            bool IsSuccess = false;
            try
            {
                if (period != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_MedicalPeriod oldPeriod = context.z_MedicalPeriod.First(a => a.period_id == period.period_id);
                        if (oldPeriod != null)
                        {
                            //context.z_MedicalPeriod.DeleteObject(oldPeriod);

                            oldPeriod.is_delete = true;
                            oldPeriod.delete_datetime = period.delete_datetime;
                            oldPeriod.delete_user_id = period.delete_user_id;
                            //oldEmployee.mas_Employee.isdelete = true;

                            int i = context.SaveChanges();
                            return IsSuccess = validateSaveUpdate(i);
                        }
                    }
                }
            }
            catch (Exception)
            {
                return IsSuccess = false;
            }
            return IsSuccess;
        }

        [OperationContract]
        public bool SaveMedicalCategoryAllocation(dtl_MedicalCategoryAllocation newAllocation)
        {
            try
            {
                if (newAllocation != null)
                {
                    using (var context = new ERPEntities())
                    {
                        context.dtl_MedicalCategoryAllocation.AddObject(newAllocation);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }

            catch (Exception)
            {
                return false;
            }

            return false;
        }

        [OperationContract]
        public IEnumerable<dtl_MedicalCategoryAllocation> GetEmployeeMedicalAllocations()
        {
            using (var context = new ERPEntities())
            {
                var result = context.dtl_MedicalCategoryAllocation.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<EmployeeMedicalAllocationView> GetMedicalCategoryAllocationByEmpId(Guid empId)
        {
            using (var context = new ERPEntities())
            {
                var result = context.EmployeeMedicalAllocationViews.Where(a => a.employee_id == empId).ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<EmployeeMedicalAllocationView> GetMedicalCategoryAllocationViewAll()
        {
            using (var context = new ERPEntities())
            {
                var result = context.EmployeeMedicalAllocationViews.ToList();
                //result.ForEach(e => context.Detach(e));
                return result;
            }
        }


        [OperationContract]
        public EmployeeMedicalSummaryView GetMedicalSummaryByKey(Guid periodId, Guid empId, Guid catId)
        {
            using (var context = new ERPEntities())
            {
                var result = context.EmployeeMedicalSummaryViews.Where(a => a.employee_id == empId && a.period_id == periodId && a.cat_id == catId).FirstOrDefault();
                //result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<trn_EmployeeMedical> GetEmployeeMedicalClaimsByKey(Guid periodId, Guid empId, Guid catId)
        {
            using (var context = new ERPEntities())
            {
                var result = context.trn_EmployeeMedical.Where(e => e.employee_id == empId && e.period_id == periodId && e.cat_id == catId).ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<trn_EmployeeMedical> GetEmployeeMedicalClaims()
        {
            using (var context = new ERPEntities())
            {
                var result = context.trn_EmployeeMedical.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public bool SaveEmployeeMedicalClaim(trn_EmployeeMedical newMedical)
        {
            try
            {
                if (newMedical != null)
                {
                    using (var context = new ERPEntities())
                    {
                        context.trn_EmployeeMedical.AddObject(newMedical);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }
            return false;
        }

        [OperationContract]
        public IEnumerable<z_MedicalCategory> GetMedicalCategoriesByPeriodId(Guid periodId)
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_MedicalCategory.Where(p => p.period_id == periodId).ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<z_MedicalCategory> GetMedicalCategories()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_MedicalCategory.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public bool SaveMedicalCategory(z_MedicalCategory newCategory)
        {
            try
            {
                if (newCategory != null)
                {
                    using (var context = new ERPEntities())
                    {
                        context.z_MedicalCategory.AddObject(newCategory);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }
            return false;
        }

        [OperationContract]
        public bool UpdateMedicalCategory(z_MedicalCategory updatedCategory)
        {
            if (updatedCategory != null)
            {
                try
                {
                    using (var context = new ERPEntities())
                    {
                        if (context != null)
                        {
                            z_MedicalCategory category = context.z_MedicalCategory.First(c => c.cat_id == updatedCategory.cat_id);

                            category.cat_desc = updatedCategory.cat_desc;
                            category.total_amount = updatedCategory.total_amount;
                            category.modified_user_id = updatedCategory.modified_user_id;
                            category.modified_datetime = System.DateTime.Now;

                            context.SaveChanges();

                            return true;
                        }
                    }
                }

                catch (Exception)
                {
                    return false;
                }
            }

            return false;
        }

        [OperationContract]
        public bool UpdateMedicalClaim(trn_EmployeeMedical updatedClaim)
        {
            if (updatedClaim != null)
            {
                using (var context = new ERPEntities())
                {
                    if (context != null)
                    {
                        try
                        {
                            trn_EmployeeMedical claim = context.trn_EmployeeMedical.First(c => c.cat_id == updatedClaim.emp_med_id);

                            claim.receipt_date = updatedClaim.receipt_date;
                            claim.receipt_amount = updatedClaim.receipt_amount;
                            claim.doctor_name = updatedClaim.doctor_name;
                            claim.pharmacy_name = updatedClaim.pharmacy_name;
                            claim.modified_user_id = updatedClaim.modified_user_id;
                            claim.modified_datetime = System.DateTime.Now;

                            return context.SaveChanges() == 1;

                        }
                        catch (Exception)
                        {
                            return false;
                        }
                    }////

                }
            }

            return false;
        }

        //[OperationContract]
        //public bool SaveMedicalCategoryAllocation(dtl_MedicalCategoryAllocation newAlloc)
        //{
        //    bool IsSuccess = false;
        //    try
        //    {
        //        using (var context = new ERPEntities())
        //        {
        //            context.dtl_MedicalCategoryAllocation.AddObject(newAlloc);
        //            int i = context.SaveChanges();
        //            return IsSuccess = validateSaveUpdate(i);
        //        }
        //    }
        //    catch (Exception)
        //    {
        //        return IsSuccess = false;
        //    }
        //}

        [OperationContract]
        public bool UpdateMedicalCategoryAllocation(dtl_MedicalCategoryAllocation updatedAlloc)
        {
            if (updatedAlloc != null)
            {
                try
                {
                    using (var context = new ERPEntities())
                    {
                        if (context != null)
                        {
                            dtl_MedicalCategoryAllocation alloc = context.dtl_MedicalCategoryAllocation.First(o => o.employee_id == updatedAlloc.employee_id && o.period_id == updatedAlloc.period_id);

                            alloc.cat_id = updatedAlloc.cat_id;
                            alloc.period_id = updatedAlloc.period_id;
                            alloc.modified_user_id = updatedAlloc.modified_user_id;
                            alloc.modified_datetime = updatedAlloc.modified_datetime;

                            context.SaveChanges();

                            return true;
                        }
                    }
                }

                catch (Exception)
                {
                    return false;
                }
            }

            return false;
        }

        #endregion Medical Reimbursement

        #region Email Notification

        [OperationContract]
        public z_EmailClientCredential GetEmailClientCredential()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_EmailClientCredential.FirstOrDefault();
                return result;
            }
        }

        [OperationContract]
        IEnumerable<UserEmployeeSummaryView> GetUserEmployeeSummary()
        {
            using (var context = new ERPEntities())
            {
                var result = context.UserEmployeeSummaryViews.ToList();
                return result;
            }
        }

        [OperationContract]
        public UserEmployeeSummaryView GetUserEmployeeSummaryByEmpId(Guid empId)
        {
            using (var context = new ERPEntities())
            {
                var result = context.UserEmployeeSummaryViews.Where(o => o.employee_id == empId).FirstOrDefault();
                return result;
            }
        }

        #endregion Email Notification
        #endregion

        #region Chathura

        #region Online User Operations

        #region Table Operations

        #region dtl_EmployeeLogin operations

        [OperationContract]
        public bool SaveLeaveUser(dtl_EmployeeLogin addedUser)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    context.dtl_EmployeeLogin.AddObject(addedUser);
                    if (validateSaveUpdate(context.SaveChanges()))
                        return true;
                }
            }
            catch (Exception)
            {
            }
            return false;
        }

        [OperationContract]
        public bool UpdateLeaveUser(dtl_EmployeeLogin updatedUser)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    dtl_EmployeeLogin current = context.dtl_EmployeeLogin.FirstOrDefault(c => c.employee_id == updatedUser.employee_id);
                    if (current != null)
                    {
                        current.employee_user_name = updatedUser.employee_user_name;
                        current.employee_user_password = updatedUser.employee_user_password;
                        current.isActive = updatedUser.isActive;
                        if (validateSaveUpdate(context.SaveChanges()))
                            return true;
                    }
                }
            }
            catch (Exception)
            {
            }
            return false;
        }

        #endregion

        #endregion

        #region View Operations

        #region OnlineLeaveUserDetailsView view operations

        [OperationContract]
        public IEnumerable<OnlineLeaveUserDetailsView> GetLeaveUserDetails()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.OnlineLeaveUserDetailsViews.OrderBy(c => c.emp_id).ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;

                }
            }
            catch (Exception)
            {
            }
            return null;
        }

        #endregion

        #endregion

        #endregion

        #endregion

        #region Supun

        #region z_Social Media

        [OperationContract]
        public IEnumerable<z_SocialMedia> GetSocialMedia()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.z_SocialMedia.Where(c => c.isdelete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveUpdateSocialMedia(z_SocialMedia SaveUpdateObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (context.z_SocialMedia.Count(c => c.social_media_id == SaveUpdateObj.social_media_id) > 0)
                    {
                        z_SocialMedia UpdateObj = context.z_SocialMedia.FirstOrDefault(c => c.social_media_id == SaveUpdateObj.social_media_id);
                        UpdateObj.social_media_name = SaveUpdateObj.social_media_name;
                        UpdateObj.isActive = SaveUpdateObj.isActive;
                        UpdateObj.modified_datetime = SaveUpdateObj.modified_datetime;
                        UpdateObj.modified_user_id = SaveUpdateObj.modified_user_id;

                        return validateSaveUpdate(context.SaveChanges());
                    }
                    else
                    {
                        SaveUpdateObj.isActive = true;
                        SaveUpdateObj.isdelete = false;
                        context.z_SocialMedia.AddObject(SaveUpdateObj);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {

                return false;
            }
        }

        [OperationContract]
        public bool DeleteSocialMedia(z_SocialMedia DeleteObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    z_SocialMedia DelObj = context.z_SocialMedia.FirstOrDefault(c => c.social_media_id == DeleteObj.social_media_id);
                    DelObj.isActive = false;
                    DelObj.isdelete = true;
                    DelObj.delete_user_id = DeleteObj.delete_user_id;
                    DelObj.delete_datetime = DeleteObj.delete_datetime;

                    return validateSaveUpdate(context.SaveChanges());
                }

            }
            catch (Exception)
            {

                return false;
            }
        }



        #endregion

        #region dtl_GrativityAmount operations

        [OperationContract]
        public int GetGrativityDetalis()
        {
            int empCount = 0;
            using (var context = new ERPEntities())
            {
                empCount = context.dtl_Employee.Where(c => c.isActive == true).Count();
            }
            return empCount;
        }

        #endregion

        #region z_SalaryCategory operation


        [OperationContract]
        public bool SaveSalaryCategory(z_Salary_Category_Type Salary)
        {
            try
            {
                if (Salary != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_Salary_Category_Type current = context.z_Salary_Category_Type.FirstOrDefault(c => c.Salary_Category_id == Salary.Salary_Category_id);

                        if (current != null)
                        {

                            current.Salary_Category_name = Salary.Salary_Category_name;
                            current.discription = Salary.discription;
                            current.Is_Active = Salary.Is_Active;
                        }
                        else
                        {
                            context.AddToz_Salary_Category_Type(Salary);
                        }

                        if (validateSaveUpdate(context.SaveChanges()))
                            return true;
                    }
                }

            }
            catch (Exception)
            {

            }
            return false;
        }

        [OperationContract]
        public bool DeleteSalaryCategory(z_Salary_Category_Type deletedSalary)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var current = context.z_Salary_Category_Type.FirstOrDefault(c => c.Salary_Category_id == deletedSalary.Salary_Category_id);
                    if (current != null)
                    {
                        current.Is_Delete = true;
                        if (validateSaveUpdate(context.SaveChanges()))
                            return true;
                    }
                }
            }
            catch (Exception)
            {

            }
            return false;
        }


        #endregion

        #region z_ExtraCurricularActivites

        [OperationContract]
        public IEnumerable<z_ExtraCurricularActivities> GetExtraCurricularActivities()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.z_ExtraCurricularActivities.Where(c => c.isdelete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveUpdateExtraCurricularActivites(z_ExtraCurricularActivities SaveUpdateObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (context.z_ExtraCurricularActivities.Count(c => c.activities_category_id == SaveUpdateObj.activities_category_id) > 0)
                    {
                        z_ExtraCurricularActivities UpdateObj = context.z_ExtraCurricularActivities.FirstOrDefault(c => c.activities_category_id == SaveUpdateObj.activities_category_id);
                        UpdateObj.activities_category_type = SaveUpdateObj.activities_category_type;
                        UpdateObj.isActive = SaveUpdateObj.isActive;
                        UpdateObj.modified_datetime = SaveUpdateObj.modified_datetime;
                        UpdateObj.modified_user_id = SaveUpdateObj.modified_user_id;

                        return validateSaveUpdate(context.SaveChanges());
                    }
                    else
                    {
                        SaveUpdateObj.isActive = true;
                        SaveUpdateObj.isdelete = false;
                        context.z_ExtraCurricularActivities.AddObject(SaveUpdateObj);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {

                return false;
            }
        }

        [OperationContract]
        public bool DeleteExtraCurricularActivite(z_ExtraCurricularActivities DeleteObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    z_ExtraCurricularActivities DelObj = context.z_ExtraCurricularActivities.FirstOrDefault(c => c.activities_category_id == DeleteObj.activities_category_id);
                    DelObj.isActive = false;
                    DelObj.isdelete = true;
                    DelObj.delete_user_id = DeleteObj.delete_user_id;
                    DelObj.delete_datetime = DeleteObj.delete_datetime;

                    return validateSaveUpdate(context.SaveChanges());
                }

            }
            catch (Exception)
            {

                return false;
            }
        }

        #endregion

        #region Acadamic Qulification

        #region z_School Grade

        [OperationContract]
        public IEnumerable<z_SchoolGrade> GetSchoolGrades()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.z_SchoolGrade.Where(c => c.isdelete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveUpdateSchoolGrade(z_SchoolGrade SaveUpdateObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (context.z_SchoolGrade.Count(c => c.school_grade_id == SaveUpdateObj.school_grade_id) > 0)
                    {
                        z_SchoolGrade UpdateObj = context.z_SchoolGrade.FirstOrDefault(c => c.school_grade_id == SaveUpdateObj.school_grade_id);
                        UpdateObj.school_grade_type = SaveUpdateObj.school_grade_type;
                        UpdateObj.isActive = SaveUpdateObj.isActive;
                        UpdateObj.modified_datetime = SaveUpdateObj.modified_datetime;
                        UpdateObj.modified_user_id = SaveUpdateObj.modified_user_id;

                        return validateSaveUpdate(context.SaveChanges());
                    }
                    else
                    {
                        SaveUpdateObj.isActive = true;
                        SaveUpdateObj.isdelete = false;
                        context.z_SchoolGrade.AddObject(SaveUpdateObj);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {

                return false;
            }
        }

        [OperationContract]
        public bool DeleteSchoolGrade(z_SchoolGrade DeleteObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    z_SchoolGrade DelObj = context.z_SchoolGrade.FirstOrDefault(c => c.school_grade_id == DeleteObj.school_grade_id);
                    DelObj.isActive = false;
                    DelObj.isdelete = true;
                    DelObj.delete_user_id = DeleteObj.delete_user_id;
                    DelObj.delete_datetime = DeleteObj.delete_datetime;

                    return validateSaveUpdate(context.SaveChanges());
                }

            }
            catch (Exception)
            {

                return false;
            }
        }

        #endregion

        #region z_school Qualification Type

        [OperationContract]
        public IEnumerable<z_SchoolQualificationType> GetSchoolQualificationType()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.z_SchoolQualificationType.Where(c => c.isdelete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveUpdateSchoolQualificationType(z_SchoolQualificationType SaveUpdateObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (context.z_SchoolQualificationType.Count(c => c.school_qualifiaction_id == SaveUpdateObj.school_qualifiaction_id) > 0)
                    {
                        z_SchoolQualificationType UpdateObj = context.z_SchoolQualificationType.FirstOrDefault(c => c.school_qualifiaction_id == SaveUpdateObj.school_qualifiaction_id);
                        UpdateObj.school_qualifiaction_type = SaveUpdateObj.school_qualifiaction_type;
                        UpdateObj.isActive = SaveUpdateObj.isActive;
                        UpdateObj.modified_datetime = SaveUpdateObj.modified_datetime;
                        UpdateObj.modified_user_id = SaveUpdateObj.modified_user_id;

                        return validateSaveUpdate(context.SaveChanges());
                    }
                    else
                    {
                        SaveUpdateObj.isActive = true;
                        SaveUpdateObj.isdelete = false;
                        context.z_SchoolQualificationType.AddObject(SaveUpdateObj);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {

                return false;
            }
        }

        [OperationContract]
        public bool DeleteSchoolQualification(z_SchoolQualificationType DeleteObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    z_SchoolQualificationType DelObj = context.z_SchoolQualificationType.FirstOrDefault(c => c.school_qualifiaction_id == DeleteObj.school_qualifiaction_id);
                    DelObj.isActive = false;
                    DelObj.isdelete = true;
                    DelObj.delete_user_id = DeleteObj.delete_user_id;
                    DelObj.delete_datetime = DeleteObj.delete_datetime;

                    return validateSaveUpdate(context.SaveChanges());
                }

            }
            catch (Exception)
            {

                return false;
            }
        }

        #endregion

        #region z_school Qualification Subject

        [OperationContract]
        public IEnumerable<z_SchoolQualificationSubject> GetSchoolQualificationSubject()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.z_SchoolQualificationSubject.Where(c => c.isdelete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveUpdateSchoolQualificationSubject(z_SchoolQualificationSubject SaveUpdateObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (context.z_SchoolQualificationSubject.Count(c => c.schoolsubject_id == SaveUpdateObj.schoolsubject_id) > 0)
                    {
                        z_SchoolQualificationSubject UpdateObj = context.z_SchoolQualificationSubject.FirstOrDefault(c => c.schoolsubject_id == SaveUpdateObj.schoolsubject_id);
                        UpdateObj.subject = SaveUpdateObj.subject;
                        UpdateObj.isActive = SaveUpdateObj.isActive;
                        UpdateObj.modified_datetime = SaveUpdateObj.modified_datetime;
                        UpdateObj.modified_user_id = SaveUpdateObj.modified_user_id;

                        return validateSaveUpdate(context.SaveChanges());
                    }
                    else
                    {
                        SaveUpdateObj.isActive = true;
                        SaveUpdateObj.isdelete = false;
                        context.z_SchoolQualificationSubject.AddObject(SaveUpdateObj);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {

                return false;
            }
        }

        [OperationContract]
        public bool DeleteSchoolSubject(z_SchoolQualificationSubject DeleteObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    z_SchoolQualificationSubject DelObj = context.z_SchoolQualificationSubject.FirstOrDefault(c => c.schoolsubject_id == DeleteObj.schoolsubject_id);
                    DelObj.isActive = false;
                    DelObj.isdelete = true;
                    DelObj.delete_user_id = DeleteObj.delete_user_id;
                    DelObj.delete_datetime = DeleteObj.delete_datetime;

                    return validateSaveUpdate(context.SaveChanges());
                }

            }
            catch (Exception)
            {

                return false;
            }
        }


        #endregion


        #endregion

        #region Professional Qualification

        #region Univercity Name

        [OperationContract]
        public IEnumerable<z_UnivercityName> GetUnivercityName()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.z_UnivercityName.Where(c => c.isdelete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveUpdateUnivercityName(z_UnivercityName SaveUpdateObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    try
                    {
                        if (context.z_UnivercityName.Count(c => c.univercity_id == SaveUpdateObj.univercity_id) > 0)
                        {
                            z_UnivercityName UpdateObj = context.z_UnivercityName.FirstOrDefault(c => c.univercity_id == SaveUpdateObj.univercity_id);
                            UpdateObj.univercity_name = SaveUpdateObj.univercity_name;
                            UpdateObj.isActive = SaveUpdateObj.isActive;
                            UpdateObj.modified_datetime = SaveUpdateObj.modified_datetime;
                            UpdateObj.modified_user_id = SaveUpdateObj.modified_user_id;

                            return validateSaveUpdate(context.SaveChanges());
                        }
                        else
                        {
                            SaveUpdateObj.isActive = true;
                            SaveUpdateObj.isdelete = false;
                            context.z_UnivercityName.AddObject(SaveUpdateObj);
                            return validateSaveUpdate(context.SaveChanges());
                        }
                    }
                    catch (Exception)
                    {
                        return false;
                    }
                }
            }
            catch (Exception)
            {

                return false;
            }
        }

        [OperationContract]
        public bool DeleteUnivercityName(z_UnivercityName DeleteObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    z_UnivercityName DelObj = context.z_UnivercityName.FirstOrDefault(c => c.univercity_id == DeleteObj.univercity_id);
                    DelObj.isActive = false;
                    DelObj.isdelete = true;
                    DelObj.delete_user_id = DeleteObj.delete_user_id;
                    DelObj.delete_datetime = DeleteObj.delete_datetime;

                    return validateSaveUpdate(context.SaveChanges());
                }

            }
            catch (Exception)
            {

                return false;
            }
        }


        #endregion

        #region z_Univercity Degree name

        [OperationContract]
        public IEnumerable<z_UnivercityDigreeNames> GetUnivercityDegreeName()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.z_UnivercityDigreeNames.Where(c => c.isdelete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveUpdateUnivercityDegreeName(z_UnivercityDigreeNames SaveUpdateObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (context.z_UnivercityDigreeNames.Count(c => c.univercity_Course_id == SaveUpdateObj.univercity_Course_id) > 0)
                    {
                        z_UnivercityDigreeNames UpdateObj = context.z_UnivercityDigreeNames.FirstOrDefault(c => c.univercity_Course_id == SaveUpdateObj.univercity_Course_id);
                        UpdateObj.univercity_Course_name = SaveUpdateObj.univercity_Course_name;
                        UpdateObj.isActive = SaveUpdateObj.isActive;
                        UpdateObj.modified_datetime = SaveUpdateObj.modified_datetime;
                        UpdateObj.modified_user_id = SaveUpdateObj.modified_user_id;

                        return validateSaveUpdate(context.SaveChanges());
                    }
                    else
                    {
                        SaveUpdateObj.isActive = true;
                        SaveUpdateObj.isdelete = false;
                        context.z_UnivercityDigreeNames.AddObject(SaveUpdateObj);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {

                return false;
            }
        }

        [OperationContract]
        public bool DeleteUnivercityDegreeName(z_UnivercityDigreeNames DeleteObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    z_UnivercityDigreeNames DelObj = context.z_UnivercityDigreeNames.FirstOrDefault(c => c.univercity_Course_id == DeleteObj.univercity_Course_id);
                    DelObj.isActive = false;
                    DelObj.isdelete = true;
                    DelObj.delete_user_id = DeleteObj.delete_user_id;
                    DelObj.delete_datetime = DeleteObj.delete_datetime;

                    return validateSaveUpdate(context.SaveChanges());
                }

            }
            catch (Exception)
            {

                return false;
            }
        }


        #endregion

        #region z_univercity Degree Type

        [OperationContract]
        public IEnumerable<z_UnivercityDigreeType> GetUnivercityDegreeType()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.z_UnivercityDigreeType.Where(c => c.isdelete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveUpdateUnivercityDegreeType(z_UnivercityDigreeType SaveUpdateObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (context.z_UnivercityDigreeType.Count(c => c.univercity_Course_type_id == SaveUpdateObj.univercity_Course_type_id) > 0)
                    {
                        z_UnivercityDigreeType UpdateObj = context.z_UnivercityDigreeType.FirstOrDefault(c => c.univercity_Course_type_id == SaveUpdateObj.univercity_Course_type_id);
                        UpdateObj.univercity_Course_type = SaveUpdateObj.univercity_Course_type;
                        UpdateObj.isActive = SaveUpdateObj.isActive;
                        UpdateObj.modified_datetime = SaveUpdateObj.modified_datetime;
                        UpdateObj.modified_user_id = SaveUpdateObj.modified_user_id;

                        return validateSaveUpdate(context.SaveChanges());
                    }
                    else
                    {
                        SaveUpdateObj.isActive = true;
                        SaveUpdateObj.isdelete = false;
                        context.z_UnivercityDigreeType.AddObject(SaveUpdateObj);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {

                return false;
            }
        }

        [OperationContract]
        public bool DeleteUnivercityDegreeType(z_UnivercityDigreeType DeleteObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    z_UnivercityDigreeType DelObj = context.z_UnivercityDigreeType.FirstOrDefault(c => c.univercity_Course_type_id == DeleteObj.univercity_Course_type_id);
                    DelObj.isActive = false;
                    DelObj.isdelete = true;
                    DelObj.delete_user_id = DeleteObj.delete_user_id;
                    DelObj.delete_datetime = DeleteObj.delete_datetime;

                    return validateSaveUpdate(context.SaveChanges());
                }

            }
            catch (Exception)
            {

                return false;
            }
        }

        #endregion

        #region Z_univrecity Grade

        [OperationContract]
        public IEnumerable<z_UniversityGrade> GetUnivercityGradeType()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.z_UniversityGrade.Where(c => c.isdelete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveUpdateUnivercityDegreeGrade(z_UniversityGrade SaveUpdateObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (context.z_UniversityGrade.Count(c => c.uni_grade_id == SaveUpdateObj.uni_grade_id) > 0)
                    {
                        z_UniversityGrade UpdateObj = context.z_UniversityGrade.FirstOrDefault(c => c.uni_grade_id == SaveUpdateObj.uni_grade_id);
                        UpdateObj.grade = SaveUpdateObj.grade;
                        UpdateObj.isActive = SaveUpdateObj.isActive;
                        UpdateObj.modified_datetime = SaveUpdateObj.modified_datetime;
                        UpdateObj.modified_user_id = SaveUpdateObj.modified_user_id;

                        return validateSaveUpdate(context.SaveChanges());
                    }
                    else
                    {
                        SaveUpdateObj.isActive = true;
                        SaveUpdateObj.isdelete = false;
                        context.z_UniversityGrade.AddObject(SaveUpdateObj);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {

                return false;
            }
        }

        [OperationContract]
        public bool DeleteUnivercityDegreeGrade(z_UniversityGrade DeleteObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    z_UniversityGrade DelObj = context.z_UniversityGrade.FirstOrDefault(c => c.uni_grade_id == DeleteObj.uni_grade_id);
                    DelObj.isActive = false;
                    DelObj.isdelete = true;
                    DelObj.delete_user_id = DeleteObj.delete_user_id;
                    DelObj.delete_datetime = DeleteObj.delete_datetime;

                    return validateSaveUpdate(context.SaveChanges());
                }

            }
            catch (Exception)
            {

                return false;
            }
        }

        #endregion

        #endregion

        #region Employee Skill And Interest Details

        #region z_skillType

        [OperationContract]
        public IEnumerable<z_SkillType> GetSkillType()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.z_SkillType.Where(c => c.isdelete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveUpdateSkill(z_SkillType SaveUpdateObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (context.z_SkillType.Count(c => c.skill_type_id == SaveUpdateObj.skill_type_id) > 0)
                    {
                        z_SkillType UpdateObj = context.z_SkillType.FirstOrDefault(c => c.skill_type_id == SaveUpdateObj.skill_type_id);
                        UpdateObj.skill_type = SaveUpdateObj.skill_type;
                        UpdateObj.isActive = SaveUpdateObj.isActive;
                        UpdateObj.modified_datetime = SaveUpdateObj.modified_datetime;
                        UpdateObj.modified_user_id = SaveUpdateObj.modified_user_id;

                        return validateSaveUpdate(context.SaveChanges());
                    }
                    else
                    {

                        SaveUpdateObj.isActive = true;
                        SaveUpdateObj.isdelete = false;
                        context.z_SkillType.AddObject(SaveUpdateObj);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {

                return false;
            }
        }

        [OperationContract]
        public bool DeleteSkill(z_SkillType DeleteObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    z_SkillType DelObj = context.z_SkillType.FirstOrDefault(c => c.skill_type_id == DeleteObj.skill_type_id);
                    DelObj.isActive = false;
                    DelObj.isdelete = true;
                    DelObj.delete_user_id = DeleteObj.delete_user_id;
                    DelObj.delete_datetime = DeleteObj.delete_datetime;

                    return validateSaveUpdate(context.SaveChanges());
                }

            }
            catch (Exception)
            {

                return false;
            }
        }


        #endregion

        #region z_Interest Field

        [OperationContract]
        public IEnumerable<z_InterestField> GetInterestType()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.z_InterestField.Where(c => c.isdelete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveUpdateInterest(z_InterestField SaveUpdateObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (context.z_InterestField.Count(c => c.interest_field_id == SaveUpdateObj.interest_field_id) > 0)
                    {
                        z_InterestField UpdateObj = context.z_InterestField.FirstOrDefault(c => c.interest_field_id == SaveUpdateObj.interest_field_id);
                        UpdateObj.interest_field_type = SaveUpdateObj.interest_field_type;
                        UpdateObj.isActive = SaveUpdateObj.isActive;
                        UpdateObj.modified_datetime = SaveUpdateObj.modified_datetime;
                        UpdateObj.modified_user_id = SaveUpdateObj.modified_user_id;

                        return validateSaveUpdate(context.SaveChanges());
                    }
                    else
                    {
                        SaveUpdateObj.isActive = true;
                        SaveUpdateObj.isdelete = false;
                        context.z_InterestField.AddObject(SaveUpdateObj);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {

                return false;
            }
        }

        [OperationContract]
        public bool DeleteInterestField(z_InterestField DeleteObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    z_InterestField DelObj = context.z_InterestField.FirstOrDefault(c => c.interest_field_id == DeleteObj.interest_field_id);
                    DelObj.isActive = false;
                    DelObj.isdelete = true;
                    DelObj.delete_user_id = DeleteObj.delete_user_id;
                    DelObj.delete_datetime = DeleteObj.delete_datetime;

                    return validateSaveUpdate(context.SaveChanges());
                }

            }
            catch (Exception)
            {

                return false;
            }
        }

        #endregion

        #endregion

        #region Health And Seafty

        #region z_life_Insurance

        [OperationContract]
        public IEnumerable<z_Life_Insurance> GetLifeInsurance()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.z_Life_Insurance.Where(c => c.isdelete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveUpdateInsurance(z_Life_Insurance SaveUpdateObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (context.z_Life_Insurance.Count(c => c.insurance_covers_id == SaveUpdateObj.insurance_covers_id) > 0)
                    {
                        z_Life_Insurance UpdateObj = context.z_Life_Insurance.FirstOrDefault(c => c.insurance_covers_id == SaveUpdateObj.insurance_covers_id);
                        UpdateObj.insurance_covers_type = SaveUpdateObj.insurance_covers_type;
                        UpdateObj.isActive = SaveUpdateObj.isActive;
                        UpdateObj.modified_datetime = SaveUpdateObj.modified_datetime;
                        UpdateObj.modified_user_id = SaveUpdateObj.modified_user_id;

                        return validateSaveUpdate(context.SaveChanges());
                    }
                    else
                    {
                        SaveUpdateObj.isActive = true;
                        SaveUpdateObj.isdelete = false;
                        context.z_Life_Insurance.AddObject(SaveUpdateObj);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {

                return false;
            }
        }

        [OperationContract]
        public bool DeleteInsurance(z_Life_Insurance DeleteObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    z_Life_Insurance DelObj = context.z_Life_Insurance.FirstOrDefault(c => c.insurance_covers_id == DeleteObj.insurance_covers_id);
                    DelObj.isActive = false;
                    DelObj.isdelete = true;
                    DelObj.delete_user_id = DeleteObj.delete_user_id;
                    DelObj.delete_datetime = DeleteObj.delete_datetime;

                    return validateSaveUpdate(context.SaveChanges());
                }

            }
            catch (Exception)
            {

                return false;
            }
        }

        #endregion

        #region BloodType

        #region z_BloodType

        [OperationContract]
        public IEnumerable<z_Blood_Group_Type> GetHealthType()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.z_Blood_Group_Type.Where(c => c.isdelete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveUpdateHealth(z_Blood_Group_Type SaveUpdateObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (context.z_Blood_Group_Type.Count(c => c.bloodGroupType_id == SaveUpdateObj.bloodGroupType_id) > 0)
                    {
                        z_Blood_Group_Type UpdateObj = context.z_Blood_Group_Type.FirstOrDefault(c => c.bloodGroupType_id == SaveUpdateObj.bloodGroupType_id);
                        UpdateObj.bloodGroupType = SaveUpdateObj.bloodGroupType;
                        UpdateObj.isActive = SaveUpdateObj.isActive;
                        UpdateObj.modified_datetime = SaveUpdateObj.modified_datetime;
                        UpdateObj.modified_user_id = SaveUpdateObj.modified_user_id;

                        return validateSaveUpdate(context.SaveChanges());
                    }
                    else
                    {
                        SaveUpdateObj.isActive = true;
                        SaveUpdateObj.isdelete = false;
                        context.z_Blood_Group_Type.AddObject(SaveUpdateObj);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {

                return false;
            }
        }

        [OperationContract]
        public bool DeleteHealth(z_Blood_Group_Type DeleteObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    z_Blood_Group_Type DelObj = context.z_Blood_Group_Type.FirstOrDefault(c => c.bloodGroupType_id == DeleteObj.bloodGroupType_id);
                    DelObj.isActive = false;
                    DelObj.isdelete = true;
                    DelObj.delete_user_id = DeleteObj.delete_user_id;
                    DelObj.delete_datetime = DeleteObj.delete_datetime;

                    return validateSaveUpdate(context.SaveChanges());
                }

            }
            catch (Exception)
            {

                return false;
            }
        }

        #endregion

        #endregion

        #endregion


        [OperationContract]
        public IEnumerable<dtl_Employee_Health_and_Safety> Get_HealthandSafety()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.dtl_Employee_Health_and_Safety.Where(c => c.isActive == true).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<dtl_EmployeeAcadamicQualification> Get_AcadamicQualification()
        {

            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.dtl_EmployeeAcadamicQualification.Where(c => c.isActive == true).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }


        [OperationContract]
        public IEnumerable<dtl_EmployeeExtraCurricularActivities> Get_ExtraCurricularActivities()
        {

            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.dtl_EmployeeExtraCurricularActivities.Where(c => c.isActive == true).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<dtl_EmployeeFamilyDetails> Get_FamilyDetails()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.dtl_EmployeeFamilyDetails.Where(c => c.isdelete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public bool Delete_Family(dtl_EmployeeFamilyDetails DeleteObj)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    dtl_EmployeeFamilyDetails DelObj = context.dtl_EmployeeFamilyDetails.FirstOrDefault(c => c.family_member_id == DeleteObj.family_member_id);
                    DelObj.isActive = DeleteObj.isActive;
                    DelObj.isdelete = DeleteObj.isdelete;
                    DelObj.delete_datetime = DeleteObj.delete_datetime;
                    DelObj.delete_user_id = DeleteObj.delete_user_id;

                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {
                    return false;
                }


            }
        }


        [OperationContract]
        public IEnumerable<dtl_EmployeeInterestDetails> Get_InterestDetails()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.dtl_EmployeeInterestDetails.Where(c => c.isActive == true).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<dtl_EmployeeSocialMediaDetails> Get_SocialMediaDetails()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.dtl_EmployeeSocialMediaDetails.Where(c => c.isActive == true).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<dtl_EmployeeSkillType> Get_SkillType()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.dtl_EmployeeSkillType.Where(c => c.isActive == true).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<dtl_WorkExperienceDetails> Get_WorkexperienceDetails()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.dtl_WorkExperienceDetails.Where(c => c.isActive == true).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }


        #region Dtl Database

        #region Uni View
        [OperationContract]
        public IEnumerable<EmployeeUniversityView> Get_ProfessionalQualificationView()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.EmployeeUniversityViews.Where(c => c.isdelete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;

                }
            }
        }


        [OperationContract]
        public bool Delete_Univercity(dtl_Employee_ProfessionalQualifications DeleteObj)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    dtl_Employee_ProfessionalQualifications DelObj = context.dtl_Employee_ProfessionalQualifications.FirstOrDefault(c => c.professional_qualification_id == DeleteObj.professional_qualification_id);
                    DelObj.isActive = DeleteObj.isActive;
                    DelObj.isdelete = DeleteObj.isdelete;
                    DelObj.delete_datetime = DeleteObj.delete_datetime;
                    DelObj.delete_user_id = DeleteObj.delete_user_id;

                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }
        #endregion

        #region Skill View

        [OperationContract]
        public IEnumerable<EmployeeSkillView> Get_SkillView()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.EmployeeSkillViews.Where(c => c.isdelete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;

                }
            }
        }
        [OperationContract]
        public bool Delete_Skill(dtl_EmployeeSkillType DeleteObj)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    dtl_EmployeeSkillType DelObj = context.dtl_EmployeeSkillType.FirstOrDefault(c => c.emp_skill_id == DeleteObj.emp_skill_id);
                    DelObj.isActive = DeleteObj.isActive;
                    DelObj.isdelete = DeleteObj.isdelete;
                    DelObj.delete_datetime = DeleteObj.delete_datetime;
                    DelObj.delete_user_id = DeleteObj.delete_user_id;

                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {

                    return false;
                }
            }
        }
        #endregion

        #region Social View

        [OperationContract]
        public IEnumerable<EmployeeSocialView> Get_SocialView()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.EmployeeSocialViews.Where(c => c.isdelete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;

                }
            }
        }

        [OperationContract]
        public bool Delete_Social(dtl_EmployeeSocialMediaDetails DeleteObj)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    dtl_EmployeeSocialMediaDetails DelObj = context.dtl_EmployeeSocialMediaDetails.FirstOrDefault(c => c.emp_social_media_id == DeleteObj.emp_social_media_id);
                    DelObj.isActive = DeleteObj.isActive;
                    DelObj.isdelete = DeleteObj.isdelete;
                    DelObj.delete_datetime = DeleteObj.delete_datetime;
                    DelObj.delete_user_id = DeleteObj.delete_user_id;

                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {
                    return false;
                }


            }
        }
        #endregion

        #region Extra Curricular

        [OperationContract]
        public IEnumerable<EmployeeExtraCurricularView> Get_ExtraCurricularView()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.EmployeeExtraCurricularViews.Where(c => c.isdelete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;

                }
            }
        }
        [OperationContract]
        public bool Delete_ExtraCurricular(dtl_EmployeeExtraCurricularActivities DeleteObj)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    dtl_EmployeeExtraCurricularActivities DelObj = context.dtl_EmployeeExtraCurricularActivities.FirstOrDefault(c => c.emp_extra_curricular_id == DeleteObj.emp_extra_curricular_id);
                    DelObj.isActive = DeleteObj.isActive;
                    DelObj.isdelete = DeleteObj.isdelete;
                    DelObj.delete_datetime = DeleteObj.delete_datetime;
                    DelObj.delete_user_id = DeleteObj.delete_user_id;

                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {

                    return false;
                }
            }
        }

        #endregion

        #region Health Type

        [OperationContract]
        public IEnumerable<EmployeeHealthTypeView> Get_HealthTypeView()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.EmployeeHealthTypeViews.Where(c => c.isActive == true).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;

                }
            }
        }
        #endregion

        #region Interst Details

        [OperationContract]
        public IEnumerable<EmployeeInterstDetailsView> Get_InterstDetailsView()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.EmployeeInterstDetailsViews.Where(c => c.isdelete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;

                }
            }
        }

        [OperationContract]
        public bool Delete_Interst(dtl_EmployeeInterestDetails DeleteObj)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    dtl_EmployeeInterestDetails DelObj = context.dtl_EmployeeInterestDetails.FirstOrDefault(c => c.emp_interest_id == DeleteObj.emp_interest_id);
                    DelObj.isActive = DeleteObj.isActive;
                    DelObj.isdelete = DeleteObj.isdelete;
                    DelObj.delete_datetime = DeleteObj.delete_datetime;
                    DelObj.delete_user_id = DeleteObj.delete_user_id;

                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {

                    return false;
                }
            }
        }
        #endregion

        #region Work Experience
        [OperationContract]
        public IEnumerable<EmployeeWorkExperienceDetailsView> Get_ExperienceDetailsView()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.EmployeeWorkExperienceDetailsViews.Where(c => c.isdelete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;

                }
            }
        }

        [OperationContract]
        public bool Delete_Experience(dtl_WorkExperienceDetails DeleteObj)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    dtl_WorkExperienceDetails DelObj = context.dtl_WorkExperienceDetails.FirstOrDefault(c => c.work_experience_id == DeleteObj.work_experience_id);
                    DelObj.isActive = DeleteObj.isActive;
                    DelObj.isdelete = DeleteObj.isdelete;
                    DelObj.delete_datetime = DeleteObj.delete_datetime;
                    DelObj.delete_user_id = DeleteObj.delete_user_id;

                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {

                    return false;
                }
            }
        }
        #endregion

        #region Acadamic View
        [OperationContract]
        public IEnumerable<EmployeeAcadamicView> Get_AcadamicView()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.EmployeeAcadamicViews.Where(c => c.isdelete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;

                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public bool Delete_Acadamic(dtl_EmployeeAcadamicQualification DeleteObj)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    dtl_EmployeeAcadamicQualification DelObj = context.dtl_EmployeeAcadamicQualification.FirstOrDefault(c => c.academic_qualification_id == DeleteObj.academic_qualification_id);
                    DelObj.isActive = DeleteObj.isActive;
                    DelObj.isdelete = DeleteObj.isdelete;
                    DelObj.delete_datetime = DeleteObj.delete_datetime;
                    DelObj.delete_user_id = DeleteObj.delete_user_id;

                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {

                    return false;
                }
            }
        }


        #endregion

        #region Awords View
        [OperationContract]
        public IEnumerable<EmployeeAwardsDetail> Get_AwardsDetailsView()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.EmployeeAwardsDetails.Where(c => c.isdelete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {

                    return null;
                }
            }
        }

        [OperationContract]
        public bool Delete_Awards(dtl_EmployeeAwardsDetails DeleteObj)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    dtl_EmployeeAwardsDetails DelObj = context.dtl_EmployeeAwardsDetails.FirstOrDefault(c => c.award_id == DeleteObj.award_id);
                    DelObj.isActive = DeleteObj.isActive;
                    DelObj.isdelete = DeleteObj.isdelete;
                    DelObj.delete_datetime = DeleteObj.delete_datetime;
                    DelObj.delete_user_id = DeleteObj.delete_user_id;

                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {

                    return false;
                }
            }
        }
        #endregion

        #region Blood Group View

        [OperationContract]
        public IEnumerable<EmployeeBloodGroupandHealthView> Get_BloodGroupandHealthView()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.EmployeeBloodGroupandHealthViews.Where(c => c.isdelete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {

                    return null;
                }
            }
        }

        [OperationContract]
        public bool Delete_Blood(dtl_Employee_Blood_and_Health DeleteObj)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    dtl_Employee_Blood_and_Health DelObj = context.dtl_Employee_Blood_and_Health.FirstOrDefault(c => c.emp_blood_type_id == DeleteObj.emp_blood_type_id);
                    DelObj.isActive = DeleteObj.isActive;
                    DelObj.isdelete = DeleteObj.isdelete;
                    DelObj.delete_datetime = DeleteObj.delete_datetime;
                    DelObj.delete_user_id = DeleteObj.delete_user_id;

                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {
                    return false;
                }


            }
        }



        #endregion


        [OperationContract]
        public IEnumerable<EmployeeOtherOfficialDetail> Get_OfficialDetailsView()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.EmployeeOtherOfficialDetails.Where(c => c.isdelete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {

                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<EmployeeDetailsContact> Get_ContactDetailsView()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.EmployeeDetailsContacts.Where(c => c.isdelete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {

                    return null;
                }
            }
        }


        [OperationContract]
        public IEnumerable<EmployeeOtherBasicdetail> Get_EmployeeOtherBasicdetailView()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.EmployeeOtherBasicdetails.Where(c => c.isdelete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;

                }
                catch (Exception)
                {
                    return null;
                }
            }
        }


        #endregion

        #endregion

        #region Dimal

        #region Employee Co-related

        [OperationContract]
        public IEnumerable<dtl_employee_correlate_task> GetEmployeeCoRelatedTask()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.dtl_employee_correlate_task.ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }

            }
        }

        [OperationContract]
        public bool SaveEmployeeCoRelatedTask(IEnumerable<dtl_employee_correlate_task> EmployeeList)
        {
            using (var context = new ERPEntities())
            {
                foreach (var Employee in EmployeeList)
                {
                    if (context.dtl_employee_correlate_task.Count(c => c.employee_id == Employee.employee_id && c.correlate == Employee.correlate) == 0)
                    {
                        context.dtl_employee_correlate_task.AddObject(Employee);
                    }
                }

                return validateSaveUpdate(context.SaveChanges());
            }
        }

        [OperationContract]
        public bool DeleteEmployeeCoRelatedTask(dtl_employee_correlate_task Employee)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    dtl_employee_correlate_task DeleteObj = context.dtl_employee_correlate_task.FirstOrDefault(c => c.record_id == Employee.record_id);
                    context.dtl_employee_correlate_task.DeleteObject(DeleteObj);

                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }


        #endregion

        #endregion

        #region MCN

        #region EmployeeBasicRuleName
        [OperationContract]
        public IEnumerable<z_EmployeeBasicRuleName> GetEmployeeBasicRuleName()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_EmployeeBasicRuleName.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        #endregion

        #region Assigning Basic Salary

        [OperationContract]
        public IEnumerable<dtl_EmployeeBasicSalary> GetEmployeeBasicSalary()
        {
            using (var context = new ERPEntities())
            {
                var result = context.dtl_EmployeeBasicSalary.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public bool SaveEmployeeBasicSalary(dtl_EmployeeBasicSalary BasicSalary)
        {
            bool isSuccess = false;
            try
            {
                if (BasicSalary != null)
                {
                    using (var context = new ERPEntities())
                    {
                        try
                        {
                            dtl_EmployeeBasicSalary testBasic = context.dtl_EmployeeBasicSalary.First(c => c.employee_id == BasicSalary.employee_id && c.assigningRuleId == BasicSalary.assigningRuleId);
                            if (testBasic != null)
                            {
                                testBasic.amount = BasicSalary.amount;
                                testBasic.assigningRuleId = BasicSalary.assigningRuleId;
                                testBasic.employee_id = BasicSalary.employee_id;
                                testBasic.update_user_id = BasicSalary.update_user_id;
                                testBasic.isactive = true;
                                int i = context.SaveChanges();
                                isSuccess = validateSaveUpdate(i);
                                return isSuccess;
                            }
                        }
                        catch
                        {
                            dtl_EmployeeBasicSalary newBasic = new dtl_EmployeeBasicSalary();
                            newBasic = BasicSalary;
                            context.dtl_EmployeeBasicSalary.AddObject(newBasic);
                            return validateSaveUpdate(context.SaveChanges());
                        }
                    }
                }
            }
            catch (Exception)
            {

                return isSuccess = false;
            }
            return isSuccess;
        }

        #endregion

        [OperationContract]
        public IEnumerable<ViewBasicSalary> GetAllBasicSalary()
        {
            using (var context = new ERPEntities())
            {
                var result = context.ViewBasicSalaries.ToList();
                //result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public bool SaveViewBasicSalary(IEnumerable<ViewBasicSalary> le)
        {
            return true;
        }


        #endregion



        [OperationContract]
        private bool SaveEmployeeLeaveDataFromExcel(IEnumerable<dtl_EmployeeLeave> leaveList)
        {
            bool isSucess = false;
            try
            {
                if (leaveList != null)
                {
                    using (var context = new ERPEntities())
                    {
                        foreach (var item in leaveList)
                        {
                            context.dtl_EmployeeLeave.AddObject(item);
                        }
                        int i = context.SaveChanges();
                        isSucess = validateSaveUpdate(i);
                    }
                }
                return isSucess;
            }
            catch (Exception)
            {

                return isSucess = false;
            }

        }

        [OperationContract]
        public string GetConnection()
        {
            try
            {
                return ConfigurationManager.ConnectionStrings["ERPConnectionString"].ConnectionString;
            }
            catch (Exception)
            {

                return "";
            }
        }

        [OperationContract]
        public IEnumerable<trns_EmployeePeriodQunatity> checkEmployeePeriodQuntityExist(Guid currentRule, Guid currentPeriod, Guid currntEmployee)
        {
            using (var context = new ERPEntities())
            {
                var result = context.trns_EmployeePeriodQunatity.Where(c => c.rule_id == currentRule && c.period_id == currentPeriod && c.employee_id == currntEmployee).ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<dtl_EmployeeRule> checkEmployeePeriodQuntitySpecialAmount(Guid currentEmployeeid, Guid currentRuleid)
        {
            using (var context = new ERPEntities())
            {
                var result = context.dtl_EmployeeRule.Where(c => c.rule_id == currentRuleid && c.employee_id == currentEmployeeid).ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public bool UpdateSinglePeriodQuntity(trns_EmployeePeriodQunatity currne_quntity)
        {
            bool IsSuccess = false;

            using (var context = new ERPEntities())
            {
                if (currne_quntity != null)
                {
                    trns_EmployeePeriodQunatity newquntity = context.trns_EmployeePeriodQunatity.FirstOrDefault(c => c.rule_id == currne_quntity.rule_id && c.period_id == currne_quntity.period_id && c.employee_id == currne_quntity.employee_id);
                    newquntity.quantity = currne_quntity.quantity;
                    newquntity.modified_datetime = currne_quntity.modified_datetime;
                    newquntity.modified_user_id = currne_quntity.modified_user_id;
                    int i = context.SaveChanges();
                    return IsSuccess = validateSaveUpdate(i);
                }
            }
            return IsSuccess;
        }



        [OperationContract]
        public bool UpdateSpecialAmount(dtl_EmployeeRule currentRule)
        {
            bool IsSuccess = false;
            using (var context = new ERPEntities())
            {
                if (currentRule != null)
                {
                    dtl_EmployeeRule newrule = context.dtl_EmployeeRule.FirstOrDefault(c => c.rule_id == currentRule.rule_id && c.employee_id == currentRule.employee_id);
                    newrule.special_amount = currentRule.special_amount;
                    newrule.modified_datetime = currentRule.modified_datetime;
                    newrule.modified_user_id = currentRule.modified_user_id;
                    int i = context.SaveChanges();
                    return IsSuccess = validateSaveUpdate(i);
                }
            }
            return IsSuccess;
        }


        [OperationContract]
        private bool saveQuantityFromAttendanceDataMigration(IEnumerable<trns_EmployeePeriodQunatity> quntity, Guid periodid)
        {
            try
            {
                using (var context = new ERPEntities())
                {


                    foreach (trns_EmployeePeriodQunatity qty in quntity)
                    {
                        //CurrentPeriodQuntity=PeriodQuntity.FirstOrDefault
                        //if(PeriodQuntity !=null)
                        trns_EmployeePeriodQunatity upadete = context.trns_EmployeePeriodQunatity.FirstOrDefault(t => t.rule_id == qty.rule_id && t.period_id == periodid);
                        if (upadete != null)
                        {
                            upadete.quantity = qty.quantity;
                        }
                        else
                        {
                            context.trns_EmployeePeriodQunatity.AddObject(qty);
                        }
                    }

                    return validateSaveUpdate(context.SaveChanges());
                }



            }
            catch (Exception)
            {
                return false;
            }
        }

        #region Holiday Service Method
        [OperationContract]
        public bool SaveHoliday(z_Holiday holiday)
        {
            if (holiday != null)
            {
                using (var context = new ERPEntities())
                {
                    if (context != null)
                    {
                        z_Holiday newHoliday = new z_Holiday();
                        newHoliday = holiday;
                        context.z_Holiday.AddObject(newHoliday);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            return false;
        }

        [OperationContract]
        public bool UpdateHoliday(z_Holiday holiday)
        {
            bool IsSuccess = false;
            using (var context = new ERPEntities())
            {
                if (holiday != null)
                {
                    z_Holiday newHoliday = context.z_Holiday.FirstOrDefault(c => c.holiday_id == holiday.holiday_id);
                    newHoliday.holiday_Date = holiday.holiday_Date;
                    newHoliday.holiday_Description = holiday.holiday_Description;
                    newHoliday.isPublicHoliday = holiday.isPublicHoliday;
                    newHoliday.isBankHoliday = holiday.isBankHoliday;
                    newHoliday.isMercantileHoliday = holiday.isMercantileHoliday;
                    newHoliday.isPoyaHoliday = holiday.isPoyaHoliday;
                    newHoliday.isCompanyHoliday = holiday.isCompanyHoliday;
                    int i = context.SaveChanges();
                    return IsSuccess = validateSaveUpdate(i);
                }
            }
            return IsSuccess;
        }
        [OperationContract]
        public bool DeleteHoliday(z_Holiday holiday)
        {
            bool IsSuccess = false;
            using (var context = new ERPEntities())
            {
                if (holiday != null)
                {
                    z_Holiday newHoliday = context.z_Holiday.FirstOrDefault(c => c.holiday_id == holiday.holiday_id);
                    //newHoliday.holiday_Date = holiday.holiday_Date;
                    newHoliday.isActive = holiday.isActive;
                    int i = context.SaveChanges();
                    return IsSuccess = validateSaveUpdate(i);
                }
            }
            return IsSuccess;
        }
        #endregion



        [OperationContract]
        public IEnumerable<dtl_AttendanceBonus> GetAttendanceBonusDetail()
        {
            using (var context = new ERPEntities())
            {
                var result = context.dtl_AttendanceBonus.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<z_Datamigration_Configuration> GetDatamigrationConfiguration()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_Datamigration_Configuration.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }



        [OperationContract]
        public bool AttendanceBonusUpdate(IEnumerable<dtl_EmployeeRule> up_rule)
        {
            bool IsSuccess = false;
            using (var context = new ERPEntities())
            {
                if (up_rule != null)
                {
                    foreach (var item in up_rule)
                    {
                        dtl_EmployeeRule newrule = context.dtl_EmployeeRule.FirstOrDefault(c => c.rule_id == item.rule_id && c.employee_id == item.employee_id);
                        newrule.special_amount = item.special_amount;
                        newrule.modified_datetime = item.modified_datetime;
                        newrule.modified_user_id = item.modified_user_id;
                        context.SaveChanges();
                    }

                    return IsSuccess = true;
                }
            }
            return IsSuccess;

        }

        [OperationContract]
        public IEnumerable<Emp_Sp_Employee> GetMasEmployeeFromView()
        {
            using (var context = new ERPEntities())
            {
                var result = context.Emp_Sp_Employee.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }
        [OperationContract]
        public bool ClearRuleData(Guid periodId, Guid ruleId)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.ClearPayrollRuleDetail(ruleId.ToString(), periodId.ToString());
                    return true;
                }
                catch (Exception)
                {

                    return false;
                }

            }
        }


        [OperationContract]
        public IEnumerable<EmployeeSupervisorsView> GetAllEmployeeSupervisor()
        {
            using (var context = new ERPEntities())
            {
                var result = context.EmployeeSupervisorsViews.ToList();
                result.ForEach(c => context.Detach(c));
                return result;
            }
        }

        #region Praveen Operations

        #region Performance

        #region Tasks

        #region Supervisors

        [OperationContract]
        public IEnumerable<dtl_EmployeeSupervisor> GetEmployeesBySupervisor(Guid Supervisor_id)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var results = context.dtl_EmployeeSupervisor.Where(c => c.supervisor_employee_id == Supervisor_id).ToList();
                    results.ForEach(e => context.Detach(e));
                    return results;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<EmployeeSupervisorsByUserView> GetEmployeesBySupervisorUser(Guid User_id, Guid module_id)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var results = context.EmployeeSupervisorsByUserViews.Where(c => c.user_id == User_id && c.module_id == module_id).ToList();
                    results.ForEach(e => context.Detach(e));
                    return results;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public usr_UserEmployee GetUserEmployee(Guid User_id)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.usr_UserEmployee.FirstOrDefault(c => c.user_id == User_id);
                    context.Detach(result);
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }


        [OperationContract]
        public IEnumerable<EmployeeSupervisorsView> GetAllEmployeeSupervisors(Guid module_id)
        {
            using (var context = new ERPEntities())
            {
                var result = context.EmployeeSupervisorsViews.Where(c => c.module_id == module_id).ToList();
                result.ForEach(c => context.Detach(c));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<EmployeeSearchView> GetAllSupervisorEmployeesByModule(Guid module_id)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.EmployeeSearchViews.Where(c => context.dtl_EmployeeSupervisor.Count(d => c.employee_id == d.employee_id && d.module_id == module_id) > 0 && c.isActive == true).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public List<Guid> GetAllSupervisorLevelEmployeesByModule(Guid module_id, Guid Level)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.EmployeeSearchViews.Where(c => context.dtl_EmployeeSupervisor.Count(d => c.employee_id == d.employee_id && d.module_id == module_id && d.supervisor_level_id == Level) > 0 && c.isActive == true).Select(c => c.employee_id).ToList();
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        #endregion

        #region Task Priority

        [OperationContract]
        public IEnumerable<z_TaskPriority> GetTaskPriorities()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.z_TaskPriority.Where(c => c.isdelete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        #endregion

        #region Task Catregory

        [OperationContract]
        public IEnumerable<z_TaskCategory> GetTaskCategories()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.z_TaskCategory.Where(c => c.isdelete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public bool SaveTaskCategories(z_TaskCategory TaskCategory)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    context.z_TaskCategory.AddObject(TaskCategory);
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public int UpdateTaskCategories(z_TaskCategory TaskCategory)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    z_TaskCategory SaveObject = context.z_TaskCategory.FirstOrDefault(c => c.Task_Category_ID == TaskCategory.Task_Category_ID);
                    if (context.mas_TaskSubCategory.Count(c => c.Task_Category_ID == TaskCategory.Task_Category_ID && c.isdelete == false) > 0)
                        return 2;

                    else
                    {
                        SaveObject.Task_Category_Name = TaskCategory.Task_Category_Name;
                        SaveObject.Task_Category_Description = TaskCategory.Task_Category_Description;
                        SaveObject.modified_user_id = TaskCategory.modified_user_id;
                        SaveObject.modified_datetime = TaskCategory.modified_datetime;
                        SaveObject.Is_active = TaskCategory.Is_active;

                        return context.SaveChanges();
                    }
                }
            }
            catch (Exception)
            {
                return 0;
            }
        }

        [OperationContract]
        public int DeleteTaskCategories(z_TaskCategory TaskCategory)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    z_TaskCategory DeleteObject = context.z_TaskCategory.FirstOrDefault(c => c.Task_Category_ID == TaskCategory.Task_Category_ID);
                    if (context.mas_TaskSubCategory.Count(c => c.Task_Category_ID == TaskCategory.Task_Category_ID && c.isdelete == false) > 0)
                        return 2;

                    else
                    {
                        DeleteObject.Is_active = TaskCategory.Is_active;
                        DeleteObject.isdelete = TaskCategory.isdelete;
                        DeleteObject.delete_user_id = TaskCategory.delete_user_id;
                        DeleteObject.delete_datetime = TaskCategory.delete_datetime;

                        return context.SaveChanges();
                    }
                }
            }
            catch (Exception)
            {
                return 0;
            }
        }

        #endregion

        #region Task Subcategory

        [OperationContract]
        public IEnumerable<TaskSubcategoriesView> GetTaskSubcategories()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.TaskSubcategoriesViews.Where(c => c.isdelete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public bool SaveTaskSubcategories(mas_TaskSubCategory TaskSubCategory)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    context.mas_TaskSubCategory.AddObject(TaskSubCategory);
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public int UpdateTaskSubcategories(mas_TaskSubCategory TaskSubCategory)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    mas_TaskSubCategory SaveObject = context.mas_TaskSubCategory.FirstOrDefault(c => c.Task_Subcategory_ID == TaskSubCategory.Task_Subcategory_ID);
                    if (context.mas_Tasks.Count(c => c.Task_Subcategory_ID == TaskSubCategory.Task_Subcategory_ID && c.isdelete == false) > 0)
                        return 2;

                    else
                    {
                        SaveObject.Task_Category_ID = TaskSubCategory.Task_Category_ID;
                        SaveObject.Task_Subcategory_Name = TaskSubCategory.Task_Subcategory_Name;
                        SaveObject.Task_Subcategory_Description = TaskSubCategory.Task_Subcategory_Description;
                        SaveObject.Is_active = TaskSubCategory.Is_active;

                        return context.SaveChanges();
                    }
                }
            }
            catch (Exception)
            {
                return 0;
            }
        }

        [OperationContract]
        public int DeleteTaskSubcategories(mas_TaskSubCategory TaskSubCategory)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    mas_TaskSubCategory SaveObject = context.mas_TaskSubCategory.FirstOrDefault(c => c.Task_Category_ID == TaskSubCategory.Task_Category_ID && c.Task_Subcategory_ID == TaskSubCategory.Task_Subcategory_ID);
                    if (context.mas_Tasks.Count(c => c.Task_Subcategory_ID == TaskSubCategory.Task_Subcategory_ID && c.isdelete == false) > 0)
                        return 2;
                    else
                    {
                        SaveObject.Is_active = TaskSubCategory.Is_active;
                        SaveObject.isdelete = TaskSubCategory.isdelete;

                        return context.SaveChanges();
                    }
                }
            }
            catch (Exception)
            {
                return 0;
            }
        }

        #endregion

        #region Tasks

        [OperationContract]
        public IEnumerable<EmployeeTasksView> GetEmployeeTasks(Guid LoggedUser) //if the logged user id is an empty guid, all the records will be selected
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (LoggedUser == Guid.Empty)
                    {
                        var result = context.EmployeeTasksViews.Where(c => c.isdelete == false).ToList();
                        result.ForEach(d => context.Detach(d));
                        return result;
                    }
                    else
                    {
                        var result = context.EmployeeTasksViews.Where(c => c.isdelete == false && c.user_id == LoggedUser).ToList();
                        result.ForEach(d => context.Detach(d));
                        return result;
                    }
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public IEnumerable<EmployeeTasksView> GetEmployeeTasksByDate(DateTime FromDate, DateTime ToDate, Guid LoggedUser)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (LoggedUser == Guid.Empty)
                    {
                        var result = context.EmployeeTasksViews.Where(c => c.isdelete == false && c.Task_StartDate >= FromDate && c.Task_EndDate <= ToDate).ToList();
                        result.ForEach(d => context.Detach(d));
                        return result;
                    }
                    else
                    {
                        var result = context.EmployeeTasksViews.Where(c => c.isdelete == false && c.Task_StartDate >= FromDate && c.Task_EndDate <= ToDate && c.user_id == LoggedUser).ToList();
                        result.ForEach(d => context.Detach(d));
                        return result;
                    }
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public EmployeeTasksView GetEmployeeTaskBySubtask(EmployeeSubTasksDetailForUserView Subtask)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.EmployeeTasksViews.FirstOrDefault(c => c.Task_ID == Subtask.Task_ID);
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public bool SaveEmployeeTasks(mas_Tasks Tasks, bool Reassign)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (Reassign)
                    {
                        context.mas_Tasks.AddObject(Tasks);

                        dtl_EmployeeSubTasks UpdateObj = context.dtl_EmployeeSubTasks.FirstOrDefault(c => c.SubTask_ID == Tasks.Task_From && c.Employee_ID == Tasks.Task_From_Employee);
                        UpdateObj.Is_Reassigned = true;

                        trns_EmployeeTaskProgress Record = new trns_EmployeeTaskProgress();
                        Record.Remarks = "Employee => Employee Reassigned this task";
                        Record.SubTask_ID = Tasks.Task_From;
                        Record.Employee_ID = (Guid)Tasks.Task_From_Employee;
                        Record.Is_active = true;
                        Record.save_datetime = Tasks.save_datetime;
                        Record.save_user_id = Tasks.save_user_id;

                        context.trns_EmployeeTaskProgress.AddObject(Record);

                        return validateSaveUpdate(context.SaveChanges());

                    }
                    else
                    {
                        context.mas_Tasks.AddObject(Tasks);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public int UpdateEmployeeTasks(mas_Tasks Tasks)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    mas_Tasks UpdateObj = context.mas_Tasks.FirstOrDefault(c => c.Task_ID == Tasks.Task_ID);

                    UpdateObj.Task_Subcategory_ID = Tasks.Task_Subcategory_ID;
                    UpdateObj.Task_From = Tasks.Task_From;
                    UpdateObj.Task_Name = Tasks.Task_Name;
                    UpdateObj.Task_Description = Tasks.Task_Description;
                    UpdateObj.Task_StartDate = Tasks.Task_StartDate;
                    UpdateObj.Task_EndDate = Tasks.Task_EndDate;
                    UpdateObj.Is_active = Tasks.Is_active;
                    UpdateObj.modified_user_id = Tasks.modified_user_id;
                    UpdateObj.modified_datetime = Tasks.modified_datetime;

                    return context.SaveChanges();
                }
            }
            catch (Exception)
            {
                return 0;
            }
        }

        [OperationContract]
        public int DeleteEmployeeTasks(mas_Tasks Tasks)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    mas_Tasks DeleteObj = context.mas_Tasks.FirstOrDefault(c => c.Task_ID == Tasks.Task_ID);
                    if (context.dtl_SubTasks.Count(c => c.Task_ID == Tasks.Task_ID && c.isdelete == false) > 0)
                        return 2;
                    else
                    {
                        DeleteObj.Is_active = Tasks.Is_active;
                        DeleteObj.isdelete = Tasks.isdelete;
                        DeleteObj.delete_user_id = Tasks.delete_user_id;
                        DeleteObj.delete_datetime = Tasks.delete_datetime;

                        return context.SaveChanges();
                    }
                }
            }
            catch (Exception)
            {
                return 0;
            }
        }

        #endregion

        #region Subtasks

        [OperationContract]
        public IEnumerable<EmployeeSubTasksView> GetEmployeeSubTasks(Guid LoggedUser)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.EmployeeSubTasksViews.Where(c => c.isdelete == false && c.user_id == LoggedUser).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public IEnumerable<EmployeeSubTasksView> GetEmployeeSubTasksByDate(DateTime FromDate, DateTime ToDate, Guid LoggedUser)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.EmployeeSubTasksViews.Where(c => c.isdelete == false && c.SubTask_StartDate >= FromDate && c.SubTask_EndDate <= ToDate && c.user_id == LoggedUser).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public IEnumerable<EmployeeSubTasksDetailView> GetEmployeeSubTaskDeatils(Guid LoggedUser)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.EmployeeSubTasksDetailViews.Where(c => c.isdelete == false && c.user_id == LoggedUser).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public IEnumerable<EmployeeSubTasksDetailView> GetEmployeeSubTaskDeatilsByDate(DateTime FromDate, DateTime ToDate, Guid LoggedUser)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.EmployeeSubTasksDetailViews.Where(c => c.isdelete == false && c.SubTask_StartDate >= FromDate && c.SubTask_EndDate <= ToDate && c.user_id == LoggedUser).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public bool SaveUpdateEmployeeSubtasks(IEnumerable<dtl_SubTasks> Subtasks)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    foreach (var Subtask in Subtasks)
                    {
                        if (context.dtl_SubTasks.Count(c => c.SubTask_ID == Subtask.SubTask_ID) > 0)
                        {
                            dtl_SubTasks UpdateObj = context.dtl_SubTasks.FirstOrDefault(c => c.SubTask_ID == Subtask.SubTask_ID);
                            UpdateObj.SubTask_StartDate = Subtask.SubTask_StartDate;
                            UpdateObj.SubTask_StartTime = Subtask.SubTask_StartTime;
                            UpdateObj.SubTask_EndDate = Subtask.SubTask_EndDate;
                            UpdateObj.SubTask_EndTime = Subtask.SubTask_EndTime;
                            UpdateObj.SubTaskName = Subtask.SubTaskName;
                            UpdateObj.Is_Reassignable = Subtask.Is_Reassignable;
                            UpdateObj.Task_Proprity_ID = Subtask.Task_Proprity_ID;
                            UpdateObj.evaluation_rate_group_id = Subtask.evaluation_rate_group_id;
                            UpdateObj.Is_active = Subtask.Is_active;
                            UpdateObj.modified_user_id = Subtask.modified_user_id;
                            UpdateObj.modified_datetime = Subtask.modified_datetime;

                            List<dtl_EmployeeSubTasks> delEmps = UpdateObj.dtl_EmployeeSubTasks.Where(c => c.isdelete == false && !Subtask.dtl_EmployeeSubTasks.Any(d => d.Employee_ID == c.Employee_ID)).ToList();

                            if (delEmps != null && delEmps.Count > 0)
                            {
                                foreach (var item in delEmps)
                                {
                                    dtl_EmployeeSubTasks DeleteEmp = context.dtl_EmployeeSubTasks.FirstOrDefault(c => c.Employee_ID == item.Employee_ID && c.SubTask_ID == item.SubTask_ID);
                                    DeleteEmp.Is_active = false;
                                    DeleteEmp.isdelete = true;
                                    DeleteEmp.delete_datetime = Subtask.modified_datetime;
                                    DeleteEmp.delete_user_id = Subtask.modified_user_id;

                                    try
                                    {
                                        trns_EmployeeTaskProgress Progress = new trns_EmployeeTaskProgress();
                                        Progress.Employee_ID = item.Employee_ID;
                                        Progress.SubTask_ID = item.SubTask_ID;
                                        Progress.Remarks = "Supervisor => This employee has been removed from a task by the supervisor";
                                        Progress.Is_active = true;
                                        Progress.save_datetime = Subtask.modified_datetime;
                                        Progress.save_user_id = Subtask.modified_user_id;

                                        context.trns_EmployeeTaskProgress.AddObject(Progress);
                                    }
                                    catch (Exception)
                                    {

                                    }

                                }
                            }


                            foreach (var Employee in Subtask.dtl_EmployeeSubTasks)
                            {
                                if (context.dtl_EmployeeSubTasks.Count(c => c.Employee_ID == Employee.Employee_ID && c.SubTask_ID == Employee.SubTask_ID) > 0)
                                {
                                    if (context.dtl_EmployeeSubTasks.Count(c => c.Employee_ID == Employee.Employee_ID && c.SubTask_ID == Employee.SubTask_ID && c.isdelete == true) > 0)
                                    {
                                        dtl_EmployeeSubTasks DeleteEmp = context.dtl_EmployeeSubTasks.FirstOrDefault(c => c.Employee_ID == Employee.Employee_ID && c.SubTask_ID == Employee.SubTask_ID);
                                        DeleteEmp.Is_active = true;
                                        DeleteEmp.isdelete = false;
                                        DeleteEmp.modified_datetime = Subtask.modified_datetime;
                                        DeleteEmp.modified_user_id = Subtask.modified_user_id;

                                        try
                                        {
                                            trns_EmployeeTaskProgress Progress = new trns_EmployeeTaskProgress();
                                            Progress.Employee_ID = DeleteEmp.Employee_ID;
                                            Progress.SubTask_ID = DeleteEmp.SubTask_ID;
                                            Progress.Remarks = "Supervisor => This employee has been reassigned to a task by the supervisor";
                                            Progress.Is_active = true;
                                            Progress.save_datetime = Subtask.modified_datetime;
                                            Progress.save_user_id = Subtask.modified_user_id;

                                            context.trns_EmployeeTaskProgress.AddObject(Progress);
                                        }
                                        catch (Exception)
                                        {

                                        }
                                    }
                                }
                                else
                                {
                                    dtl_EmployeeSubTasks addedEmp = new dtl_EmployeeSubTasks();
                                    addedEmp.Employee_ID = Employee.Employee_ID;
                                    addedEmp.SubTask_ID = Employee.SubTask_ID;
                                    addedEmp.evaluation_rate_id = Employee.evaluation_rate_id;
                                    addedEmp.isdelete = Employee.isdelete;
                                    addedEmp.Is_active = Employee.Is_active;
                                    addedEmp.is_Finished = Employee.is_Finished;
                                    addedEmp.is_pending = Employee.is_pending;
                                    addedEmp.is_accepted = Employee.is_accepted;
                                    addedEmp.is_rejected = Employee.is_rejected;
                                    addedEmp.Is_Reassigned = Employee.Is_Reassigned;
                                    addedEmp.is_expired = Employee.is_expired;
                                    addedEmp.save_datetime = Subtask.save_datetime;
                                    addedEmp.save_user_id = Subtask.save_user_id;
                                    context.dtl_EmployeeSubTasks.AddObject(addedEmp);

                                    try
                                    {
                                        trns_EmployeeTaskProgress Progress = new trns_EmployeeTaskProgress();
                                        Progress.Employee_ID = addedEmp.Employee_ID;
                                        Progress.SubTask_ID = addedEmp.SubTask_ID;
                                        Progress.Remarks = "Supervisor => This employee has been assigned to a task by the supervisor";
                                        Progress.Is_active = true;
                                        Progress.save_datetime = Subtask.modified_datetime;
                                        Progress.save_user_id = Subtask.modified_user_id;

                                        context.trns_EmployeeTaskProgress.AddObject(Progress);
                                    }
                                    catch (Exception)
                                    {

                                    }
                                }
                            }
                        }
                        else
                        {
                            Subtask.modified_user_id = null;
                            Subtask.modified_datetime = null;

                            foreach (var item in Subtask.dtl_EmployeeSubTasks)
                            {
                                item.save_user_id = Subtask.save_user_id;
                                item.save_datetime = Subtask.save_datetime;

                                try
                                {
                                    trns_EmployeeTaskProgress Progress = new trns_EmployeeTaskProgress();
                                    Progress.Employee_ID = item.Employee_ID;
                                    Progress.SubTask_ID = item.SubTask_ID;
                                    Progress.Remarks = "Supervisor => This employee has been assigned to a task by the supervisor";
                                    Progress.Is_active = true;
                                    Progress.save_datetime = Subtask.save_datetime;
                                    Progress.save_user_id = Subtask.save_user_id;

                                    item.trns_EmployeeTaskProgress.Add(Progress);
                                }
                                catch (Exception)
                                {

                                }
                            }

                            //Subtask.dtl_EmployeeSubTasks.ToList().ForEach(c => c.save_user_id = Subtask.save_user_id);
                            //Subtask.dtl_EmployeeSubTasks.ToList().ForEach(c => c.save_datetime = Subtask.save_datetime);
                            context.dtl_SubTasks.AddObject(Subtask);
                        }
                    }

                    context.SaveChanges();

                    return true;
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool DeleteEmployeesSubtasks(IEnumerable<dtl_SubTasks> Subtasks)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    foreach (var Subtask in Subtasks)
                    {
                        dtl_SubTasks DeleteObj = context.dtl_SubTasks.FirstOrDefault(c => c.SubTask_ID == Subtask.SubTask_ID);
                        DeleteObj.Is_active = false;
                        DeleteObj.isdelete = true;
                        DeleteObj.delete_datetime = Subtask.delete_datetime;
                        DeleteObj.delete_user_id = Subtask.delete_user_id;

                        foreach (var Employee in DeleteObj.dtl_EmployeeSubTasks)
                        {
                            dtl_EmployeeSubTasks DeleteEmp = context.dtl_EmployeeSubTasks.FirstOrDefault(c => c.Employee_ID == Employee.Employee_ID && c.SubTask_ID == Employee.SubTask_ID);
                            DeleteEmp.isdelete = true;
                            DeleteEmp.Is_active = false;
                            DeleteEmp.delete_datetime = DeleteObj.delete_datetime;
                            DeleteEmp.delete_user_id = DeleteObj.delete_user_id;
                        }
                    }

                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        #endregion

        #region UserTasks

        [OperationContract]
        public IEnumerable<EmployeeSubTasksDetailForUserView> GetEmployeeSubtaskDetailsForUser(Guid Employee_ID, bool Type)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (Type)
                    {
                        var result = context.EmployeeSubTasksDetailForUserViews.Where(c => c.Employee_ID == Employee_ID && c.isdelete == false && c.is_Removed == false && c.Is_active == true && c.is_pending == false && ((c.Is_Reassigned == true && c.is_expired == true) || (c.Is_Reassigned == true && c.is_expired == false) || (c.Is_Reassigned == false && c.is_expired == true) || (c.Is_Reassigned == false && c.is_expired == false))).ToList();
                        result.ForEach(c => context.Detach(c));
                        return result;
                    }
                    else
                    {
                        var result = context.EmployeeSubTasksDetailForUserViews.Where(c => c.user_id == Employee_ID && c.isdelete == false && c.is_Removed == false && c.Is_active == true).ToList();
                        result.ForEach(c => context.Detach(c));
                        return result;
                    }
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public bool AcceptRejectSubtasks(IEnumerable<dtl_EmployeeSubTasks> Subtasks, bool Status, string Remark)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (Status)
                    {
                        foreach (var subtask in Subtasks)
                        {
                            dtl_EmployeeSubTasks UpdateObj = context.dtl_EmployeeSubTasks.FirstOrDefault(c => c.SubTask_ID == subtask.SubTask_ID && c.Employee_ID == subtask.Employee_ID);
                            trns_EmployeeTaskProgress NewRecord = new trns_EmployeeTaskProgress();

                            UpdateObj.is_accepted = true;

                            try
                            {
                                NewRecord.Employee_ID = UpdateObj.Employee_ID;
                                NewRecord.SubTask_ID = UpdateObj.SubTask_ID;
                                NewRecord.Remarks = Remark;
                                NewRecord.Is_active = true;
                                NewRecord.save_datetime = subtask.save_datetime;
                                NewRecord.save_user_id = subtask.save_user_id;

                                context.trns_EmployeeTaskProgress.AddObject(NewRecord);
                            }
                            catch (Exception)
                            {

                            }
                        }

                        return validateSaveUpdate(context.SaveChanges());
                    }
                    else
                    {
                        foreach (var subtask in Subtasks)
                        {
                            dtl_EmployeeSubTasks UpdateObj = context.dtl_EmployeeSubTasks.FirstOrDefault(c => c.SubTask_ID == subtask.SubTask_ID && c.Employee_ID == subtask.Employee_ID);
                            trns_EmployeeTaskProgress NewRecord = new trns_EmployeeTaskProgress();

                            UpdateObj.is_rejected = true;

                            try
                            {
                                NewRecord.Employee_ID = UpdateObj.Employee_ID;
                                NewRecord.SubTask_ID = UpdateObj.SubTask_ID;
                                NewRecord.Remarks = Remark;
                                NewRecord.Is_active = true;
                                NewRecord.save_datetime = subtask.save_datetime;
                                NewRecord.save_user_id = subtask.save_user_id;

                                context.trns_EmployeeTaskProgress.AddObject(NewRecord);
                            }
                            catch (Exception)
                            {

                            }
                        }

                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool UpdateTaskProgress(trns_EmployeeTaskProgress Task, bool finished)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (finished)
                    {
                        dtl_EmployeeSubTasks UpdateObj = context.dtl_EmployeeSubTasks.FirstOrDefault(c => c.SubTask_ID == Task.SubTask_ID && c.Employee_ID == Task.Employee_ID);
                        UpdateObj.started_datetime = UpdateObj.started_datetime == null ? Task.save_datetime : UpdateObj.started_datetime;
                        UpdateObj.is_pending = true;
                        UpdateObj.finished_datetime = Task.save_datetime;

                        context.trns_EmployeeTaskProgress.AddObject(Task);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                    else
                    {
                        dtl_EmployeeSubTasks UpdateObj = context.dtl_EmployeeSubTasks.FirstOrDefault(c => c.SubTask_ID == Task.SubTask_ID && c.Employee_ID == Task.Employee_ID);
                        UpdateObj.started_datetime = UpdateObj.started_datetime == null ? Task.save_datetime : UpdateObj.started_datetime;
                        context.trns_EmployeeTaskProgress.AddObject(Task);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public IEnumerable<EmployeeSubtasksProgressView> GetTaskProgressByUser(Guid User_id)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.EmployeeSubtasksProgressViews.Where(c => c.user_id == User_id).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public IEnumerable<EmployeeSubtasksProgressView> GetTaskProgressByPendingSubtasks(IEnumerable<EmployeeSubTasksDetailForUserView> Subtasks)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.EmployeeSubtasksProgressViews.Where(c => c.Is_active == true).ToList();
                    result = result.Where(c => Subtasks.Count(d => d.Employee_ID == c.Employee_ID && d.SubTask_ID == c.SubTask_ID) > 0).ToList();
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public bool ApproveRejectTasks(EmployeeSubTasksDetailForUserView Task, bool Status, string Remark)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (Status)
                    {
                        dtl_EmployeeSubTasks EmpUpdateObj = context.dtl_EmployeeSubTasks.FirstOrDefault(c => c.Employee_ID == Task.Employee_ID && c.SubTask_ID == Task.SubTask_ID);
                        EmpUpdateObj.modified_datetime = Task.save_datetime;
                        EmpUpdateObj.modified_user_id = Task.save_user_id;
                        EmpUpdateObj.evaluation_rate_id = Task.evaluation_rate_id;
                        EmpUpdateObj.is_pending = false;
                        EmpUpdateObj.is_Finished = true;
                        EmpUpdateObj.Is_active = false;

                        foreach (var item in context.trns_EmployeeTaskProgress.Where(c => c.SubTask_ID == Task.SubTask_ID && c.Employee_ID == Task.Employee_ID))
                        {
                            trns_EmployeeTaskProgress TaskRemarkUpdateobj = context.trns_EmployeeTaskProgress.FirstOrDefault(c => c.Record_ID == item.Record_ID);
                            TaskRemarkUpdateobj.Is_active = false;
                        }

                        trns_EmployeeTaskProgress TaskRemark = new trns_EmployeeTaskProgress();
                        TaskRemark.Employee_ID = Task.Employee_ID;
                        TaskRemark.SubTask_ID = (int)Task.SubTask_ID;
                        TaskRemark.Remarks = Remark;
                        TaskRemark.Is_active = false;
                        TaskRemark.save_datetime = Task.save_datetime;
                        TaskRemark.save_user_id = Task.save_user_id;

                        context.trns_EmployeeTaskProgress.AddObject(TaskRemark);

                        if (context.dtl_EmployeeSubTasks.Count(c => c.isdelete == false && c.is_Removed == false && c.SubTask_ID == Task.SubTask_ID) - 1 == context.dtl_EmployeeSubTasks.Count(c => c.SubTask_ID == Task.SubTask_ID && c.is_Finished == true))
                        {
                            dtl_SubTasks SbTaskUpdateObj = context.dtl_SubTasks.FirstOrDefault(c => c.SubTask_ID == Task.SubTask_ID);
                            SbTaskUpdateObj.Is_active = false;
                            SbTaskUpdateObj.is_Finished = true;
                            SbTaskUpdateObj.modified_datetime = Task.save_datetime;
                            SbTaskUpdateObj.modified_user_id = Task.save_user_id;
                            SbTaskUpdateObj.finished_datetime = Task.save_datetime;

                            if (context.dtl_SubTasks.Count(c => c.isdelete == false && c.Task_ID == SbTaskUpdateObj.Task_ID) - 1 == context.dtl_SubTasks.Count(c => c.Task_ID == SbTaskUpdateObj.Task_ID && c.is_Finished == true))
                            {
                                mas_Tasks TskUpdateObj = context.mas_Tasks.FirstOrDefault(c => c.Task_ID == SbTaskUpdateObj.Task_ID);
                                TskUpdateObj.modified_datetime = Task.save_datetime;
                                TskUpdateObj.modified_user_id = Task.save_user_id;
                                TskUpdateObj.Is_active = false;
                                TskUpdateObj.is_Finished = true;
                                TskUpdateObj.finished_datetime = Task.finished_datetime;

                                if (TskUpdateObj.Task_From != 0)
                                {
                                    dtl_EmployeeSubTasks RootSubtask = context.dtl_EmployeeSubTasks.FirstOrDefault(c => c.SubTask_ID == TskUpdateObj.Task_From && c.Employee_ID == TskUpdateObj.Task_From_Employee);
                                    RootSubtask.is_pending = true;
                                    RootSubtask.modified_datetime = Task.save_datetime;
                                    RootSubtask.modified_user_id = Task.save_user_id;

                                    trns_EmployeeTaskProgress TaskRemarkobj = new trns_EmployeeTaskProgress();
                                    TaskRemarkobj.SubTask_ID = RootSubtask.SubTask_ID;
                                    TaskRemarkobj.Employee_ID = RootSubtask.Employee_ID;
                                    TaskRemarkobj.Remarks = "Reassigned Task Has been Completed";
                                    TaskRemarkobj.Is_active = true;
                                    TaskRemarkobj.save_datetime = Task.save_datetime;
                                    TaskRemarkobj.save_user_id = Task.save_user_id;

                                    context.trns_EmployeeTaskProgress.AddObject(TaskRemarkobj);
                                }
                            }
                        }

                        return validateSaveUpdate(context.SaveChanges());
                    }
                    else
                    {
                        dtl_EmployeeSubTasks EmpUpdateObj = context.dtl_EmployeeSubTasks.FirstOrDefault(c => c.Employee_ID == Task.Employee_ID && c.SubTask_ID == Task.SubTask_ID);
                        EmpUpdateObj.modified_datetime = Task.save_datetime;
                        EmpUpdateObj.modified_user_id = Task.save_user_id;
                        EmpUpdateObj.is_pending = false;
                        EmpUpdateObj.finished_datetime = null;

                        trns_EmployeeTaskProgress TaskRemark = new trns_EmployeeTaskProgress();
                        TaskRemark.Employee_ID = Task.Employee_ID;
                        TaskRemark.SubTask_ID = (int)Task.SubTask_ID;
                        TaskRemark.Remarks = Remark;
                        TaskRemark.Is_active = true;
                        TaskRemark.save_datetime = Task.save_datetime;
                        TaskRemark.save_user_id = Task.save_user_id;

                        context.trns_EmployeeTaskProgress.AddObject(TaskRemark);

                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool RemoveResetTasks(EmployeeSubTasksDetailForUserView Task, bool Status, string Remark)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (Status)
                    {
                        dtl_EmployeeSubTasks EmpUpdateObj = context.dtl_EmployeeSubTasks.FirstOrDefault(c => c.Employee_ID == Task.Employee_ID && c.SubTask_ID == Task.SubTask_ID);
                        EmpUpdateObj.modified_datetime = Task.save_datetime;
                        EmpUpdateObj.modified_user_id = Task.save_user_id;
                        EmpUpdateObj.is_rejected = false;

                        trns_EmployeeTaskProgress TaskRemark = new trns_EmployeeTaskProgress();
                        TaskRemark.Employee_ID = Task.Employee_ID;
                        TaskRemark.SubTask_ID = (int)Task.SubTask_ID;
                        TaskRemark.Remarks = Remark;
                        TaskRemark.Is_active = true;
                        TaskRemark.save_datetime = Task.save_datetime;
                        TaskRemark.save_user_id = Task.save_user_id;

                        context.trns_EmployeeTaskProgress.AddObject(TaskRemark);

                        return validateSaveUpdate(context.SaveChanges());
                    }

                    else
                    {
                        dtl_EmployeeSubTasks EmpUpdateObj = context.dtl_EmployeeSubTasks.FirstOrDefault(c => c.Employee_ID == Task.Employee_ID && c.SubTask_ID == Task.SubTask_ID);
                        EmpUpdateObj.delete_datetime = Task.save_datetime;
                        EmpUpdateObj.delete_user_id = Task.save_user_id;
                        EmpUpdateObj.Is_active = false;
                        EmpUpdateObj.is_pending = false;
                        EmpUpdateObj.is_Removed = true;

                        foreach (var item in context.trns_EmployeeTaskProgress.Where(c => c.SubTask_ID == Task.SubTask_ID && c.Employee_ID == Task.Employee_ID))
                        {
                            trns_EmployeeTaskProgress TaskRemarkUpdateobj = context.trns_EmployeeTaskProgress.FirstOrDefault(c => c.Record_ID == item.Record_ID);
                            TaskRemarkUpdateobj.Is_active = false;
                        }

                        trns_EmployeeTaskProgress TaskRemark = new trns_EmployeeTaskProgress();
                        TaskRemark.Employee_ID = Task.Employee_ID;
                        TaskRemark.SubTask_ID = (int)Task.SubTask_ID;
                        TaskRemark.Remarks = Remark;
                        TaskRemark.Is_active = false;
                        TaskRemark.save_datetime = Task.save_datetime;
                        TaskRemark.save_user_id = Task.save_user_id;

                        context.trns_EmployeeTaskProgress.AddObject(TaskRemark);

                        if (context.dtl_EmployeeSubTasks.Count(c => c.isdelete == false && c.is_Removed == false && c.SubTask_ID == Task.SubTask_ID) - 1 == context.dtl_EmployeeSubTasks.Count(c => c.SubTask_ID == Task.SubTask_ID && c.is_Finished == true))
                        {
                            dtl_SubTasks SbTaskUpdateObj = context.dtl_SubTasks.FirstOrDefault(c => c.SubTask_ID == Task.SubTask_ID);
                            SbTaskUpdateObj.Is_active = false;
                            SbTaskUpdateObj.is_Finished = true;
                            SbTaskUpdateObj.modified_datetime = Task.save_datetime;
                            SbTaskUpdateObj.modified_user_id = Task.save_user_id;
                            SbTaskUpdateObj.finished_datetime = Task.save_datetime;

                            if (context.dtl_SubTasks.Count(c => c.isdelete == false && c.Task_ID == SbTaskUpdateObj.Task_ID) - 1 == context.dtl_SubTasks.Count(c => c.Task_ID == SbTaskUpdateObj.Task_ID && c.is_Finished == true))
                            {
                                mas_Tasks TskUpdateObj = context.mas_Tasks.FirstOrDefault(c => c.Task_ID == SbTaskUpdateObj.Task_ID);
                                TskUpdateObj.modified_datetime = Task.save_datetime;
                                TskUpdateObj.modified_user_id = Task.save_user_id;
                                TskUpdateObj.Is_active = false;
                                TskUpdateObj.is_Finished = true;
                                TskUpdateObj.finished_datetime = Task.save_datetime;

                                if (TskUpdateObj.Task_From != 0)
                                {
                                    dtl_EmployeeSubTasks RootSubtask = context.dtl_EmployeeSubTasks.FirstOrDefault(c => c.SubTask_ID == TskUpdateObj.Task_From && c.Employee_ID == TskUpdateObj.Task_From_Employee);
                                    RootSubtask.is_pending = RootSubtask.is_expired == true ? false : true;
                                    RootSubtask.modified_datetime = Task.save_datetime;
                                    RootSubtask.modified_user_id = Task.save_user_id;

                                    trns_EmployeeTaskProgress TaskRemarkobj = new trns_EmployeeTaskProgress();
                                    TaskRemarkobj.SubTask_ID = RootSubtask.SubTask_ID;
                                    TaskRemarkobj.Employee_ID = RootSubtask.Employee_ID;
                                    TaskRemarkobj.Remarks = "Reassigned Task Has been Completed";
                                    TaskRemarkobj.Is_active = true;
                                    TaskRemarkobj.save_datetime = Task.save_datetime;
                                    TaskRemarkobj.save_user_id = Task.save_user_id;

                                    context.trns_EmployeeTaskProgress.AddObject(TaskRemarkobj);
                                }
                            }
                        }

                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool ExpireTasks(IEnumerable<EmployeeSubTasksDetailForUserView> ExpiredList)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    foreach (var item in ExpiredList)
                    {
                        dtl_EmployeeSubTasks UpdateObj = context.dtl_EmployeeSubTasks.FirstOrDefault(c => c.SubTask_ID == item.SubTask_ID && c.Employee_ID == item.Employee_ID);
                        UpdateObj.modified_datetime = item.save_datetime;
                        UpdateObj.modified_user_id = item.save_user_id;
                        UpdateObj.is_expired = true;

                        trns_EmployeeTaskProgress Remark = new trns_EmployeeTaskProgress();
                        Remark.SubTask_ID = (int)item.SubTask_ID;
                        Remark.Employee_ID = item.Employee_ID;
                        Remark.Remarks = "Task has been Expired";
                        Remark.Is_active = true;
                        Remark.save_datetime = item.save_datetime;
                        Remark.save_user_id = item.save_user_id;

                        context.trns_EmployeeTaskProgress.AddObject(Remark);
                    }

                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool ResetExpiredTasks(EmployeeSubTasksDetailForUserView Task, string Remark)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    dtl_EmployeeSubTasks ExpiredTask = context.dtl_EmployeeSubTasks.FirstOrDefault(c => c.SubTask_ID == Task.SubTask_ID && c.Employee_ID == Task.Employee_ID);
                    ExpiredTask.modified_datetime = Task.save_datetime;
                    ExpiredTask.modified_user_id = Task.save_user_id;
                    ExpiredTask.is_expired = false;

                    trns_EmployeeTaskProgress TaskProgress = new trns_EmployeeTaskProgress();
                    TaskProgress.Employee_ID = Task.Employee_ID;
                    TaskProgress.SubTask_ID = (int)Task.SubTask_ID;
                    TaskProgress.Remarks = Remark;
                    TaskProgress.Is_active = true;
                    TaskProgress.save_datetime = Task.save_datetime;
                    TaskProgress.save_user_id = Task.save_user_id;

                    context.trns_EmployeeTaskProgress.AddObject(TaskProgress);

                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        [OperationContract]
        public bool CheckUnderlyingTasks(EmployeeSubTasksDetailForUserView Task)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    bool Status = false;

                    if (context.mas_Tasks.Count(c => c.isdelete == false && c.Task_From == Task.SubTask_ID) > 0)
                    {
                        mas_Tasks TempTask = context.mas_Tasks.FirstOrDefault(c => c.isdelete == false && c.Task_From == Task.SubTask_ID);
                        IEnumerable<dtl_SubTasks> TempSub = context.dtl_SubTasks.Where(c => c.Task_ID == TempTask.Task_ID);

                        if (TempSub != null && TempSub.Count() > 0)
                        {
                            foreach (var Sub in TempSub)
                            {
                                if (context.dtl_EmployeeSubTasks.Count(c => c.isdelete == false && c.is_expired == false && c.is_Removed == false && c.is_Finished == false && c.SubTask_ID == Sub.SubTask_ID) > 0)
                                {
                                    Status = true;
                                    break;
                                }
                            }
                        }
                    }

                    return Status;

                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        [OperationContract]
        public bool CheckUnderlyingFinishedTasks(EmployeeSubTasksDetailForUserView Task)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    bool Status = false;

                    if (context.mas_Tasks.Count(c => c.isdelete == false && c.is_Finished == false && c.Task_From == Task.SubTask_ID) > 0)
                    {
                        Status = true;
                    }

                    return Status;

                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        #endregion

        #endregion

        #region Evaluation

        [OperationContract]
        public IEnumerable<z_EvaluationRateGoup> GetEvaluationRateGroups()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.z_EvaluationRateGoup.Where(c => c.is_delete == false && c.is_active == true).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<dtl_EvaluationRates> GetEvaluationRates()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.dtl_EvaluationRates.Where(c => c.is_delete == false && c.is_active == true).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<EmployeeEvaluationsView> GetEmployeeEvaluations()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.EmployeeEvaluationsViews.Where(c => c.is_delete == false && c.is_active == true).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<EmployeeEvaluationDetailsView> GetEmployeeEvaluationDetails()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.EmployeeEvaluationDetailsViews.Where(c => c.is_active == true && c.is_delete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        #region AssignEmployeeEvaluations

        [OperationContract]
        public bool SaveUpdateAssignEmployeeEvaluations(List<mas_Evaluation> MasEvaluationsList)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    foreach (var Evaluation in MasEvaluationsList)
                    {
                        if (context.mas_Evaluation.Count(c => c.evaluation_id == Evaluation.evaluation_id && c.is_delete == false) > 0)
                        {
                            mas_Evaluation Mas_UpdateObj = context.mas_Evaluation.FirstOrDefault(c => c.evaluation_id == Evaluation.evaluation_id && c.is_delete == false);
                            Mas_UpdateObj.is_active = Evaluation.is_active;
                            Mas_UpdateObj.is_delete = Evaluation.is_delete;
                            Mas_UpdateObj.modified_user_id = Evaluation.save_user_id;
                            Mas_UpdateObj.modified_datetime = Evaluation.save_datetime;

                            foreach (var Criteria in Evaluation.dtl_Evaluation)
                            {
                                if (context.dtl_Evaluation.Count(c => c.evaluation_id == Mas_UpdateObj.evaluation_id && c.evaluation_criteria_id == Criteria.evaluation_criteria_id && c.is_delete == false) > 0)
                                {
                                    dtl_Evaluation UpdateObj = context.dtl_Evaluation.FirstOrDefault(c => c.evaluation_id == Mas_UpdateObj.evaluation_id && c.evaluation_criteria_id == Criteria.evaluation_criteria_id && c.is_delete == false);
                                    UpdateObj.is_active = Criteria.is_active;
                                    UpdateObj.is_delete = Criteria.is_delete;
                                    UpdateObj.modified_datetime = Criteria.save_datetime;
                                    UpdateObj.modified_user_id = Criteria.save_user_id;
                                    UpdateObj.delete_user_id = Criteria.is_delete == true ? Criteria.save_user_id : null;
                                    UpdateObj.delete_datetime = Criteria.is_delete == true ? Criteria.save_datetime : null;
                                }
                                else
                                {
                                    dtl_Evaluation SaveObj = new dtl_Evaluation();
                                    SaveObj.evaluation_id = Mas_UpdateObj.evaluation_id;
                                    SaveObj.evaluation_criteria_id = Criteria.evaluation_criteria_id;
                                    SaveObj.employee_rate = 0;
                                    SaveObj.employee_response = false;
                                    SaveObj.manager_rate = 0;
                                    SaveObj.manager_response = false;
                                    SaveObj.is_active = Criteria.is_active;
                                    SaveObj.is_delete = Criteria.is_delete;
                                    SaveObj.save_user_id = Criteria.save_user_id;
                                    SaveObj.save_datetime = Criteria.save_datetime;

                                    context.dtl_Evaluation.AddObject(SaveObj);
                                }
                            }
                        }
                        else
                        {
                            mas_Evaluation Mas_SaveObj = new mas_Evaluation();
                            Mas_SaveObj.evaluation_cat_id = Evaluation.evaluation_cat_id;
                            Mas_SaveObj.evaluation_period_id = Evaluation.evaluation_period_id;
                            Mas_SaveObj.employee_id = Evaluation.employee_id;
                            Mas_SaveObj.evaluation_supervisor = Evaluation.evaluation_supervisor;
                            Mas_SaveObj.is_manager_finished = Evaluation.is_manager_finished;
                            Mas_SaveObj.is_employee_finished = Evaluation.is_employee_finished;
                            Mas_SaveObj.is_active = Evaluation.is_active;
                            Mas_SaveObj.is_delete = Evaluation.is_delete;
                            Mas_SaveObj.save_user_id = Evaluation.save_user_id;
                            Mas_SaveObj.save_datetime = Evaluation.save_datetime;

                            foreach (var Criteria in Evaluation.dtl_Evaluation)
                            {
                                dtl_Evaluation dtlSaveObj = new dtl_Evaluation();
                                dtlSaveObj.evaluation_id = Criteria.evaluation_id;
                                dtlSaveObj.evaluation_criteria_id = (int)Criteria.evaluation_criteria_id;
                                dtlSaveObj.employee_rate = Criteria.employee_rate;
                                dtlSaveObj.employee_response = Criteria.employee_response;
                                dtlSaveObj.manager_rate = Criteria.manager_rate;
                                dtlSaveObj.manager_response = Criteria.manager_response;
                                dtlSaveObj.is_active = Criteria.is_active;
                                dtlSaveObj.is_delete = Criteria.is_delete;
                                dtlSaveObj.save_user_id = Criteria.save_user_id;
                                dtlSaveObj.save_datetime = Criteria.save_datetime;

                                Mas_SaveObj.dtl_Evaluation.Add(dtlSaveObj);
                            }

                            context.mas_Evaluation.AddObject(Mas_SaveObj);
                        }
                    }

                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        [OperationContract]
        public IEnumerable<AssignedEvaluationsView> GetFilterdAssignedEvaluations(int EvaluationCategoty, int EvaluationPeriod, Guid Supervisor)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.AssignedEvaluationsViews.Where(c => c.evaluation_supervisor == Supervisor && c.evaluation_cat_id == EvaluationCategoty && c.evaluation_period_id == EvaluationPeriod).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<EmployeeEvaluationsView> GetFilteredEmployeeEvaluations(int EvaluationCategoty, int EvaluationPeriod, Guid Supervisor)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.EmployeeEvaluationsViews.Where(c => c.evaluation_supervisor == Supervisor && c.evaluation_cat_id == EvaluationCategoty && c.evaluation_period_id == EvaluationPeriod && c.is_delete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<EmployeeEvaluationDetailsView> GetFilteredEmployeeEvaluationDetails(int EvaluationCategoty, int EvaluationPeriod, Guid Supervisor)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.EmployeeEvaluationDetailsViews.Where(c => c.evaluation_supervisor == Supervisor && c.evaluation_cat_id == EvaluationCategoty && c.evaluation_period_id == EvaluationPeriod && c.is_delete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public bool DeleteAssignedEvaluations(List<mas_Evaluation> MasEvaluationsList)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    foreach (var Evaluation in MasEvaluationsList)
                    {
                        if (context.mas_Evaluation.Count(c => c.evaluation_id == Evaluation.evaluation_id && c.is_delete == false) > 0)
                        {
                            mas_Evaluation Mas_UpdateObj = context.mas_Evaluation.FirstOrDefault(c => c.evaluation_id == Evaluation.evaluation_id && c.is_delete == false);
                            Mas_UpdateObj.is_active = Evaluation.is_active;
                            Mas_UpdateObj.is_delete = Evaluation.is_delete;
                            Mas_UpdateObj.delete_user_id = Evaluation.delete_user_id;
                            Mas_UpdateObj.delete_datetime = Evaluation.delete_datetime;

                            foreach (var Criteria in Evaluation.dtl_Evaluation.Where(c => c.evaluation_id == Mas_UpdateObj.evaluation_id && c.is_delete == false))
                            {
                                dtl_Evaluation UpdateObj = context.dtl_Evaluation.FirstOrDefault(c => c.evaluation_id == Mas_UpdateObj.evaluation_id && c.evaluation_criteria_id == Criteria.evaluation_criteria_id && c.is_delete == false);
                                UpdateObj.is_active = Mas_UpdateObj.is_active;
                                UpdateObj.is_delete = Mas_UpdateObj.is_delete;
                                UpdateObj.delete_user_id = Mas_UpdateObj.delete_user_id;
                                UpdateObj.delete_datetime = Mas_UpdateObj.delete_datetime;
                            }
                        }

                    }

                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        #endregion

        #region z_EvaluationCategory Operations

        [OperationContract]
        public IEnumerable<z_EvaluationCategory> GetEvaluationCategories()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.z_EvaluationCategory.Where(c => c.is_delete == false && c.is_active == true).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<dtl_EvaluationCriteria> GetEvaluationCriteria()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.dtl_EvaluationCriteria.Where(c => c.is_delete == false && c.is_active == true).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveUpdateEvaluationCrieteria(IEnumerable<dtl_EvaluationCriteria> Criterias)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    foreach (var criteria in Criterias)
                    {
                        if (context.dtl_EvaluationCriteria.Count(c => c.evaluation_criteria_id == criteria.evaluation_criteria_id) > 0)
                        {
                            dtl_EvaluationCriteria UpdateObj = context.dtl_EvaluationCriteria.FirstOrDefault(c => c.evaluation_criteria_id == criteria.evaluation_criteria_id);
                            UpdateObj.evaluation_criteria_name = criteria.evaluation_criteria_name;
                            UpdateObj.evaluation_rate_group_id = criteria.evaluation_rate_group_id;
                            UpdateObj.is_active = criteria.is_active;
                            UpdateObj.modified_user_id = criteria.save_user_id;
                            UpdateObj.modified_datetime = DateTime.Now;
                        }
                        else
                        {
                            criteria.save_datetime = DateTime.Now;
                            context.dtl_EvaluationCriteria.AddObject(criteria);
                        }
                    }

                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        [OperationContract]
        public bool DeleteEvaluationCriteria(dtl_EvaluationCriteria Criteria)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    dtl_EvaluationCriteria DeleteObj = context.dtl_EvaluationCriteria.FirstOrDefault(c => c.evaluation_criteria_id == Criteria.evaluation_criteria_id);
                    DeleteObj.is_active = false;
                    DeleteObj.is_delete = true;
                    DeleteObj.delete_datetime = Criteria.delete_datetime;
                    DeleteObj.delete_user_id = Criteria.delete_user_id;

                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        [OperationContract]
        public bool SaveEvaluationCategory(z_EvaluationCategory EvaluationCategory)
        {
            bool isSuccess = false;

            try
            {
                if (EvaluationCategory != null)
                {
                    using (var context = new ERPEntities())
                    {
                        if (context != null)
                        {
                            z_EvaluationCategory newEvaluationCategory = new z_EvaluationCategory();
                            newEvaluationCategory = EvaluationCategory;
                            context.z_EvaluationCategory.AddObject(newEvaluationCategory);
                            int i = context.SaveChanges();
                            isSuccess = validateSaveUpdate(i);
                            return isSuccess;
                        }
                    }
                }
            }
            catch (Exception)
            {
                return isSuccess = false;
            }
            return isSuccess;
        }

        [OperationContract]
        public bool DeleteEvaluationCategory(z_EvaluationCategory EvaluationCategory)
        {
            try
            {
                bool isSuccess = false;
                using (var context = new ERPEntities())
                    try
                    {
                        {
                            z_EvaluationCategory delEvaluationCategory = context.z_EvaluationCategory.First(c => c.evaluation_cat_id == EvaluationCategory.evaluation_cat_id);
                            if (delEvaluationCategory != null)
                            {
                                delEvaluationCategory.delete_datetime = EvaluationCategory.delete_datetime;
                                delEvaluationCategory.delete_user_id = EvaluationCategory.delete_user_id;
                                delEvaluationCategory.is_delete = true;
                                return validateSaveUpdate(context.SaveChanges());
                            }
                        }
                    }
                    catch (Exception)
                    {
                        return isSuccess = false;
                    }
                return isSuccess;
            }
            catch (Exception)
            {
                throw;
            }
        }

        [OperationContract]
        public bool UpdateEvaluationCategory(z_EvaluationCategory EvaluationCategory)
        {

            bool isSuccess = false;

            try
            {
                if (EvaluationCategory != null)
                {
                    using (var context = new ERPEntities())
                    {
                        if (context != null)
                        {
                            z_EvaluationCategory oldEvaluationCategory = context.z_EvaluationCategory.First(z => z.evaluation_cat_id == EvaluationCategory.evaluation_cat_id);

                            oldEvaluationCategory.evaluation_cat_name = EvaluationCategory.evaluation_cat_name;
                            oldEvaluationCategory.evaluation_cat_description = EvaluationCategory.evaluation_cat_description;
                            oldEvaluationCategory.modified_user_id = EvaluationCategory.modified_user_id;
                            oldEvaluationCategory.modified_datetime = EvaluationCategory.modified_datetime;
                            oldEvaluationCategory.is_active = EvaluationCategory.is_active;
                            return validateSaveUpdate(context.SaveChanges());

                        }
                    }
                }
            }
            catch (Exception)
            {
                return isSuccess = false;
            }
            return isSuccess;
        }

        #endregion

        #region z_EvaluationPeriod Operations

        [OperationContract]
        public IEnumerable<z_EvaluationPeriod> GetEvaluationPeriods()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_EvaluationPeriod.Where(c => c.is_delete == false && c.is_active == true).ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public bool SaveUpdateEvaluationPeriod(z_EvaluationPeriod EvaluationPeriod)
        {
            try
            {
                using (var contex = new ERPEntities())
                {
                    if (contex.z_EvaluationPeriod.Count(c => c.evaluation_period_id == EvaluationPeriod.evaluation_period_id) > 0)
                    {
                        z_EvaluationPeriod UpdateObj = contex.z_EvaluationPeriod.FirstOrDefault(c => c.evaluation_period_id == EvaluationPeriod.evaluation_period_id);
                        UpdateObj.from_date = EvaluationPeriod.from_date;
                        UpdateObj.to_date = EvaluationPeriod.to_date;
                        UpdateObj.evaluation_period_name = EvaluationPeriod.evaluation_period_name;
                        UpdateObj.is_active = EvaluationPeriod.is_active;
                        UpdateObj.modified_datetime = EvaluationPeriod.save_datetime;
                        UpdateObj.modified_user_id = EvaluationPeriod.modified_user_id;

                        return validateSaveUpdate(contex.SaveChanges());
                    }

                    else
                    {
                        contex.z_EvaluationPeriod.AddObject(EvaluationPeriod);
                        return validateSaveUpdate(contex.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }

        }

        [OperationContract]
        public bool DeleteEvaluationPeriod(z_EvaluationPeriod EvaluationPeriod)
        {
            bool isSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    z_EvaluationPeriod perioddelete = context.z_EvaluationPeriod.First(c => c.evaluation_period_id == EvaluationPeriod.evaluation_period_id);

                    perioddelete.delete_user_id = EvaluationPeriod.delete_user_id;
                    perioddelete.delete_datetime = EvaluationPeriod.delete_datetime;
                    perioddelete.is_delete = true;
                    perioddelete.is_active = false;
                    return isSuccess = validateSaveUpdate(context.SaveChanges());

                }
            }
            catch (Exception)
            {
                return isSuccess = false;

            }

        }

        #endregion

        #region Chathura Evaluation

        #region z_EvaluationCategory operations

        [OperationContract]
        IEnumerable<z_EvaluationCategory> GetBasicEvaluationCategoryData()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.z_EvaluationCategory.Where(c => c.is_delete == false && c.is_active == true).Select(c => new { CatID = c.evaluation_cat_id, CatName = c.evaluation_cat_name }).ToList().Select(c => new z_EvaluationCategory { evaluation_cat_id = c.CatID, evaluation_cat_name = c.CatName });
                    return result;
                }
            }
            catch (Exception)
            {
            }
            return null;
        }

        #endregion

        #region z_EvaluationPeriod operations

        [OperationContract]
        IEnumerable<z_EvaluationPeriod> GetBasicEvaluationPeriodData()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.z_EvaluationPeriod.Where(c => c.is_delete == false && c.is_active == true).Select(c => new { PID = c.evaluation_period_id, PNAME = c.evaluation_period_name }).ToList().Select(c => new z_EvaluationPeriod { evaluation_period_id = c.PID, evaluation_period_name = c.PNAME });
                    return result;
                }
            }
            catch (Exception)
            {
            }
            return null;
        }

        #endregion

        #region dtl_EvaluationCriteria operations

        [OperationContract]
        IEnumerable<dtl_EvaluationCriteria> GetBasicEvaluationCriteriaData(int evaluationCategoryID)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.dtl_EvaluationCriteria.Where(c => c.evaluation_cat_id == evaluationCategoryID && c.is_delete == false && c.is_active == true).Select(c => new { EVAL_CRI_ID = c.evaluation_criteria_id, EVAL_CAT_ID = c.evaluation_cat_id, EVAL_CRIT_NAME = c.evaluation_criteria_name }).ToList().Select(c => new dtl_EvaluationCriteria { evaluation_criteria_id = c.EVAL_CRI_ID, evaluation_criteria_name = c.EVAL_CRIT_NAME, evaluation_cat_id = c.EVAL_CAT_ID });
                    return result;
                }
            }
            catch (Exception)
            {
            }
            return null;
        }

        #endregion

        #region mas_Employee operations

        //[OperationContract]
        //IEnumerable<mas_Employee> GetEvaluationAssignedEmployees(int evaluationCatID, int evaluationPeriodID)
        //{
        //    try
        //    {
        //        using (var context = new ERPEntities())
        //        {
        //            var result = context.mas_Employee.Where(c => c.dtl_Evaluation.Where(d => d.is_delete == false && d.evaluation_period_id == evaluationPeriodID).Any(d => d.dtl_EvaluationCriteria.evaluation_cat_id == evaluationCatID)).Select(c =>
        //                new { ID = c.employee_id, EMP_ID = c.emp_id, FNAME = c.first_name, SNAME = c.second_name }
        //                ).ToList().Select(c => new mas_Employee { employee_id = c.ID, emp_id = c.EMP_ID, first_name = c.FNAME, second_name = c.SNAME });
        //            return result;
        //        }
        //    }
        //    catch (Exception)
        //    {
        //    }
        //    return null;
        //}

        #endregion

        #region dtl_Evaluation operations

        [OperationContract]
        bool SaveEmployeeEvaluationDetails(List<dtl_Evaluation> addedList)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    foreach (var item in addedList)
                    {
                        context.dtl_Evaluation.AddObject(item);
                    }

                    if (validateSaveUpdate(context.SaveChanges()))
                        return true;
                }
            }
            catch (Exception)
            {

            }
            return false;
        }

        //[OperationContract]
        //bool UpdateEmployeeEvaluationDetails(List<dtl_Evaluation> updatedList)
        //{
        //    try
        //    {
        //        List<Guid> empIDList = updatedList.Select(c => c.employee_id).Distinct().ToList();
        //        List<int> updatedEvalIDList = new List<int>();
        //        using (var context = new ERPEntities())
        //        {
        //            foreach (var empID in empIDList)
        //            {
        //                List<dtl_Evaluation> currentEmpList = updatedList.Where(c => c.employee_id == empID).ToList();
        //                foreach (var updEval in currentEmpList)
        //                {
        //                    var current = context.dtl_Evaluation.FirstOrDefault(c => c.employee_id == updEval.employee_id && c.evaluation_criteria_id == updEval.evaluation_criteria_id && c.evaluation_period_id == updEval.evaluation_period_id);
        //                    current.is_active = updEval.is_active;
        //                    current.modified_datetime = updEval.modified_datetime;
        //                    current.modified_user_id = updEval.modified_user_id;
        //                    updatedEvalIDList.Add(current.evaluation_id);
        //                }

        //                List<dtl_Evaluation> inActiveList = context.dtl_Evaluation.Where(c => c.employee_id == empID && !updatedEvalIDList.Contains(c.evaluation_id)).ToList();
        //                foreach (var item in inActiveList)
        //                {
        //                    var current = context.dtl_Evaluation.FirstOrDefault(c => c.evaluation_id == item.evaluation_id);
        //                    current.is_active = false;
        //                    current.modified_datetime = currentEmpList.FirstOrDefault().modified_datetime;
        //                    current.modified_user_id = currentEmpList.FirstOrDefault().modified_user_id;
        //                }

        //                if (updatedEvalIDList.Count > 0)
        //                    updatedEvalIDList.Clear();
        //            }

        //            if (validateSaveUpdate(context.SaveChanges()))
        //                return true;
        //        }
        //    }
        //    catch (Exception)
        //    {
        //    }
        //    return false;
        //}

        //[OperationContract]
        //bool UpdateEmployeeEvaluationRate(List<dtl_Evaluation> updatedList)
        //{
        //    try
        //    {
        //        using (var context = new ERPEntities())
        //        {
        //            foreach (dtl_Evaluation item in updatedList)
        //            {
        //                var current = context.dtl_Evaluation.FirstOrDefault(c => c.evaluation_id == item.evaluation_id);
        //                current.manager_rate = item.manager_rate;
        //                current.manager_response = item.manager_response;
        //                current.modified_datetime = item.modified_datetime;
        //                current.modified_user_id = item.modified_user_id;
        //            }

        //            if (validateSaveUpdate(context.SaveChanges()))
        //                return true;
        //        }
        //    }
        //    catch (Exception)
        //    {
        //    }
        //    return false;
        //}

        #endregion

        #region z_EvaluationRate operations

        //[OperationContract]
        //IEnumerable<z_EvaluationRate> GetBasicEvaluationRateData()
        //{
        //    try
        //    {
        //        using (var context = new ERPEntities())
        //        {
        //            var result = context.z_EvaluationRate.Where(c => c.is_active == true && c.is_delete == false).Select(c =>
        //                new { RATE_ID = c.evaluation_rate_id, RATE_NAME = c.evaluation_rate_name }).ToList().Select(c => new z_EvaluationRate { evaluation_rate_id = c.RATE_ID, evaluation_rate_name = c.RATE_NAME });
        //            return result;
        //        }
        //    }
        //    catch (Exception)
        //    {
        //    }
        //    return null;
        //}

        #endregion

        #region ManagerEvaluationReviewView operations

        //[OperationContract]
        //IEnumerable<ManagerEvaluationReviewView> GetEmployeeEvaluationReviewData(List<Guid> superviseeIDList, int evaluateCategoryID, int evaluatePeriodID)
        //{
        //    try
        //    {
        //        using (var context = new ERPEntities())
        //        {
        //            var result = context.ManagerEvaluationReviewViews.Where(c => superviseeIDList.Contains((Guid)c.employee_id) && c.evaluation_cat_id == evaluateCategoryID && c.evaluation_period_id == evaluatePeriodID).ToList();
        //            result.ForEach(c => context.Detach(c));
        //            return result;
        //        }
        //    }
        //    catch (Exception)
        //    {
        //    }
        //    return null;
        //}

        #endregion


        #endregion

        #endregion

        #endregion

        #region Leave

        #region z_LeaveCatergory Operations

        [OperationContract]
        public IEnumerable<z_LeaveCategory> GetLeaveCatergories()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_LeaveCategory.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public z_LeaveCategory GetLeaveCategoryByID(Guid Id)
        {
            try
            {
                if (Id != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_LeaveCategory newCategory = context.z_LeaveCategory.First(e => e.leave_id.Equals(Id));
                        return newCategory;
                    }
                }
            }

            catch (Exception)
            {
                return new z_LeaveCategory();
            }
            return new z_LeaveCategory();
        }

        [OperationContract]
        public bool SaveLeaveCatergory(z_LeaveCategory LeaveCatergory)
        {
            bool IsSuccess = false;
            try
            {
                if (LeaveCatergory != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_LeaveCategory newLeaveCatergory = new z_LeaveCategory();
                        newLeaveCatergory = LeaveCatergory;
                        context.z_LeaveCategory.AddObject(LeaveCatergory);
                        int i = context.SaveChanges();
                        return IsSuccess = validateSaveUpdate(i);
                    }
                }
            }
            catch (Exception)
            {
                return IsSuccess = false;
            }
            return IsSuccess;
        }

        [OperationContract]
        public void SaveLeiuLeaveCategory(z_LeaveCategory leavecategory)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    context.z_LeaveCategory.AddObject(leavecategory);
                    context.SaveChanges();
                }
                catch (Exception)
                {
                }
            }
        }

        [OperationContract]
        public bool UpdateLeaveCatergory(z_LeaveCategory LeaveCatergory)
        {
            bool IsSuccess = false;
            try
            {
                if (LeaveCatergory != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_LeaveCategory UpdateLeveCatergory = context.z_LeaveCategory.First(s => s.leave_id == LeaveCatergory.leave_id);
                        if (UpdateLeveCatergory != null)
                        {
                            UpdateLeveCatergory.leave_id = LeaveCatergory.leave_id;
                            UpdateLeveCatergory.name = LeaveCatergory.name;
                            UpdateLeveCatergory.leave_code = LeaveCatergory.leave_code;
                            UpdateLeveCatergory.description = LeaveCatergory.description;
                            UpdateLeveCatergory.is_official = LeaveCatergory.is_official;
                            UpdateLeveCatergory.is_active = LeaveCatergory.is_active;
                            int i = context.SaveChanges();
                            return IsSuccess = validateSaveUpdate(i);
                        }
                    }
                }
            }
            catch (Exception)
            {
                return IsSuccess = false;
            }
            return IsSuccess;
        }

        [OperationContract]
        public bool DeleteLeaveType(z_LeaveCategory LeaveCatergory)
        {
            try
            {
                if (LeaveCatergory != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_LeaveCategory DeleteLeaveCatergory = context.z_LeaveCategory.First(d => d.leave_id == LeaveCatergory.leave_id);
                        context.z_LeaveCategory.DeleteObject(DeleteLeaveCatergory);
                        context.SaveChanges();
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }

            return true;
        }
        #endregion

        #region z_LeavePeriod Operations

        [OperationContract]
        public IEnumerable<z_LeavePeriod> GetLeavePeriods()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_LeavePeriod.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public bool SaveLeavePeriods(z_LeavePeriod Periods)
        {
            bool IsSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    z_LeavePeriod newPeriod = new z_LeavePeriod();
                    newPeriod = Periods;
                    context.z_LeavePeriod.AddObject(Periods);
                    int i = context.SaveChanges();
                    return IsSuccess = validateSaveUpdate(i);
                }
            }
            catch (Exception)
            {
                return IsSuccess = false;
            }
        }

        [OperationContract]
        public bool UpadteLeavePeriods(z_LeavePeriod Periods)
        {
            bool IsSuccess = false;
            try
            {
                if (Periods != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_LeavePeriod newPeriod = context.z_LeavePeriod.First(a => a.period_id == Periods.period_id);
                        if (newPeriod != null)
                        {
                            newPeriod.period_id = Periods.period_id;
                            newPeriod.from_date = Periods.from_date;
                            newPeriod.period_name = Periods.period_name;
                            newPeriod.to_date = Periods.to_date;
                            int i = context.SaveChanges();
                            return IsSuccess = validateSaveUpdate(i);
                        }
                    }
                }
            }
            catch (Exception)
            {
                return IsSuccess = false;
            }
            return IsSuccess;
        }

        [OperationContract]
        public bool DeleteLeavePeriods(z_LeavePeriod Periods)
        {
            bool IsSuccess = false;
            try
            {
                if (Periods != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_LeavePeriod deletePeriods = context.z_LeavePeriod.First(a => a.period_id == Periods.period_id);
                        if (deletePeriods != null)
                        {
                            context.z_LeavePeriod.DeleteObject(deletePeriods);
                            int i = context.SaveChanges();
                            return IsSuccess = validateSaveUpdate(i);
                        }
                    }
                }
            }
            catch (Exception)
            {
                return IsSuccess = false;
            }
            return IsSuccess;
        }


        #endregion

        #region mas_LeaveDetail Operations

        [OperationContract]
        public IEnumerable<mas_LeaveDetail> GetMasLeaveDetails()
        {
            using (var context = new ERPEntities())
            {
                var result = context.mas_LeaveDetail.ToList();
                result.ForEach(v => context.Detach(v));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<mas_LeaveDetail> GetMasLeaveDetailsByPeriod(Guid Period)
        {
            using (var context = new ERPEntities())
            {
                var result = context.mas_LeaveDetail.Where(c => c.leave_period_id == Period).ToList();
                result.ForEach(v => context.Detach(v));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<LeaveDetailMasterView> GetLeaveMasterDetailView()
        {
            using (var context = new ERPEntities())
            {
                var result = context.LeaveDetailMasterViews.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<LeaveDetailMasterView> GetLeaveMasterDetailViewByPeriod(Guid Period)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.LeaveDetailMasterViews.Where(c => c.leave_period_id == Period).ToList();
                    result.ForEach(e => context.Detach(e));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveUpdateLeaveMasterDetail(mas_LeaveDetail DetailLeave)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (context.mas_LeaveDetail.Count(c => c.leave_detail_id == DetailLeave.leave_detail_id) > 0)
                    {
                        mas_LeaveDetail UpdateDetailLeave = context.mas_LeaveDetail.FirstOrDefault(y => y.leave_detail_id == DetailLeave.leave_detail_id);

                        UpdateDetailLeave.leave_detail_id = DetailLeave.leave_detail_id;
                        UpdateDetailLeave.leave_category_id = DetailLeave.leave_category_id;
                        UpdateDetailLeave.leave_period_id = DetailLeave.leave_period_id;
                        UpdateDetailLeave.is_automate = DetailLeave.is_automate;
                        UpdateDetailLeave.number_of_days = DetailLeave.number_of_days;
                        UpdateDetailLeave.leave_detail_name = DetailLeave.leave_detail_name;

                        return validateSaveUpdate(context.SaveChanges());

                    }
                    else
                    {
                        context.mas_LeaveDetail.AddObject(DetailLeave);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public void SaveLeiuLeaveDetails(mas_LeaveDetail leiudetails)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    context.mas_LeaveDetail.AddObject(leiudetails);
                    context.SaveChanges();
                }
            }
            catch (Exception)
            {
            }
        }

        [OperationContract]
        public bool DeleteLeaveMasterDetail(LeaveDetailMasterView DetailLeave)
        {
            bool IsSuccess = false;
            try
            {
                if (DetailLeave != null)
                {
                    using (var context = new ERPEntities())
                    {
                        mas_LeaveDetail deleteLeaveDetail = context.mas_LeaveDetail.First(c => c.leave_detail_id == DetailLeave.leave_detail_id);
                        if (deleteLeaveDetail != null)
                        {
                            context.mas_LeaveDetail.DeleteObject(deleteLeaveDetail);
                            int i = context.SaveChanges();
                            return IsSuccess = validateSaveUpdate(i);
                        }
                    }
                }
            }
            catch (Exception)
            {
                return IsSuccess = false;
            }
            return IsSuccess;
        }
        #endregion

        #region dtl_EmployeeLeaveDetails Operations

        [OperationContract]
        public IEnumerable<dtl_EmployeeMaximumLeaves> GetEmployeeMaxLeaveDetailsList()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.dtl_EmployeeMaximumLeaves.ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public IEnumerable<Employee_Maximum_Leave_Details_View> GetEmployeeMaximumLeaveDetailsViewListByPeriod(Guid Period)
        {
            using (var context = new ERPEntities())
            {
                try
                {

                    var result = context.Employee_Maximum_Leave_Details_View.Where(c => c.leave_period_id == Period).ToList();
                    result.ForEach(s => context.Detach(s));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<Employee_Leave_Detail_View> GetEmployeeLeaveDetailsViewListByPeriod(Guid Period)
        {
            using (var context = new ERPEntities())
            {
                try
                {

                    var result = context.Employee_Leave_Detail_View.Where(c => c.leave_period_id == Period).ToList();
                    result.ForEach(s => context.Detach(s));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<Employee_Leave_Detail_View> GetEmployeeLeaveDetailsViewList()
        {
            using (var context = new ERPEntities())
            {
                var result = context.Employee_Leave_Detail_View.ToList();
                result.ForEach(s => context.Detach(s));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<dtl_EmployeeLeave> GetEmployeeDetailsList()
        {
            using (var context = new ERPEntities())
            {
                var result = context.dtl_EmployeeLeave.ToList();
                result.ForEach(d => context.Detach(d));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<dtl_EmployeeLeave> GetEmployeeDetailsByEmpID(Guid Emp_id)
        {
            using (var context = new ERPEntities())
            {
                var result = context.dtl_EmployeeLeave.Where(e => e.emp_id.Equals(Emp_id)).ToList();
                result.ForEach(d => context.Detach(d));
                return result;
            }
        }

        [OperationContract]
        public bool SaveEmployeeLeaveDetails(dtl_EmployeeLeave EmployeeLeaveDetail)
        {
            bool IsSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    dtl_EmployeeLeave newEmployeeLeave = new dtl_EmployeeLeave();
                    newEmployeeLeave = EmployeeLeaveDetail;
                    context.dtl_EmployeeLeave.AddObject(EmployeeLeaveDetail);
                    int i = context.SaveChanges();
                    return IsSuccess = validateSaveUpdate(i);
                }
            }
            catch (Exception)
            {
                return IsSuccess = false;
            }
        }

        [OperationContract]
        public bool UpdateEmployeeLeavedetails(dtl_EmployeeLeave EmployeeLeaveDetailByEmpID)
        {
            bool IsSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    dtl_EmployeeLeave UpdateLeaveDetail = context.dtl_EmployeeLeave.First(c => c.emp_id == (Guid)EmployeeLeaveDetailByEmpID.emp_id && c.leave_detail_id == (Guid)EmployeeLeaveDetailByEmpID.leave_detail_id);
                    if (UpdateLeaveDetail != null)
                    {
                        UpdateLeaveDetail.leave_detail_id = EmployeeLeaveDetailByEmpID.leave_detail_id;
                        UpdateLeaveDetail.number_of_days = EmployeeLeaveDetailByEmpID.number_of_days;
                        UpdateLeaveDetail.remaining_days = EmployeeLeaveDetailByEmpID.remaining_days;
                        UpdateLeaveDetail.is_special = EmployeeLeaveDetailByEmpID.is_special;
                        int i = context.SaveChanges();
                        return IsSuccess = validateSaveUpdate(i);
                    }
                }
            }
            catch (Exception)
            {
                return IsSuccess = false;
            }
            return IsSuccess;
        }

        [OperationContract]
        public bool ApproveEmployeeLeaves(List<dtl_EmployeeLeave> LeaveDetails, List<PendingLeavesView> LeavePoolDetails)
        {
            bool returnResult = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    foreach (var item in LeaveDetails)
                    {
                        dtl_EmployeeLeave UpdateLeaveDetail = context.dtl_EmployeeLeave.First(c => c.emp_id == (Guid)item.emp_id && c.leave_detail_id == (Guid)item.leave_detail_id);
                        if (UpdateLeaveDetail != null)
                        {
                            UpdateLeaveDetail.leave_detail_id = item.leave_detail_id;
                            UpdateLeaveDetail.number_of_days = item.number_of_days;
                            UpdateLeaveDetail.remaining_days = item.remaining_days;
                            UpdateLeaveDetail.is_special = item.is_special;
                        }
                    }

                    foreach (var item in LeavePoolDetails)
                    {
                        trns_LeavePool oldPool = context.trns_LeavePool.First(e => e.pool_id.Equals(item.pool_id));

                        if (oldPool != null)
                        {
                            oldPool.is_approved = item.is_approved;
                            oldPool.is_pending_for_approval = item.is_pending_for_approval;
                            oldPool.is_rejected = item.is_rejected;
                            oldPool.approved_user_id = item.approved_user_id;
                        }
                    }

                    if (validateSaveUpdate(context.SaveChanges()))
                        returnResult = true;
                }
            }
            catch (Exception)
            {
                return false;
            }

            return returnResult;
        }

        [OperationContract]
        public bool ApproveEmployeeLeavesBySupervisor(List<PendingLeavesForSupervisorApproval> LeavePoolDetails)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    foreach (var leave in LeavePoolDetails)
                    {
                        trns_LeavePool LeavePoolRecord = context.trns_LeavePool.FirstOrDefault(e => e.pool_id == leave.pool_id);
                        LeavePoolRecord.approved_user_id = leave.approved_user_id;
                        LeavePoolRecord.is_approved = leave.approved;
                        LeavePoolRecord.is_pending_for_approval = leave.is_pending_for_approval;

                        if (LeavePoolRecord.leave_category_id != new Guid("9B615C80-32D7-4951-BABC-04AD7193BC32"))
                        {
                            LeavePoolRecord.mas_LeaveDetail.dtl_EmployeeLeave.FirstOrDefault(c => c.leave_detail_id == LeavePoolRecord.leave_detail_id && c.emp_id == LeavePoolRecord.emp_id).number_of_days += context.z_LeaveType.FirstOrDefault(c => c.leave_type_id == LeavePoolRecord.leave_type_id).value;
                            LeavePoolRecord.mas_LeaveDetail.dtl_EmployeeLeave.FirstOrDefault(c => c.leave_detail_id == LeavePoolRecord.leave_detail_id && c.emp_id == LeavePoolRecord.emp_id).remaining_days -= context.z_LeaveType.FirstOrDefault(c => c.leave_type_id == LeavePoolRecord.leave_type_id).value;
                            // h 2020-08-11 set notification first SL then other
                            //if (LeavePoolRecord.leave_category_id == new Guid(""))
                            //    notif_setEmployeeSLEntitlementOver(LeavePoolRecord, LeavePoolRecord.leave_date.Value);
                            //else if (LeavePoolRecord.mas_LeaveDetail.dtl_EmployeeLeave.FirstOrDefault(c => c.leave_detail_id == LeavePoolRecord.leave_detail_id && c.emp_id == LeavePoolRecord.emp_id).remaining_days == 0)
                            //    notif_setEmployeeEntitlementOver(LeavePoolRecord, LeavePoolRecord.leave_date.Value);
                        }

                        foreach (var response in LeavePoolRecord.trns_SupervisorLeaveApprovals)
                        {
                            if (response.supervisor_employee_id == leave.supervisor_employee_id)
                            {
                                response.approved = leave.approved;
                                response.remark = "Approved by the supervisor";
                                response.is_active = leave.is_active;
                            }
                            else
                            {
                                response.approved = leave.approved;
                                response.remark = "Automatically approved by the system";
                                response.is_active = leave.is_active;
                            }
                        }
                    }

                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        [OperationContract]
        public bool CancelEmplyeeLeaves(List<PendingLeavesView> LeavePoolDetails)
        {
            bool returnResult = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    foreach (var item in LeavePoolDetails)
                    {
                        trns_LeavePool oldPool = context.trns_LeavePool.First(e => e.pool_id.Equals(item.pool_id));
                        if (oldPool != null)
                        {
                            oldPool.is_approved = item.is_approved;
                            oldPool.is_pending_for_approval = item.is_pending_for_approval;
                            oldPool.is_rejected = item.is_rejected;
                            oldPool.approved_user_id = item.approved_user_id;
                        }
                    }

                    if (validateSaveUpdate(context.SaveChanges()))
                        returnResult = true;
                }
            }
            catch (Exception)
            {
                return false;
            }

            return returnResult;
        }

        [OperationContract]
        public bool CancelEmplyeeLeavesBySupervisor(List<PendingLeavesForSupervisorApproval> LeavePoolDetails)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    foreach (var leave in LeavePoolDetails)
                    {
                        trns_LeavePool LeavePoolRecord = context.trns_LeavePool.FirstOrDefault(e => e.pool_id == leave.pool_id);
                        LeavePoolRecord.is_rejected = leave.rejected;
                        LeavePoolRecord.is_pending_for_approval = leave.is_pending_for_approval;

                        foreach (var response in LeavePoolRecord.trns_SupervisorLeaveApprovals)
                        {
                            if (response.supervisor_employee_id == leave.supervisor_employee_id)
                            {
                                response.rejected = leave.rejected;
                                response.remark = "Rejected by the supervisor";
                                response.is_active = leave.is_active;
                            }
                            else
                            {
                                response.rejected = leave.rejected;
                                response.remark = "Automatically rejected by the system";
                                response.is_active = leave.is_active;
                            }
                        }
                    }

                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        [OperationContract]
        public bool TransferEmplyeeLeavesBySupervisor(List<PendingLeavesForSupervisorApproval> LeavePoolDetails)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    foreach (var leave in LeavePoolDetails)
                    {
                        trns_LeavePool LeavePoolRecord = context.trns_LeavePool.FirstOrDefault(e => e.pool_id == leave.pool_id);
                        IEnumerable<trns_SupervisorLeaveApprovals> supApprovals = LeavePoolRecord.trns_SupervisorLeaveApprovals.ToList();
                        IEnumerable<dtl_EmployeeSupervisor> employeSupervisors = context.dtl_EmployeeSupervisor.Where(c => c.module_id == new Guid("EE0D8A55-5A31-4FDB-A36F-36643A26B1AA") && c.employee_id == leave.Employee_id).AsEnumerable();
                        int currentSupLevel = employeSupervisors.FirstOrDefault(d => d.supervisor_employee_id == leave.supervisor_employee_id).z_SupervisorLevel.supervisor_level;
                        employeSupervisors = employeSupervisors.Where(c => c.supervisor_employee_id != leave.supervisor_employee_id && supApprovals.Count(d => c.supervisor_employee_id == d.supervisor_employee_id && d.approved == false && d.rejected == false && d.transferred == false) > 0);

                        if (employeSupervisors.Count(c => c.supervisor_employee_id != leave.supervisor_employee_id && c.z_SupervisorLevel.supervisor_level < currentSupLevel) > 0)
                        {
                            Guid Max = employeSupervisors.Where(c => c.supervisor_employee_id != leave.supervisor_employee_id).OrderByDescending(c => c.z_SupervisorLevel.supervisor_level).FirstOrDefault().z_SupervisorLevel.supervisor_leve_id;

                            if (employeSupervisors != null && employeSupervisors.Count() > 0)
                            {
                                foreach (var response in employeSupervisors.Where(c => c.z_SupervisorLevel.supervisor_leve_id == Max))
                                {
                                    trns_SupervisorLeaveApprovals temp = context.trns_SupervisorLeaveApprovals.FirstOrDefault(c => c.pool_id == leave.pool_id && c.supervisor_employee_id == response.supervisor_employee_id);
                                    temp.is_active = true;
                                }

                                trns_SupervisorLeaveApprovals updateObj = context.trns_SupervisorLeaveApprovals.FirstOrDefault(c => c.pool_id == leave.pool_id && c.supervisor_employee_id == leave.supervisor_employee_id);
                                updateObj.transferred = leave.transferred;
                                updateObj.is_active = leave.is_active;
                                updateObj.remark = "Supervisor transferred the response";
                            }
                        }

                    }

                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        [OperationContract]
        public bool DeleteEmployeeLeaveDetails(Employee_Leave_Detail_View EmployeeLeaveDetail)
        {
            bool IsSuccess = false;
            try
            {
                if (EmployeeLeaveDetail != null)
                {
                    using (var context = new ERPEntities())
                    {
                        dtl_EmployeeLeave deleteEmployeeLeave = context.dtl_EmployeeLeave.First(c => c.emp_id == EmployeeLeaveDetail.emp_id && c.leave_detail_id == EmployeeLeaveDetail.leave_detail_id);

                        foreach (var item in context.dtl_EmployeeMaximumLeaves.Where(c => c.leave_detail_id == deleteEmployeeLeave.leave_detail_id && c.emp_id == deleteEmployeeLeave.emp_id).ToList())
                        {
                            dtl_EmployeeMaximumLeaves delObj = context.dtl_EmployeeMaximumLeaves.FirstOrDefault(c => c.leave_detail_id == item.leave_detail_id && c.emp_id == item.emp_id && c.leave_type_id == item.leave_type_id);
                            context.dtl_EmployeeMaximumLeaves.DeleteObject(delObj);
                        }

                        foreach (var item in context.trns_MigratedLeaveData.Where(c => c.leave_detail_id == deleteEmployeeLeave.leave_detail_id && c.employee_id == deleteEmployeeLeave.emp_id).ToList())
                        {
                            trns_MigratedLeaveData delObj = context.trns_MigratedLeaveData.FirstOrDefault(c => c.leave_detail_id == deleteEmployeeLeave.leave_detail_id && c.employee_id == deleteEmployeeLeave.emp_id);
                            context.trns_MigratedLeaveData.DeleteObject(delObj);
                        }

                        context.dtl_EmployeeLeave.DeleteObject(deleteEmployeeLeave);
                        int i = context.SaveChanges();
                        IsSuccess = validateSaveUpdate(i);
                    }
                }
            }
            catch (Exception)
            {
                IsSuccess = false;
            }

            return IsSuccess;
        }

        [OperationContract]
        public bool SaveUpdateEmployeeLeaveDetails(List<dtl_EmployeeLeave> EmployeeLeaveDetailList, List<trns_MigratedLeaveData> EmpMigratedList, List<dtl_EmployeeMaximumLeaves> EmployeeMaximumLeaveDetailList)
        {
            using (var contex = new ERPEntities())
            {
                try
                {
                    foreach (var LeaveDetail in EmployeeLeaveDetailList)
                    {
                        if (contex.dtl_EmployeeLeave.Count(c => c.emp_id == LeaveDetail.emp_id && c.leave_detail_id == LeaveDetail.leave_detail_id) > 0)
                        {
                            dtl_EmployeeLeave UpdateObj = contex.dtl_EmployeeLeave.FirstOrDefault(c => c.emp_id == LeaveDetail.emp_id && c.leave_detail_id == LeaveDetail.leave_detail_id);
                            UpdateObj.remaining_days = LeaveDetail.remaining_days;
                            UpdateObj.number_of_days = LeaveDetail.number_of_days;
                            UpdateObj.maximum_leaves = LeaveDetail.maximum_leaves;
                            UpdateObj.is_special = LeaveDetail.is_special;

                            List<dtl_EmployeeMaximumLeaves> MaxNewList = EmployeeMaximumLeaveDetailList.Where(c => c.emp_id == UpdateObj.emp_id && c.leave_detail_id == UpdateObj.leave_detail_id).ToList();
                            List<dtl_EmployeeMaximumLeaves> MaxExtList = contex.dtl_EmployeeMaximumLeaves.Where(c => c.emp_id == UpdateObj.emp_id && c.leave_detail_id == UpdateObj.leave_detail_id).ToList();

                            if (MaxNewList == null || MaxNewList.Count == 0)
                            {
                                if (MaxExtList != null && MaxExtList.Count > 0)
                                {
                                    foreach (var item in MaxExtList)
                                    {
                                        dtl_EmployeeMaximumLeaves temp = contex.dtl_EmployeeMaximumLeaves.FirstOrDefault(c => c.leave_detail_id == item.leave_detail_id && c.emp_id == item.emp_id && c.leave_type_id == item.leave_type_id);
                                        if (temp != null)
                                            contex.dtl_EmployeeMaximumLeaves.DeleteObject(temp);
                                    }
                                }
                            }
                            else
                            {
                                List<dtl_EmployeeMaximumLeaves> MaxDelList = UpdateObj.mas_LeaveDetail.dtl_EmployeeMaximumLeaves.Where(c => c.emp_id == UpdateObj.emp_id && c.leave_detail_id == UpdateObj.leave_detail_id && !MaxNewList.Any(d => c.leave_type_id == d.leave_type_id)).ToList();

                                if (MaxDelList != null && MaxDelList.Count > 0)
                                {
                                    foreach (var item in MaxDelList)
                                    {
                                        dtl_EmployeeMaximumLeaves temp = contex.dtl_EmployeeMaximumLeaves.FirstOrDefault(c => c.leave_detail_id == item.leave_detail_id && c.emp_id == item.emp_id && c.leave_type_id == item.leave_type_id);
                                        if (temp != null)
                                            contex.dtl_EmployeeMaximumLeaves.DeleteObject(temp);
                                    }
                                }

                            }

                            if (MaxNewList != null && MaxNewList.Count > 0)
                            {
                                foreach (var MaxItem in MaxNewList)
                                {
                                    if (contex.dtl_EmployeeMaximumLeaves.Count(c => c.emp_id == MaxItem.emp_id && c.leave_detail_id == MaxItem.leave_detail_id && c.leave_type_id == MaxItem.leave_type_id) > 0)
                                    {
                                        dtl_EmployeeMaximumLeaves tempObj = contex.dtl_EmployeeMaximumLeaves.FirstOrDefault(c => c.emp_id == MaxItem.emp_id && c.leave_detail_id == MaxItem.leave_detail_id && c.leave_type_id == MaxItem.leave_type_id);
                                        tempObj.leave_type_qty = MaxItem.leave_type_qty;
                                    }
                                    else
                                        contex.dtl_EmployeeMaximumLeaves.AddObject(MaxItem);
                                }
                            }
                        }
                        else
                        {
                            if (EmpMigratedList.Count(c => c.employee_id == LeaveDetail.emp_id && c.leave_detail_id == LeaveDetail.leave_detail_id && c.value > 0) > 0)
                            {
                                contex.trns_MigratedLeaveData.AddObject(EmpMigratedList.FirstOrDefault(c => c.employee_id == LeaveDetail.emp_id && c.leave_detail_id == LeaveDetail.leave_detail_id));
                            }

                            contex.dtl_EmployeeLeave.AddObject(LeaveDetail);

                            foreach (var item in EmployeeMaximumLeaveDetailList.Where(c => c.leave_detail_id == LeaveDetail.leave_detail_id && c.emp_id == LeaveDetail.emp_id))
                            {
                                contex.dtl_EmployeeMaximumLeaves.AddObject(item);
                            }
                        }
                    }
                    return validateSaveUpdate(contex.SaveChanges());
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        #endregion

        #region z_LeaveTypes Operations

        [OperationContract]
        public IEnumerable<z_LeaveType> GetAllLeaveTypes()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_LeaveType.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }
        [OperationContract]
        public bool SaveLeaveTypeMaster(z_LeaveType LeaveType)
        {
            bool isSuccess = false;
            try
            {
                using (var context = new ERPEntities())
                {
                    z_LeaveType newLeaveType = new z_LeaveType();
                    newLeaveType = LeaveType;
                    context.z_LeaveType.AddObject(LeaveType);
                    int i = context.SaveChanges();
                    return isSuccess = validateSaveUpdate(i);
                }
            }
            catch (Exception)
            {
                return isSuccess = false;
            }
        }

        [OperationContract]
        public bool UpdateLeaveTypeMaster(z_LeaveType LeaveType)
        {
            bool IsSiccess = false;
            try
            {
                if (LeaveType != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_LeaveType updateLeave = context.z_LeaveType.First(a => a.leave_type_id == LeaveType.leave_type_id);
                        if (updateLeave != null)
                        {
                            updateLeave.leave_type_id = LeaveType.leave_type_id;
                            updateLeave.name = LeaveType.name;
                            updateLeave.value = LeaveType.value;
                            int i = context.SaveChanges();
                            return IsSiccess = validateSaveUpdate(i);
                        }
                    }
                }
            }
            catch (Exception)
            {
                return IsSiccess = false;
            }
            return IsSiccess;
        }

        [OperationContract]
        public bool DeleteLeaveTypeMaster(z_LeaveType LeaveType)
        {
            bool IsSuccess = false;
            try
            {
                if (LeaveType != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_LeaveType deleteLeave = context.z_LeaveType.First(r => r.leave_type_id == LeaveType.leave_type_id);
                        context.z_LeaveType.DeleteObject(deleteLeave);
                        int i = context.SaveChanges();
                        return IsSuccess = validateSaveUpdate(i);
                    }
                }
            }
            catch (Exception)
            {
                return IsSuccess = false;
            }
            return IsSuccess;
        }

        [OperationContract]
        public bool SaveLeavePool(List<trns_LeavePool> LeavePools)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    Guid employee = (Guid)LeavePools.FirstOrDefault().emp_id;
                    IEnumerable<dtl_EmployeeSupervisor> ListSupervisors = context.dtl_EmployeeSupervisor.Where(c => c.employee_id == employee && c.module_id == new Guid("EE0D8A55-5A31-4FDB-A36F-36643A26B1AA"));

                    foreach (var item in LeavePools)
                    {
                        context.trns_LeavePool.AddObject(item);
                        Guid Max = ListSupervisors.OrderByDescending(c => c.z_SupervisorLevel.supervisor_level).FirstOrDefault().supervisor_level_id;

                        foreach (var supervisor in ListSupervisors)
                        {
                            trns_SupervisorLeaveApprovals SaveObj = new trns_SupervisorLeaveApprovals();
                            SaveObj.pool_id = item.pool_id;
                            SaveObj.supervisor_employee_id = supervisor.supervisor_employee_id;
                            SaveObj.approved = false;
                            SaveObj.rejected = false;
                            SaveObj.transferred = false;
                            SaveObj.is_active = supervisor.supervisor_level_id == Max ? true : false;

                            context.trns_SupervisorLeaveApprovals.AddObject(SaveObj);
                        }
                    }
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public IEnumerable<trns_LeavePool> GetLeavesByEmpId(Guid EmpID)
        {
            using (var context = new ERPEntities())
            {
                var Results = context.trns_LeavePool.Where(e => e.emp_id == EmpID).ToList();
                Results.ForEach(w => context.Detach(w));
                return Results;
            }
        }

        [OperationContract]
        public IEnumerable<trns_LeavePool> GetLeavesByEmpIdByPeriod(Guid EmpID, Guid Period)
        {
            using (var context = new ERPEntities())
            {
                var Results = context.trns_LeavePool.Where(e => e.emp_id == EmpID && e.mas_LeaveDetail.leave_period_id == Period).ToList();
                Results.ForEach(w => context.Detach(w));
                return Results;
            }
        }

        [OperationContract]
        public IEnumerable<PendingLeavesView> GetAllPendingLeaves(Guid LoggedUser)
        {
            using (var context = new ERPEntities())
            {
                try
                {

                    var Results = context.PendingLeavesViews.Where(c => c.is_pending_for_approval == true).ToList();
                    Results.ForEach(q => context.Detach(q));
                    return Results;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<PendingLeavesForSupervisorApproval> GetAllPendingLeavesForSupervisorApproval(Guid LoggedUser)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    Guid Supervisor = (Guid)context.usr_UserEmployee.FirstOrDefault(c => c.user_id == LoggedUser).employee_id == null ? Guid.Empty : (Guid)context.usr_UserEmployee.FirstOrDefault(c => c.user_id == LoggedUser).employee_id;
                    var Results = context.PendingLeavesForSupervisorApprovals.Where(e => e.approved == false && e.rejected == false && e.transferred == false && e.is_active == true && e.supervisor_employee_id == Supervisor).ToList();
                    Results.ForEach(q => context.Detach(q));
                    return Results;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<LeavePoolView> GetLaevePoolDataByPeriod(Guid Period)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var Results = context.LeavePoolViews.Where(e => e.period_id == Period).ToList();
                    Results.ForEach(w => context.Detach(w));
                    return Results;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public bool UpdatateLeavePoolByView(PendingLeavesView view)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    trns_LeavePool oldPool = context.trns_LeavePool.First(e => e.pool_id.Equals(view.pool_id));
                    if (oldPool != null)
                    {
                        oldPool.is_approved = view.is_approved;
                        oldPool.is_pending_for_approval = view.is_pending_for_approval;
                        oldPool.is_rejected = view.is_rejected;
                        oldPool.approved_user_id = view.approved_user_id;
                        return (validateSaveUpdate(context.SaveChanges()));
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }
            return false;
        }

        #endregion

        #region Leave Pool Operations

        [OperationContract]
        public IEnumerable<trns_LeavePool> GetEmployeeLeavePoolData()
        {
            using (var context = new ERPEntities())
            {
                var result = context.trns_LeavePool.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<dtl_EmployeeLeave> GetEmployeeLeaveDetil()
        {
            using (var context = new ERPEntities())
            {
                var result = context.dtl_EmployeeLeave.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public bool SaveBulkApplyLeave(IEnumerable<trns_LeavePool> list)
        {
            bool IsSuccess = false;
            using (var context = new ERPEntities())
            {
                if (context != null)
                {
                    foreach (var item in list)
                    {
                        context.trns_LeavePool.AddObject(item);
                    }

                    IsSuccess = validateSaveUpdate(context.SaveChanges());
                }
            }
            return IsSuccess;

        }

        [OperationContract]
        public IEnumerable<trns_LeavePool> GetLeavePoolFromDate(DateTime fromdate, DateTime todate)
        {
            //ERPEntities context = new ERPEntities();
            //var result = context.GetLeavePoolContaintFromPeriod(fromdate, todate).ToList();
            //result.ForEach(g => context.Detach(g));
            //return result;
            return null;

        }

        [OperationContract]
        public IEnumerable<PendingLeavesView> GetApprovedLeavePoolDataByDate(DateTime fromDate, DateTime toDate, Guid user_id)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.PendingLeavesViews.Where(c => c.is_approved == true && c.approved_user_id == user_id && c.leave_date >= fromDate && c.leave_date <= toDate && c.leave_category_id != new Guid("9B615C80-32D7-4951-BABC-04AD7193BC32")).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public bool ModifyApprovedLeaves(IEnumerable<PendingLeavesView> LeaveList)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    foreach (var leave in LeaveList)
                    {
                        trns_LeavePool LeavepoolObj = context.trns_LeavePool.FirstOrDefault(c => c.pool_id == leave.pool_id && c.emp_id == leave.Employee_id);
                        LeavepoolObj.is_approved = false;
                        LeavepoolObj.is_rejected = true;
                        dtl_EmployeeLeave EmployeeLeaveObj = context.dtl_EmployeeLeave.FirstOrDefault(c => c.emp_id == leave.Employee_id && c.leave_detail_id == leave.leave_detail_id);
                        EmployeeLeaveObj.number_of_days -= leave.value;
                        EmployeeLeaveObj.remaining_days += leave.value;
                    }

                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }
        #endregion

        #region Leave supervisor operations

        [OperationContract]
        public int GetSupervisorCount(Guid employee, Guid module)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    return context.dtl_EmployeeSupervisor.Count(c => c.employee_id == employee && c.module_id == module);
                }
                catch (Exception)
                {
                    return 0;
                }
            }
        }

        [OperationContract]
        public IEnumerable<EmployeeSupervisorsView> GetAllEmployeeSupervisorByModule(Guid Module)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = Module == Guid.Empty ? context.EmployeeSupervisorsViews.ToList() : context.EmployeeSupervisorsViews.Where(c => c.module_id == Module).ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<EmployeeSupervisorsView> GetAllEmployeeSupervisorByUserEmployee(Guid UserEmployee)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.EmployeeSupervisorsViews.Where(c => c.supervisor_employee_id == UserEmployee).ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        #endregion

        #region Leave Migration Operations

        [OperationContract]
        public int[] CheckExistingEntitlements(Guid FPeriod, Guid TPeriod)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    int[] Result = new int[2];

                    if (context.mas_LeaveDetail.Count(c => c.leave_period_id == FPeriod) > 0)
                    {
                        if (context.Employee_Leave_Detail_Extended_View.Count(c => c.leave_period_id == FPeriod) > 0)
                            Result[0] = 1;
                        else
                            Result[0] = 0;

                    }
                    else
                    {
                        Result[0] = 0;
                    }

                    if (context.mas_LeaveDetail.Count(c => c.leave_period_id == TPeriod) > 0)
                    {
                        if (context.Employee_Leave_Detail_Extended_View.Count(c => c.leave_period_id == TPeriod) > 0)
                            Result[1] = 1;
                        else
                            Result[1] = 0;
                    }
                    else
                    {
                        Result[1] = 0;
                    }


                    return Result;
                }
                catch (Exception)
                {
                    return null;
                }

            }


        }

        [OperationContract]
        public IEnumerable<Employee_Leave_Detail_Extended_View> GetEmployeeLeaveDetailsExtendedViewListByPeriod(Guid Period)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.Employee_Leave_Detail_Extended_View.Where(c => c.leave_period_id == Period).ToList();
                    result.ForEach(s => context.Detach(s));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveMigratedEntitlement(List<mas_LeaveDetail> LeaveList, List<Employee_Leave_Detail_Extended_View> EmployeeLeavesList, List<Employee_Maximum_Leave_Details_View> EmployeeMaxLeavesList)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    foreach (var Leave in LeaveList)
                    {
                        context.mas_LeaveDetail.AddObject(Leave);

                        foreach (var EmpLeave in EmployeeLeavesList.Where(c => c.leave_detail_id == Leave.leave_detail_id))
                        {
                            dtl_EmployeeLeave Temp = new dtl_EmployeeLeave();
                            Temp.emp_id = EmpLeave.emp_id;
                            Temp.leave_detail_id = EmpLeave.leave_detail_id;
                            Temp.number_of_days = EmpLeave.number_of_days;
                            Temp.remaining_days = EmpLeave.is_transferred == true ? EmpLeave.remaining_days + EmpLeave.value : EmpLeave.remaining_days;
                            Temp.maximum_leaves = EmpLeave.maximum_leaves;
                            Temp.is_special = EmpLeave.is_special;

                            context.dtl_EmployeeLeave.AddObject(Temp);

                            trns_MigratedLeaveData Trns = new trns_MigratedLeaveData();
                            Trns.employee_id = EmpLeave.emp_id;
                            Trns.leave_detail_id = EmpLeave.leave_detail_id;
                            Trns.is_payed = (bool)EmpLeave.is_payed;
                            Trns.is_transferred = (bool)EmpLeave.is_transferred;
                            Trns.value = (decimal)EmpLeave.value;

                            context.trns_MigratedLeaveData.AddObject(Trns);

                            foreach (var MaxItem in EmployeeMaxLeavesList.Where(c => c.emp_id == EmpLeave.emp_id && c.leave_detail_id == EmpLeave.leave_detail_id))
                            {
                                dtl_EmployeeMaximumLeaves TempMax = new dtl_EmployeeMaximumLeaves();
                                TempMax.emp_id = MaxItem.emp_id;
                                TempMax.leave_detail_id = MaxItem.leave_detail_id;
                                TempMax.leave_type_id = MaxItem.leave_type_id;
                                TempMax.leave_type_qty = MaxItem.leave_type_qty;

                                context.dtl_EmployeeMaximumLeaves.AddObject(TempMax);
                            }
                        }
                    }

                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        #endregion

        #endregion

        #region AppointmentLetter
        [OperationContract]
        public IEnumerable<Appointment_Letter_View> GetAppointmentView()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.Appointment_Letter_View.ToList();
                    result.ForEach(p => context.Detach(p));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }
        #endregion

        #region ModifyAttendance

        [OperationContract]
        public IEnumerable<EmployeeAttendTimeView> GetExistingAttendance(DateTime? fromdate, DateTime? todate)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.EmployeeAttendTimeViews.Where(c => c.attend_date >= fromdate && c.attend_date <= todate).ToList();
                    result.ForEach(p => context.Detach(p));
                    return result;
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        [OperationContract]
        public IEnumerable<trns_EmployeeApprovedAttendance> GetEmployeeApprovedAttendance()
        {
            using (var context = new ERPEntities())
            {
                var result = context.trns_EmployeeApprovedAttendance.ToList();
                result.ForEach(p => context.Detach(p));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<trns_EmployeeAttendTime> GetModifedAttendance()
        {
            using (var context = new ERPEntities())
            {
                var result = context.trns_EmployeeAttendTime.ToList();
                result.ForEach(c => context.Detach(c));
                return result;
            }
        }

        [OperationContract]
        public bool UpdateModifiedApprovedAttendance(EmployeeAprrovedAttendanceView Attendance)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    trns_EmployeeApprovedAttendance updateObject = context.trns_EmployeeApprovedAttendance.FirstOrDefault(c => c.Employee_ID == Attendance.Employee_ID && c.Manager_ID == Attendance.Manager_ID && c.AttendDate == Attendance.AttendDate);
                    updateObject.Is_Approved = Attendance.Is_Approved;
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool SaveModifiedAttendance(trns_EmployeeAttendTime Attendance, List<trns_EmployeeApprovedAttendance> EmpManagers)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    context.trns_EmployeeAttendTime.AddObject(Attendance);

                    if (EmpManagers.Count > 0)
                    {
                        foreach (var item in EmpManagers)
                        {
                            context.trns_EmployeeApprovedAttendance.AddObject(item);
                        }
                    }
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool UpdateModifiedAttendance(trns_EmployeeAttendTime Attendance)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    trns_EmployeeAttendTime updateObject = context.trns_EmployeeAttendTime.FirstOrDefault(c => c.employee_id == Attendance.employee_id && c.period_id == Attendance.period_id && c.attend_date == Attendance.attend_date && c.in_time == Attendance.in_time && c.out_time == Attendance.out_time && c.roster_header_id == Attendance.roster_header_id);
                    updateObject.modified_actual_ot_intime = Attendance.modified_actual_ot_intime;
                    updateObject.modified_actual_ot_outtime = Attendance.modified_actual_ot_outtime;
                    updateObject.is_approved = Attendance.is_approved;

                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public IEnumerable<EmployeeAprrovedAttendanceView> GetEmployeeApprovedAttendanceView()
        {
            using (var context = new ERPEntities())
            {
                var result = context.EmployeeAprrovedAttendanceViews.ToList();
                result.ForEach(c => context.Detach(c));
                return result;
            }
        }

        #endregion

        #region User Employee

        //usr_User Delete method is modified

        [OperationContract]
        public IEnumerable<usr_UserEmployee> GetUserEmployees()
        {
            using (var context = new ERPEntities())
            {
                var result = context.usr_UserEmployee.ToList();
                result.ForEach(c => context.Detach(c));
                return result;
            }
        }

        [OperationContract]
        public bool SaveUserEmployee(usr_UserEmployee userEmployee)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    usr_UserEmployee SaveObject = new usr_UserEmployee();
                    SaveObject.employee_id = userEmployee.employee_id;
                    SaveObject.user_id = userEmployee.user_id;
                    context.usr_UserEmployee.AddObject(userEmployee);
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool UpdateUserEmployee(usr_UserEmployee userEmployee)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    usr_UserEmployee UpdateObject = context.usr_UserEmployee.FirstOrDefault(c => c.user_id == userEmployee.user_id);
                    UpdateObject.employee_id = userEmployee.employee_id;
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        #endregion

        #region EmployeeUniform
        [OperationContract]
        public IEnumerable<z_Uniform> GetUniforms()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_Uniform.Where(c => c.Is_Delete == false).ToList();
                result.ForEach(p => context.Detach(p));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<dtl_Uniform> GetDtlUniform()
        {
            using (var context = new ERPEntities())
            {
                var result = context.dtl_Uniform.Where(c => c.Is_Delete == false).ToList();
                result.ForEach(p => context.Detach(p));
                return result;
            }
        }

        #endregion

        #region Save Update Delete z_Uniform

        [OperationContract]
        public bool SaveUniform(z_Uniform uniform)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (context.z_Uniform.Count(c => c.Uniform_ID == uniform.Uniform_ID) != 0)
                        uniform.Uni_ID = GetLastUniID();
                    context.z_Uniform.AddObject(uniform);
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool UpdateUniform(z_Uniform uniform)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    z_Uniform updateObject = context.z_Uniform.FirstOrDefault(c => c.Uniform_ID == uniform.Uniform_ID);
                    updateObject.Uniform_ID = uniform.Uniform_ID;
                    updateObject.Uni_Name = uniform.Uni_Name;
                    updateObject.Uni_ID = uniform.Uni_ID;
                    updateObject.Is_Delete = uniform.Is_Delete;
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool DeleteUniform(z_Uniform uniform)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    z_Uniform deleteObject = context.z_Uniform.FirstOrDefault(c => c.Uniform_ID == uniform.Uniform_ID);
                    deleteObject.Is_Delete = true;
                    if (validateSaveUpdate(context.SaveChanges()))
                    {
                        List<dtl_Uniform> list = new List<dtl_Uniform>();
                        list = context.dtl_Uniform.Where(c => c.Uniform_ID == uniform.Uniform_ID && c.Is_Delete == false).ToList();
                        list.ForEach(c => DeleteUniformItem(c));
                        return true;
                    }
                    return false;
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool SaveUniformItem(dtl_Uniform item)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (context.dtl_Uniform.Count(c => c.Item_No == item.Item_No) != 0)
                        item.Item_No = GetLastItemNo();
                    context.dtl_Uniform.AddObject(item);
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool UpdateUniformItem(dtl_Uniform item)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    dtl_Uniform updateObject = context.dtl_Uniform.FirstOrDefault(c => c.Item_No == item.Item_No);
                    updateObject.Item_No = item.Item_No;
                    updateObject.Uniform_ID = item.Uniform_ID;
                    updateObject.Item_Name = item.Item_Name;
                    updateObject.Price = item.Price;
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool DeleteUniformItem(dtl_Uniform item)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    dtl_Uniform deleteObject = context.dtl_Uniform.FirstOrDefault(c => c.Item_No == item.Item_No);
                    deleteObject.Is_Delete = true;
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        #endregion

        #region Employee Uniform Orders

        [OperationContract]
        public IEnumerable<Employee_Uniform_Order_View> GetUniformOrdersView()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.Employee_Uniform_Order_View.Where(c => c.Is_Delete == false).ToList();
                    result.ForEach(p => context.Detach(p));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public IEnumerable<EmployeeUniformOrderQtyView> GetEmployeeUniformOrderQtyView()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.EmployeeUniformOrderQtyViews.Where(c => c.Is_Delete == false).ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public IEnumerable<z_EmployeeUniformOrders> GetEmployeeUniformOrders()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_EmployeeUniformOrders.Where(c => c.Is_Delete == false).ToList();
                result.ForEach(p => context.Detach(p));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<dtl_EmployeeUniformOrder> GetEmployeeUniformOrdersDetail()
        {
            using (var context = new ERPEntities())
            {
                var result = context.dtl_EmployeeUniformOrder.Where(c => c.Is_Delete == false).ToList();
                result.ForEach(p => context.Detach(p));
                return result;
            }
        }

        #region Save Update Delete z_EmployeeUniformOrders

        [OperationContract]
        public bool SaveUniformOrders(z_EmployeeUniformOrders Order, List<dtl_EmployeeUniformOrder> OrderItems)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (context.z_EmployeeUniformOrders.Count(c => c.order_id == Order.order_id) != 0)
                        Order.order_id = GetLastUniformOrderNo();
                    context.z_EmployeeUniformOrders.AddObject(Order);

                    foreach (var item in OrderItems)
                    {
                        context.dtl_EmployeeUniformOrder.AddObject(item);
                    }
                    return validateSaveUpdate(context.SaveChanges());

                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool UpdateUniformOrders(z_EmployeeUniformOrders Order, List<dtl_EmployeeUniformOrder> OrderItems)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    z_EmployeeUniformOrders UpdateObject = context.z_EmployeeUniformOrders.FirstOrDefault(c => c.order_id == Order.order_id);
                    UpdateObject.issue_date = Order.issue_date;

                    //New
                    if (validateSaveUpdate(context.SaveChanges()))
                    {
                        List<dtl_EmployeeUniformOrder> oldItems = context.dtl_EmployeeUniformOrder.Where(c => c.order_id == Order.order_id).ToList();
                        foreach (var item in OrderItems)
                        {
                            if (oldItems.Count(c => c.Item_No == item.Item_No) == 0) //to add items which are not in old list, but in new list
                            {
                                context.dtl_EmployeeUniformOrder.AddObject(item);
                                //context.SaveChanges();
                            }
                            else //to modify items which are in old list
                            {
                                dtl_EmployeeUniformOrder updateItem = context.dtl_EmployeeUniformOrder.FirstOrDefault(c => c.Item_No == item.Item_No && c.order_id == Order.order_id);
                                updateItem.Quantity = item.Quantity;
                                updateItem.Is_Delete = false;
                                context.SaveChanges();
                            }
                        }

                        foreach (var item in oldItems)
                        {
                            if (OrderItems.Count(c => c.Item_No == item.Item_No) == 0)
                            {
                                dtl_EmployeeUniformOrder updateItem = context.dtl_EmployeeUniformOrder.FirstOrDefault(c => c.Item_No == item.Item_No && c.order_id == Order.order_id);
                                updateItem.Is_Delete = true;
                                context.SaveChanges();
                            }
                        }
                    }
                    // End New
                    foreach (var item in OrderItems)
                    {
                        dtl_EmployeeUniformOrder ItemUpdateObject = context.dtl_EmployeeUniformOrder.FirstOrDefault(c => c.order_id == item.order_id);
                        ItemUpdateObject.Quantity = item.Quantity;
                        ItemUpdateObject.Is_Delete = item.Is_Delete;
                    }
                    return true;
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool DeleteUniformOrders(z_EmployeeUniformOrders Order, List<dtl_EmployeeUniformOrder> OrderItems)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    z_EmployeeUniformOrders DeleteObject = context.z_EmployeeUniformOrders.FirstOrDefault(c => c.order_id == Order.order_id);
                    DeleteObject.Is_Delete = true;
                    if (validateSaveUpdate(context.SaveChanges()))
                    {
                        foreach (var item in OrderItems)
                        {
                            dtl_EmployeeUniformOrder ItemDeleteObject = context.dtl_EmployeeUniformOrder.FirstOrDefault(c => c.Item_No == item.Item_No && c.order_id == item.order_id);
                            ItemDeleteObject.Is_Delete = true;
                            context.SaveChanges();
                        }
                    }

                }
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }

        #endregion

        #endregion

        #region WarningLetter

        [OperationContract]
        public IEnumerable<mas_WarningLetter> GetZWarningLetter()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.mas_WarningLetter.Where(c => c.isdelete == false).ToList();
                    result.ForEach(p => context.Detach(p));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public IEnumerable<dtl_EmployeeWarning> GetDtlWarninletter()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.dtl_EmployeeWarning.Where(c => c.isdelete == false).ToList();
                    result.ForEach(p => context.Detach(p));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }

            #region save update delete warning

            #endregion

        }

        #region Save Update Delete WarningLetter

        [OperationContract]
        public bool SaveWarningLetter(mas_WarningLetter Warning, dtl_EmployeeWarning DtlWarning)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (context.mas_WarningLetter.Count(c => c.Warning_Letter_id == Warning.Warning_Letter_id) != 0)
                        Warning.Warning_Letter_id = GetLastWarningLettetrID();
                    context.mas_WarningLetter.AddObject(Warning);
                    context.SaveChanges();
                    context.dtl_EmployeeWarning.AddObject(DtlWarning);
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool DeleteWarningLetter(mas_WarningLetter Warning, dtl_EmployeeWarning DtlWarning)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    mas_WarningLetter MasDeleteObj = context.mas_WarningLetter.FirstOrDefault(c => c.Warning_Letter_id == Warning.Warning_Letter_id);
                    MasDeleteObj.isdelete = true;
                    MasDeleteObj.delete_user_id = Warning.delete_user_id;
                    MasDeleteObj.delete_datetime = Warning.delete_datetime;

                    dtl_EmployeeWarning DtlDeleteObj = context.dtl_EmployeeWarning.FirstOrDefault(c => c.WarningLetterId == DtlWarning.WarningLetterId);
                    DtlDeleteObj.isdelete = true;
                    DtlDeleteObj.delete_user_id = Warning.delete_user_id;
                    DtlDeleteObj.delete_datetime = Warning.delete_datetime;

                    return validateSaveUpdate(context.SaveChanges());

                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        #endregion

        #endregion

        #region GetLastNo

        [OperationContract]
        private int GetLastUniID()
        {
            int x = 0;

            try
            {
                using (var context = new ERPEntities())
                {
                    x = (int)context.z_Uniform.OrderByDescending(c => c.Uni_ID).FirstOrDefault().Uni_ID;
                }
            }
            catch (Exception)
            { }
            return x + 1;
        }

        [OperationContract]
        private int GetLastItemNo()
        {
            int x = 0;

            try
            {
                using (var context = new ERPEntities())
                {
                    x = (int)context.dtl_Uniform.OrderByDescending(c => c.Item_No).FirstOrDefault().Item_No;
                }
            }
            catch (Exception)
            {
            }
            return x + 1;
        }

        [OperationContract]
        private int GetLastUniformOrderNo()
        {
            int x = 0;

            try
            {
                using (var context = new ERPEntities())
                {
                    x = (int)context.z_EmployeeUniformOrders.OrderByDescending(c => c.order_id).FirstOrDefault().order_id;
                }
            }
            catch (Exception)
            {
            }
            return x + 1;
        }

        [OperationContract]
        private int GetLastWarningLettetrID()
        {
            int x = 0;
            try
            {
                using (var context = new ERPEntities())
                {
                    x = context.mas_WarningLetter.OrderByDescending(c => c.Warning_Letter_id).FirstOrDefault().Warning_Letter_id;
                }
            }
            catch (Exception)
            {
            }
            return x + 1;

        }

        #endregion

        #region Attendance

        #region OT Approvals

        #region Approval Level Operations

        [OperationContract]
        public IEnumerable<z_OTApprovalLevel> GetOTApprovalLevels()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.z_OTApprovalLevel.Where(c => c.is_delete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveOTApprovalLevels(z_OTApprovalLevel ApprovalLevel)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    context.z_OTApprovalLevel.AddObject(ApprovalLevel);
                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        [OperationContract]
        public bool UpdateOTApprovalLevels(z_OTApprovalLevel ApprovalLevel)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    //if (context.z_OTApprovalLevel.Count(c => c.dtl_EmployeeOTApprovalLevels.Count() > 0) > 0)
                    //{
                    if (context.z_OTApprovalLevel.FirstOrDefault(c => c.ot_approval_type_id == ApprovalLevel.ot_approval_type_id).dtl_EmployeeOTApprovalLevels.Count(c => context.trns_OT_Approvals.Any(d => c.employee_id == d.employee_id && d.is_respond == false) == true) == 0)
                    {
                        z_OTApprovalLevel updateObj = context.z_OTApprovalLevel.FirstOrDefault(c => c.ot_approval_type_id == ApprovalLevel.ot_approval_type_id);
                        updateObj.ot_approval_type = ApprovalLevel.ot_approval_type;
                        updateObj.ot_hours_start = ApprovalLevel.ot_hours_start;
                        updateObj.ot_hous_end = ApprovalLevel.ot_hous_end;
                        updateObj.supervisor_leve_id = ApprovalLevel.supervisor_leve_id;
                        updateObj.modified_user_id = ApprovalLevel.modified_user_id;
                        updateObj.modified_datetime = ApprovalLevel.modified_datetime;
                    }
                    else
                    {
                        z_OTApprovalLevel updateObj = context.z_OTApprovalLevel.FirstOrDefault(c => c.ot_approval_type_id == ApprovalLevel.ot_approval_type_id);
                        updateObj.ot_approval_type = ApprovalLevel.ot_approval_type;
                        updateObj.modified_user_id = ApprovalLevel.modified_user_id;
                        updateObj.modified_datetime = ApprovalLevel.modified_datetime;
                    }

                    return validateSaveUpdate(context.SaveChanges());
                    //}
                    //else
                    //return false;
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        [OperationContract]
        public bool DeleteOTApprovalLevels(z_OTApprovalLevel ApprovalLevel)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    //if (context.z_OTApprovalLevel.Count(c => c.ot_approval_type_id == ApprovalLevel.ot_approval_type_id) > 0)
                    //{
                    z_OTApprovalLevel updateObj = context.z_OTApprovalLevel.FirstOrDefault(c => c.ot_approval_type_id == ApprovalLevel.ot_approval_type_id);

                    if (context.z_OTApprovalLevel.FirstOrDefault(c => c.ot_approval_type_id == ApprovalLevel.ot_approval_type_id).dtl_EmployeeOTApprovalLevels.Count(c => context.trns_OT_Approvals.Any(d => c.employee_id == d.employee_id && d.is_respond == false) == true) == 0)
                    {
                        //foreach (var item in updateObj.dtl_EmployeeOTApprovalLevels.ToList())
                        //{
                        //context.dtl_EmployeeOTApprovalLevels.DeleteObject(context.dtl_EmployeeOTApprovalLevels.FirstOrDefault(c => c.ot_approval_type_id == item.ot_approval_type_id));
                        updateObj.is_delete = ApprovalLevel.is_delete;
                        updateObj.deleted_user_id = ApprovalLevel.deleted_user_id;
                        updateObj.deleted_datetime = ApprovalLevel.deleted_datetime;
                        //}

                        //context.z_OTApprovalLevel.DeleteObject(updateObj);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                    return
                        false;
                    //}
                    //else
                    //return false;
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        #endregion

        #region Supervisor Approval Operations

        [OperationContract]
        public IEnumerable<trns_OT_RuleData> GetOTRuleData(Guid period)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.trns_OT_RuleData.Where(c => c.trns_OT_Approvals.period_id == period).ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public int CheckOTEligibleEmployees(Guid period)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    if (context.Employee_OT_View.Count(c => c.period_id == period) > 0)
                    {
                        if (context.trns_OT_Approvals.Count(c => c.period_id == period) > 0)
                        {
                            return 1;
                        }
                        else
                        {
                            return 2;
                        }
                    }
                    else
                        return 0;
                }
                catch (Exception)
                {
                    return 0;
                }
            }
        }

        [OperationContract]
        public string GenerateSupervisorOTApprovals(Guid period, bool delete_Status)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    StringBuilder failedstring = new StringBuilder();

                    if (delete_Status == true)
                    {
                        IEnumerable<trns_OT_Approvals> tempList = context.trns_OT_Approvals.Where(c => c.period_id == period);
                        foreach (var item in tempList.ToList())
                        {
                            context.trns_OT_Approvals.FirstOrDefault(c => c.ot_approval_id == item.ot_approval_id).trns_Supervisor_OT_Approval.ToList().ForEach(c => context.trns_Supervisor_OT_Approval.DeleteObject(c));
                            context.trns_OT_Approvals.FirstOrDefault(c => c.ot_approval_id == item.ot_approval_id).trns_OT_RuleData.ToList().ForEach(c => context.trns_OT_RuleData.DeleteObject(c));
                            context.trns_OT_Approvals.DeleteObject(context.trns_OT_Approvals.FirstOrDefault(c => c.ot_approval_id == item.ot_approval_id));
                        }

                    }

                    IEnumerable<Employee_OT_View> TempView = context.Employee_OT_View.Where(c => c.period_id == period);
                    List<trns_OT_Approvals> TempEmpOT = new List<trns_OT_Approvals>();
                    Guid attPeriod = TempView.FirstOrDefault().period_id;

                    foreach (var Employee in TempView.Select(c => c.employee_id).Distinct())
                    {
                        if (context.dtl_EmployeeOTApprovalLevels.Count(c => c.employee_id == Employee) > 0)
                        {
                            decimal Minimum = context.dtl_EmployeeOTApprovalLevels.Where(c => c.employee_id == Employee).OrderBy(c => c.z_OTApprovalLevel.ot_hours_start).FirstOrDefault().z_OTApprovalLevel.ot_hours_start;
                            decimal totalOT = (decimal)TempView.Where(c => c.employee_id == Employee).Select(c => c.quantity).Sum();
                            IEnumerable<z_OTApprovalLevel> EmployeeOTApprovalLevels = context.z_OTApprovalLevel.Where(c => c.dtl_EmployeeOTApprovalLevels.Count(d => c.ot_approval_type_id == d.ot_approval_type_id && d.employee_id == Employee) > 0);
                            bool failed = false;

                            if (totalOT >= Minimum && totalOT <= EmployeeOTApprovalLevels.Max(c => c.ot_hous_end))
                            {
                                EntityCollection<trns_Supervisor_OT_Approval> TempSupApprovals = new EntityCollection<trns_Supervisor_OT_Approval>();
                                EntityCollection<trns_OT_RuleData> TempOTRules = new EntityCollection<trns_OT_RuleData>();

                                foreach (var rule in EmployeeOTApprovalLevels.OrderBy(c => c.ot_hours_start))
                                {
                                    if (totalOT >= rule.ot_hours_start)
                                    {
                                        if (context.dtl_EmployeeSupervisor.Count(c => c.employee_id == Employee && c.supervisor_level_id == rule.supervisor_leve_id && c.module_id == new Guid("BB801CA4-9B97-4A2E-A985-CF4D797CCF76")) > 0)
                                        {
                                            trns_Supervisor_OT_Approval temp = new trns_Supervisor_OT_Approval();
                                            temp.supervisor_employee_id = context.dtl_EmployeeSupervisor.FirstOrDefault(c => c.employee_id == Employee && c.supervisor_level_id == rule.supervisor_leve_id && c.module_id == new Guid("BB801CA4-9B97-4A2E-A985-CF4D797CCF76")).supervisor_employee_id;
                                            temp.is_approved = false;
                                            temp.is_rejected = false;

                                            TempSupApprovals.Add(temp);
                                        }
                                        else
                                        {
                                            failedstring.Append(TempView.FirstOrDefault(c => c.employee_id == Employee).emp_id + ", ");
                                            failed = true;
                                            break;
                                        }
                                    }
                                }

                                if (failed)
                                    continue;
                                else
                                {
                                    foreach (var item in TempView.Where(c => c.employee_id == Employee && c.quantity > 0))
                                    {
                                        trns_OT_RuleData tempTrn = new trns_OT_RuleData();
                                        tempTrn.rule_id = item.rule_id;
                                        tempTrn.rule_name = item.rule_name;
                                        tempTrn.quantity = (decimal)item.quantity;

                                        TempOTRules.Add(tempTrn);
                                    }

                                    trns_OT_Approvals temp = new trns_OT_Approvals();
                                    temp.employee_id = Employee;
                                    temp.period_id = attPeriod;
                                    temp.normal_ot = TempView.FirstOrDefault(c => c.employee_id == Employee && (c.rule_id == new Guid("00000000-0000-0000-0000-000000000001") || c.rule_id == new Guid("00000000-0000-0000-0000-000000000004"))) == null ? 0 : (decimal)TempView.FirstOrDefault(c => c.employee_id == Employee && (c.rule_id == new Guid("00000000-0000-0000-0000-000000000001") || c.rule_id == new Guid("00000000-0000-0000-0000-000000000004"))).quantity;
                                    temp.double_ot = TempView.FirstOrDefault(c => c.employee_id == Employee && (c.rule_id == new Guid("00000000-0000-0000-0000-000000000001") || c.rule_id == new Guid("00000000-0000-0000-0000-000000000004"))) == null ? 0 : (decimal)TempView.FirstOrDefault(c => c.employee_id == Employee && (c.rule_id == new Guid("00000000-0000-0000-0000-000000000002") || c.rule_id == new Guid("00000000-0000-0000-0000-000000000005"))).quantity;
                                    temp.triple_ot = TempView.FirstOrDefault(c => c.employee_id == Employee && (c.rule_id == new Guid("00000000-0000-0000-0000-000000000001") || c.rule_id == new Guid("00000000-0000-0000-0000-000000000004"))) == null ? 0 : (decimal)TempView.FirstOrDefault(c => c.employee_id == Employee && (c.rule_id == new Guid("00000000-0000-0000-0000-000000000003") || c.rule_id == new Guid("00000000-0000-0000-0000-000000000006"))).quantity;
                                    temp.total_ot = temp.normal_ot + temp.double_ot + temp.triple_ot;
                                    temp.is_respond = false;
                                    temp.trns_Supervisor_OT_Approval = TempSupApprovals;
                                    temp.trns_OT_RuleData = TempOTRules;

                                    TempEmpOT.Add(temp);
                                }
                            }
                            else
                            {
                                failedstring.Append(TempView.FirstOrDefault(c => c.employee_id == Employee).emp_id + ", ");
                                continue;
                            }
                        }
                        else
                        {
                            failedstring.Append(TempView.FirstOrDefault(c => c.employee_id == Employee).emp_id + ", ");
                        }
                    }

                    if (TempEmpOT.Count > 0)
                    {
                        foreach (var item in TempEmpOT)
                        {
                            context.trns_OT_Approvals.AddObject(item);
                        }

                        if (validateSaveUpdate(context.SaveChanges()))
                        {
                            if (failedstring.ToString().Length > 0)
                                return "OT approval details generated successfully other than the following employees whose supervisor details or OT approval levels missing :\n\n" + failedstring.ToString();
                            else
                                return "OT approval details generated successfully..";
                        }
                        else
                            return "An Error occured while saving records...";

                    }

                    else
                    {
                        if (failedstring.ToString().Length > 0)
                            return "Please check the supervisors and OT approval levels of the following employees :\n\n" + failedstring.ToString();
                        else
                            return "OT approval details generated successfully..";
                    }
                }
                catch (Exception)
                {
                    return "An Error occured while saving records...";
                }
            }
        }

        //[OperationContract]
        //public IEnumerable<EmployeeOTView> GetEmployeeOTApprovalsByPeriod(Guid period, Guid userID)
        //{
        //    using (var context = new ERPEntities())
        //    {
        //        try
        //        {
        //            Guid empID = (Guid)context.usr_UserEmployee.FirstOrDefault(d => d.user_id == userID).employee_id;
        //            var result = context.EmployeeOTViews.Where(c => c.period_id == period && c.supervisor_employee_id == empID && !(c.single_ot_total == "000:00:00" && c.double_ot_total == "000:00:00" && c.triple_ot_total == "000:00:00")).ToList();
        //            result.ForEach(e => context.Detach(e));
        //            return result;
        //        }
        //        catch (Exception)
        //        {
        //            return null;
        //        }
        //    }
        //}

        [OperationContract]
        public IEnumerable<Supervisor_OT_Approvals_View> GetSupervisorOTApprovalsByPeriod(Guid period)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.Supervisor_OT_Approvals_View.Where(c => c.period_id == period).ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public decimal GetEmployeeOTRates(string OTType, Guid EmployeeID)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    decimal rate = 0;
                    if (OTType.Equals("Normal"))
                    {
                        if (context.dtl_EmployeeRule.FirstOrDefault(c => c.employee_id == EmployeeID && (c.rule_id == new Guid("00000000-0000-0000-0000-000000000001") || c.rule_id == new Guid("00000000-0000-0000-0000-000000000004"))) != null)
                        {
                            rate = (decimal)context.dtl_EmployeeRule.FirstOrDefault(c => c.employee_id == EmployeeID && (c.rule_id == new Guid("00000000-0000-0000-0000-000000000001") || c.rule_id == new Guid("00000000-0000-0000-0000-000000000004"))).special_amount;
                        }
                        else
                        {
                            rate = 0;
                        }
                    }
                    else if (OTType.Equals("Double"))
                    {
                        if (context.dtl_EmployeeRule.FirstOrDefault(c => c.employee_id == EmployeeID && (c.rule_id == new Guid("00000000-0000-0000-0000-000000000002") || c.rule_id == new Guid("00000000-0000-0000-0000-000000000005"))) != null)
                        {
                            rate = (decimal)context.dtl_EmployeeRule.FirstOrDefault(c => c.employee_id == EmployeeID && (c.rule_id == new Guid("00000000-0000-0000-0000-000000000001") || c.rule_id == new Guid("00000000-0000-0000-0000-000000000005"))).special_amount;
                        }
                        else
                        {
                            rate = 0;
                        }
                    }
                    else if (OTType.Equals("Triple"))
                    {
                        if (context.dtl_EmployeeRule.FirstOrDefault(c => c.employee_id == EmployeeID && (c.rule_id == new Guid("00000000-0000-0000-0000-000000000003") || c.rule_id == new Guid("00000000-0000-0000-0000-000000000006"))) != null)
                        {
                            rate = (decimal)context.dtl_EmployeeRule.FirstOrDefault(c => c.employee_id == EmployeeID && (c.rule_id == new Guid("00000000-0000-0000-0000-000000000003") || c.rule_id == new Guid("00000000-0000-0000-0000-000000000006"))).special_amount;
                        }
                        else
                        {
                            rate = 0;
                        }
                    }
                    else
                        rate = 0;

                    return rate;
                }
                catch (Exception)
                {
                    return 0;
                }
            }
        }

        [OperationContract]
        public bool SaveOTApproval(trns_OT_Approvals otApproval)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    //trns_Supervisor_OT_Approval temp = context.trns_Supervisor_OT_Approval.FirstOrDefault(c => c.ot_approval_id == supApproval.ot_approval_id && c.supervisor_employee_id == supApproval.supervisor_employee_id);
                    //temp.is_approved = supApproval.is_approved;
                    //temp.save_datetime = supApproval.save_datetime;
                    //temp.remark = supApproval.remark;

                    //if (context.trns_Supervisor_OT_Approval.Count(c => c.ot_approval_id == supApproval.ot_approval_id) == context.trns_Supervisor_OT_Approval.Count(c => c.ot_approval_id == supApproval.ot_approval_id && (c.is_approved == true || c.is_rejected == true)) + 1)
                    //{
                    //    trns_OT_Approvals MasApproval = context.trns_OT_Approvals.FirstOrDefault(c => c.ot_approval_id == supApproval.ot_approval_id);
                    //    MasApproval.is_respond = true;
                    //}

                    //return validateSaveUpdate(context.SaveChanges());
                    context.trns_OT_Approvals.AddObject(otApproval);
                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        [OperationContract]
        public List<trns_OT_Approvals> GetOTApprovedEmployees(Guid PeriodID)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    List<trns_OT_Approvals> EmployeeList = context.trns_OT_Approvals.Where(c => c.period_id == PeriodID).ToList();
                    EmployeeList.ForEach(e => context.Detach(e));
                    return EmployeeList;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public Guid GetEmployeeLevel(Guid EmployeeID)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    Guid LevelID = context.dtl_EmployeeSupervisor.FirstOrDefault(c => c.supervisor_employee_id == EmployeeID).supervisor_level_id;
                    return LevelID;
                }
                catch (Exception)
                {
                    return Guid.Empty;
                }
            }
        }

        [OperationContract]
        public bool SaveOTRejection(Supervisor_OT_Approvals_View supApproval, IEnumerable<trns_OT_RuleData> OTRules)
        {
            using (var context = new ERPEntities())
            {
                try
                {

                    trns_OT_Approvals MasApproval = context.trns_OT_Approvals.FirstOrDefault(c => c.ot_approval_id == supApproval.ot_approval_id);
                    MasApproval.is_respond = true;

                    IEnumerable<trns_Supervisor_OT_Approval> Approvals = context.trns_Supervisor_OT_Approval.Where(c => c.ot_approval_id == supApproval.ot_approval_id);

                    foreach (var item in Approvals.Where(c => c.is_approved == false && c.is_rejected == false).ToList())
                    {
                        trns_Supervisor_OT_Approval temp = context.trns_Supervisor_OT_Approval.FirstOrDefault(c => c.supervisor_employee_id == item.supervisor_employee_id && c.ot_approval_id == item.ot_approval_id);
                        temp.is_rejected = supApproval.is_rejected;
                        temp.save_datetime = supApproval.save_datetime;
                        temp.remark = item.supervisor_employee_id == supApproval.supervisor_employee_id ? supApproval.remark : "Automatically rejected by the system.";
                    }

                    foreach (var item in OTRules)
                    {
                        trns_EmployeePeriodQunatity temp = context.trns_EmployeePeriodQunatity.FirstOrDefault(c => c.period_id == MasApproval.period_id && c.employee_id == MasApproval.employee_id && c.rule_id == item.rule_id);
                        temp.quantity -= item.quantity;
                    }

                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        #endregion

        #region Employee OT Rules Operation

        [OperationContract]
        public IEnumerable<dtl_EmployeeOTApprovalLevels> GetEmployeeOTApprovalLevels()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.dtl_EmployeeOTApprovalLevels.ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<Employee_OT_ApprovalLevels_View> GetEmployeeOTApprovalLevelsView()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.Employee_OT_ApprovalLevels_View.ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<Employee_OT_ApprovalLevels_Summary_View> GetEmployeeOTApprovalLevelsSummaryView()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.Employee_OT_ApprovalLevels_Summary_View.ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveEmployeeOTApprovalLevels(IEnumerable<dtl_EmployeeOTApprovalLevels> EmployeRules)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    foreach (var item in EmployeRules)
                    {
                        context.dtl_EmployeeOTApprovalLevels.AddObject(item);
                    }

                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        [OperationContract]
        public bool DeleteEmployeeOTApprovalLevels(IEnumerable<Employee_OT_ApprovalLevels_View> EmployeRules)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    foreach (var item in EmployeRules)
                    {
                        context.dtl_EmployeeOTApprovalLevels.DeleteObject(context.dtl_EmployeeOTApprovalLevels.FirstOrDefault(c => c.ot_approval_type_id == item.ot_approval_type_id && c.employee_id == item.employee_id));
                    }

                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        #endregion

        #endregion

        #endregion

        #region Payroll OLD

        [OperationContract]
        public IEnumerable<EmployeeRuleDetailsView> GetEmployeeRuleDetailsByPeriod(Guid period_id)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.EmployeeRuleDetailsViews.Where(c => c.period_id == period_id).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<EmployeeRuleDetailSummaryView> GetEmployeeRuleDetailSummaryByPeriod(Guid period_id)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.EmployeeRuleDetailSummaryViews.Where(c => c.period_id == period_id).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveUpdateEmployeeRuleDetails(List<dtl_EmployeeRule> Employeerules, List<trns_EmployeePeriodQunatity> PeriodQuantity)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    foreach (var dtlRule in Employeerules)
                    {
                        if (context.dtl_EmployeeRule.Count(c => c.employee_id == dtlRule.employee_id && c.rule_id == dtlRule.rule_id && c.isdelete == false) > 0)
                        {
                            dtl_EmployeeRule TempRule = context.dtl_EmployeeRule.FirstOrDefault(c => c.employee_id == dtlRule.employee_id && c.rule_id == dtlRule.rule_id && c.isdelete == false);
                            TempRule.isactive = dtlRule.isactive;
                            TempRule.special_amount = dtlRule.special_amount;
                            TempRule.modified_user_id = dtlRule.save_user_id;
                            TempRule.modified_datetime = dtlRule.save_datetime;

                            foreach (var trRule in PeriodQuantity.Where(c => c.employee_id == dtlRule.employee_id && c.rule_id == dtlRule.rule_id))
                            {
                                if (context.trns_EmployeePeriodQunatity.Count(c => c.employee_id == trRule.employee_id && c.rule_id == trRule.rule_id && c.period_id == trRule.period_id && c.isdelete == false) > 0)
                                {
                                    trns_EmployeePeriodQunatity temptr = context.trns_EmployeePeriodQunatity.FirstOrDefault(c => c.employee_id == trRule.employee_id && c.rule_id == trRule.rule_id && c.period_id == trRule.period_id && c.isdelete == false);
                                    temptr.quantity = trRule.quantity;
                                    temptr.modified_datetime = trRule.save_datetime;
                                    temptr.modified_user_id = trRule.save_user_id;

                                    if (context.mas_CompanyRule.FirstOrDefault(c => c.isdelete == false && c.isActive == true && c.rule_id == temptr.rule_id).benifit_id != Guid.Empty)
                                    {
                                        trns_EmployeeBenifitPeriod tempBprd = context.trns_EmployeeBenifitPeriod.FirstOrDefault(c => c.employee_id == trRule.employee_id && c.rule_id == trRule.rule_id && c.period_id == trRule.period_id && c.isdelete == false);
                                        if (tempBprd != null)
                                        {
                                            tempBprd.units = trRule.quantity;
                                            tempBprd.amount = dtlRule.special_amount * trRule.quantity;
                                            tempBprd.amount_per_unit = dtlRule.special_amount;
                                        }
                                    }

                                    else
                                    {
                                        trns_EmployeeDeductionPeriod tempBprd = context.trns_EmployeeDeductionPeriod.FirstOrDefault(c => c.employee_id == trRule.employee_id && c.rule_id == trRule.rule_id && c.period_id == trRule.period_id && c.isdelete == false);
                                        if (tempBprd != null)
                                        {
                                            tempBprd.units = trRule.quantity;
                                            tempBprd.amount = dtlRule.special_amount * trRule.quantity;
                                            tempBprd.amount_per_unit = dtlRule.special_amount;
                                        }
                                    }
                                }
                                else
                                {
                                    if (context.trns_EmployeePeriodQunatity.Count(c => c.employee_id == trRule.employee_id && c.rule_id == trRule.rule_id && c.period_id == trRule.period_id && c.isdelete == true) > 0)
                                    {
                                        trns_EmployeePeriodQunatity temptr = context.trns_EmployeePeriodQunatity.FirstOrDefault(c => c.employee_id == trRule.employee_id && c.rule_id == trRule.rule_id && c.period_id == trRule.period_id && c.isdelete == true);
                                        temptr.quantity = trRule.quantity;
                                        temptr.modified_datetime = trRule.save_datetime;
                                        temptr.modified_user_id = trRule.save_user_id;
                                        temptr.isdelete = trRule.isdelete;

                                        if (context.mas_CompanyRule.FirstOrDefault(c => c.isdelete == false && c.isActive == true && c.rule_id == temptr.rule_id).benifit_id != Guid.Empty)
                                        {
                                            trns_EmployeeBenifitPeriod tempBprd = context.trns_EmployeeBenifitPeriod.FirstOrDefault(c => c.employee_id == trRule.employee_id && c.rule_id == trRule.rule_id && c.period_id == trRule.period_id && c.isdelete == true);
                                            if (tempBprd != null)
                                            {
                                                tempBprd.units = trRule.quantity;
                                                tempBprd.amount = dtlRule.special_amount * trRule.quantity;
                                                tempBprd.amount_per_unit = dtlRule.special_amount;
                                                tempBprd.isdelete = trRule.isdelete;
                                            }
                                        }

                                        else
                                        {
                                            trns_EmployeeDeductionPeriod tempBprd = context.trns_EmployeeDeductionPeriod.FirstOrDefault(c => c.employee_id == trRule.employee_id && c.rule_id == trRule.rule_id && c.period_id == trRule.period_id && c.isdelete == true);
                                            if (tempBprd != null)
                                            {
                                                tempBprd.units = trRule.quantity;
                                                tempBprd.amount = dtlRule.special_amount * trRule.quantity;
                                                tempBprd.amount_per_unit = dtlRule.special_amount;
                                                tempBprd.isdelete = trRule.isdelete;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        context.trns_EmployeePeriodQunatity.AddObject(trRule);

                                        if (context.mas_CompanyRule.FirstOrDefault(c => c.isdelete == false && c.isActive == true && c.rule_id == trRule.rule_id).benifit_id != Guid.Empty)
                                        {
                                            trns_EmployeeBenifitPeriod tempBprd = new trns_EmployeeBenifitPeriod();
                                            tempBprd.employee_id = trRule.employee_id;
                                            tempBprd.rule_id = trRule.rule_id;
                                            tempBprd.period_id = trRule.period_id;
                                            tempBprd.units = trRule.quantity;
                                            tempBprd.amount = dtlRule.special_amount * trRule.quantity;
                                            tempBprd.amount_per_unit = dtlRule.special_amount;
                                            tempBprd.isdelete = trRule.isdelete;
                                            tempBprd.save_datetime = trRule.save_datetime;
                                            tempBprd.save_user_id = trRule.save_user_id;
                                            context.trns_EmployeeBenifitPeriod.AddObject(tempBprd);
                                        }

                                        else
                                        {
                                            trns_EmployeeDeductionPeriod tempBprd = new trns_EmployeeDeductionPeriod();
                                            tempBprd.employee_id = trRule.employee_id;
                                            tempBprd.rule_id = trRule.rule_id;
                                            tempBprd.period_id = trRule.period_id;
                                            tempBprd.units = trRule.quantity;
                                            tempBprd.amount = dtlRule.special_amount * trRule.quantity;
                                            tempBprd.amount_per_unit = dtlRule.special_amount;
                                            tempBprd.isdelete = trRule.isdelete;
                                            tempBprd.save_datetime = trRule.save_datetime;
                                            tempBprd.save_user_id = trRule.save_user_id;
                                            context.trns_EmployeeDeductionPeriod.AddObject(tempBprd);
                                        }

                                    }
                                }
                            }
                        }
                        else
                        {
                            if (context.dtl_EmployeeRule.Count(c => c.employee_id == dtlRule.employee_id && c.rule_id == dtlRule.rule_id && c.isdelete == true) > 0)
                            {
                                dtl_EmployeeRule TempRule = context.dtl_EmployeeRule.FirstOrDefault(c => c.employee_id == dtlRule.employee_id && c.rule_id == dtlRule.rule_id && c.isdelete == true);
                                TempRule.isactive = dtlRule.isactive;
                                TempRule.isdelete = dtlRule.isdelete;
                                TempRule.modified_user_id = dtlRule.save_user_id;
                                TempRule.modified_datetime = dtlRule.save_datetime;

                                foreach (var trRule in PeriodQuantity.Where(c => c.employee_id == dtlRule.employee_id && c.rule_id == dtlRule.rule_id))
                                {
                                    if (context.trns_EmployeePeriodQunatity.Count(c => c.employee_id == trRule.employee_id && c.rule_id == trRule.rule_id && c.period_id == trRule.period_id && c.isdelete == true) > 0)
                                    {
                                        trns_EmployeePeriodQunatity temptr = context.trns_EmployeePeriodQunatity.FirstOrDefault(c => c.employee_id == trRule.employee_id && c.rule_id == trRule.rule_id && c.period_id == trRule.period_id && c.isdelete == true);
                                        temptr.quantity = trRule.quantity;
                                        temptr.modified_datetime = trRule.save_datetime;
                                        temptr.modified_user_id = trRule.save_user_id;
                                        temptr.isdelete = trRule.isdelete;

                                        if (context.mas_CompanyRule.FirstOrDefault(c => c.isdelete == false && c.isActive == true && c.rule_id == temptr.rule_id).benifit_id != Guid.Empty)
                                        {
                                            trns_EmployeeBenifitPeriod tempBprd = context.trns_EmployeeBenifitPeriod.FirstOrDefault(c => c.employee_id == trRule.employee_id && c.rule_id == trRule.rule_id && c.period_id == trRule.period_id && c.isdelete == true);
                                            if (tempBprd != null)
                                            {
                                                tempBprd.units = trRule.quantity;
                                                tempBprd.amount = dtlRule.special_amount * trRule.quantity;
                                                tempBprd.amount_per_unit = dtlRule.special_amount;
                                                tempBprd.isdelete = trRule.isdelete;
                                            }
                                        }

                                        else
                                        {
                                            trns_EmployeeDeductionPeriod tempBprd = context.trns_EmployeeDeductionPeriod.FirstOrDefault(c => c.employee_id == trRule.employee_id && c.rule_id == trRule.rule_id && c.period_id == trRule.period_id && c.isdelete == true);
                                            if (tempBprd != null)
                                            {
                                                tempBprd.units = trRule.quantity;
                                                tempBprd.amount = dtlRule.special_amount * trRule.quantity;
                                                tempBprd.amount_per_unit = dtlRule.special_amount;
                                                tempBprd.isdelete = trRule.isdelete;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        context.trns_EmployeePeriodQunatity.AddObject(trRule);

                                        if (context.mas_CompanyRule.FirstOrDefault(c => c.isdelete == false && c.isActive == true && c.rule_id == trRule.rule_id).benifit_id != Guid.Empty)
                                        {
                                            trns_EmployeeBenifitPeriod tempBprd = new trns_EmployeeBenifitPeriod();
                                            tempBprd.employee_id = trRule.employee_id;
                                            tempBprd.rule_id = trRule.rule_id;
                                            tempBprd.period_id = trRule.period_id;
                                            tempBprd.units = trRule.quantity;
                                            tempBprd.amount = dtlRule.special_amount * trRule.quantity;
                                            tempBprd.amount_per_unit = dtlRule.special_amount;
                                            tempBprd.isdelete = trRule.isdelete;
                                            tempBprd.save_datetime = trRule.save_datetime;
                                            tempBprd.save_user_id = trRule.save_user_id;
                                            context.trns_EmployeeBenifitPeriod.AddObject(tempBprd);
                                        }

                                        else
                                        {
                                            trns_EmployeeDeductionPeriod tempBprd = new trns_EmployeeDeductionPeriod();
                                            tempBprd.employee_id = trRule.employee_id;
                                            tempBprd.rule_id = trRule.rule_id;
                                            tempBprd.period_id = trRule.period_id;
                                            tempBprd.units = trRule.quantity;
                                            tempBprd.amount = dtlRule.special_amount * trRule.quantity;
                                            tempBprd.amount_per_unit = dtlRule.special_amount;
                                            tempBprd.isdelete = trRule.isdelete;
                                            tempBprd.save_datetime = trRule.save_datetime;
                                            tempBprd.save_user_id = trRule.save_user_id;
                                            context.trns_EmployeeDeductionPeriod.AddObject(tempBprd);
                                        }
                                    }
                                }
                            }
                            else
                            {
                                context.dtl_EmployeeRule.AddObject(dtlRule);
                                foreach (var trRule in PeriodQuantity.Where(c => c.employee_id == dtlRule.employee_id && c.rule_id == dtlRule.rule_id))
                                {
                                    context.trns_EmployeePeriodQunatity.AddObject(trRule);

                                    if (context.mas_CompanyRule.FirstOrDefault(c => c.isdelete == false && c.isActive == true && c.rule_id == trRule.rule_id).benifit_id != Guid.Empty)
                                    {
                                        trns_EmployeeBenifitPeriod tempBprd = new trns_EmployeeBenifitPeriod();
                                        tempBprd.employee_id = trRule.employee_id;
                                        tempBprd.rule_id = trRule.rule_id;
                                        tempBprd.period_id = trRule.period_id;
                                        tempBprd.units = trRule.quantity;
                                        tempBprd.amount = dtlRule.special_amount * trRule.quantity;
                                        tempBprd.amount_per_unit = dtlRule.special_amount;
                                        tempBprd.isdelete = trRule.isdelete;
                                        tempBprd.save_datetime = trRule.save_datetime;
                                        tempBprd.save_user_id = trRule.save_user_id;
                                        context.trns_EmployeeBenifitPeriod.AddObject(tempBprd);
                                    }

                                    else
                                    {
                                        trns_EmployeeDeductionPeriod tempBprd = new trns_EmployeeDeductionPeriod();
                                        tempBprd.employee_id = trRule.employee_id;
                                        tempBprd.rule_id = trRule.rule_id;
                                        tempBprd.period_id = trRule.period_id;
                                        tempBprd.units = trRule.quantity;
                                        tempBprd.amount = dtlRule.special_amount * trRule.quantity;
                                        tempBprd.amount_per_unit = dtlRule.special_amount;
                                        tempBprd.isdelete = trRule.isdelete;
                                        tempBprd.save_datetime = trRule.save_datetime;
                                        tempBprd.save_user_id = trRule.save_user_id;
                                        context.trns_EmployeeDeductionPeriod.AddObject(tempBprd);
                                    }
                                }
                            }
                        }
                    }

                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        [OperationContract]
        public bool DeleteEmployeeRuleDetails(List<trns_EmployeePeriodQunatity> DeleteList)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    foreach (var rule in DeleteList)
                    {
                        trns_EmployeePeriodQunatity temp = context.trns_EmployeePeriodQunatity.FirstOrDefault(c => c.employee_id == rule.employee_id && c.rule_id == rule.rule_id && c.period_id == rule.period_id);
                        temp.isdelete = true;
                        temp.delete_datetime = rule.delete_datetime;
                        temp.delete_user_id = rule.delete_user_id;

                        if (context.mas_CompanyRule.FirstOrDefault(c => c.isActive == true && c.isdelete == false && c.rule_id == temp.rule_id).benifit_id != Guid.Empty)
                        {
                            trns_EmployeeBenifitPeriod trnsrc = context.trns_EmployeeBenifitPeriod.FirstOrDefault(c => c.employee_id == temp.employee_id && c.rule_id == temp.rule_id && c.period_id == temp.period_id);
                            if (trnsrc != null)
                            {
                                trnsrc.isdelete = true;
                                trnsrc.delete_datetime = rule.delete_datetime;
                                trnsrc.delete_user_id = rule.delete_user_id;
                            }
                        }
                        else
                        {
                            trns_EmployeeDeductionPeriod trnsrc = context.trns_EmployeeDeductionPeriod.FirstOrDefault(c => c.employee_id == rule.employee_id && c.rule_id == rule.rule_id && c.period_id == rule.period_id);
                            if (trnsrc != null)
                            {
                                trnsrc.isdelete = true;
                                trnsrc.delete_datetime = rule.delete_datetime;
                                trnsrc.delete_user_id = rule.delete_user_id;
                            }
                        }
                    }

                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        [OperationContract]
        public IEnumerable<dtl_EmployeeRule> GetFilteredEmployeeRules()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.dtl_EmployeeRule.Where(c => c.isdelete == false && c.isactive == true).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<rpt_EPFEReturnView> GetEPFDataByPeriod(Guid period, Guid branch)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = branch == Guid.Empty ? context.rpt_EPFEReturnView.Where(c => c.period_id == period).ToList() : context.rpt_EPFEReturnView.Where(c => c.period_id == period && c.branch_id == branch).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        #endregion

        #endregion

        #region Dilshan

        #region New Permission Module

        [OperationContract]
        public IEnumerable<mas_Permission> GetPermissions()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.mas_Permission.ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<z_Permission_Group> GetPermissionGroups()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.z_Permission_Group.Where(c => c.Is_Active == true).ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<dtl_PermissionView> GetDetailPermissionView()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.dtl_PermissionView.ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<dtl_PermissionView> GetDetailPermissionViewByUserLevel(Guid userLevel)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.dtl_PermissionView.Where(c => c.user_level_id == userLevel).ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public bool SavePermissions(List<dtl_Permission> Savelist)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    foreach (var saveObj in Savelist)
                    {
                        if (context.dtl_Permission.Count(c => c.user_level_id == saveObj.user_level_id && c.Permission_Code == saveObj.Permission_Code) == 0)
                        {
                            context.dtl_Permission.AddObject(saveObj);
                        }
                        else
                        {
                            dtl_Permission temp = context.dtl_Permission.FirstOrDefault(c => c.user_level_id == saveObj.user_level_id && c.Permission_Code == saveObj.Permission_Code);
                            temp.Can_View = saveObj.Can_View;
                            temp.Can_Save = saveObj.Can_Save;
                            temp.Can_Update = saveObj.Can_Update;
                            temp.Can_Delete = saveObj.Can_Delete;
                        }
                    }

                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        [OperationContract]
        public bool DeletePermission(dtl_PermissionView DeleteObj)
        {
            using (var context = new ERPEntities())
            {
                if (context.dtl_Permission.Count(c => c.user_level_id == DeleteObj.user_level_id && c.Permission_Code == DeleteObj.Permission_Code) > 0)
                {
                    context.dtl_Permission.DeleteObject(context.dtl_Permission.FirstOrDefault(c => c.user_level_id == DeleteObj.user_level_id && c.Permission_Code == DeleteObj.Permission_Code));
                    return validateSaveUpdate(context.SaveChanges());
                }
                else
                    return false;
            }
        }

        #endregion

        #region Employee Additional Details

        #region Nationality

        [OperationContract]
        public IEnumerable<z_Nationality> GetNationality()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.z_Nationality.Where(c => c.isactive == true && c.isdelete == false).ToList();
                    result.ForEach(e => context.Detach(e));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveNationality(z_Nationality SaveUpdateObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (context.z_Nationality.Count(c => c.nationality_id == SaveUpdateObj.nationality_id) > 0)
                    {
                        z_Nationality UpdateObj = context.z_Nationality.FirstOrDefault(c => c.nationality_id == SaveUpdateObj.nationality_id);
                        UpdateObj.natinolity_name = SaveUpdateObj.natinolity_name;
                        UpdateObj.isactive = SaveUpdateObj.isactive;
                        UpdateObj.modified_datetime = SaveUpdateObj.modified_datetime;
                        UpdateObj.modified_user_id = SaveUpdateObj.modified_user_id;

                        return validateSaveUpdate(context.SaveChanges());
                    }
                    else
                    {
                        SaveUpdateObj.isactive = true;
                        SaveUpdateObj.isdelete = false;
                        context.z_Nationality.AddObject(SaveUpdateObj);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {

                return false;
            }
        }

        [OperationContract]
        public bool DeleteNationality(z_Nationality DeleteObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    z_Nationality DelObj = context.z_Nationality.FirstOrDefault(c => c.nationality_id == DeleteObj.nationality_id);
                    DelObj.isactive = false;
                    DelObj.isdelete = true;
                    DelObj.delete_user_id = DeleteObj.delete_user_id;
                    DelObj.delete_datetime = DeleteObj.delete_datetime;

                    return validateSaveUpdate(context.SaveChanges());
                }

            }
            catch (Exception)
            {

                return false;
            }
        }

        #endregion

        #region Race

        [OperationContract]
        public IEnumerable<z_race> GetRace()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.z_race.Where(c => c.isactive == true && c.isdelete == false).ToList();
                    result.ForEach(e => context.Detach(e));
                    return result;
                }
                catch (Exception)
                {

                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveRace(z_race SaveUpdateObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (context.z_race.Count(c => c.race_id == SaveUpdateObj.race_id) > 0)
                    {
                        z_race UpdateObj = context.z_race.FirstOrDefault(c => c.race_id == SaveUpdateObj.race_id);
                        UpdateObj.race_name = SaveUpdateObj.race_name;
                        UpdateObj.isactive = SaveUpdateObj.isactive;
                        UpdateObj.modified_datetime = SaveUpdateObj.modified_datetime;
                        UpdateObj.modified_user_id = SaveUpdateObj.modified_user_id;

                        return validateSaveUpdate(context.SaveChanges());
                    }
                    else
                    {
                        SaveUpdateObj.isactive = true;
                        SaveUpdateObj.isdelete = false;
                        context.z_race.AddObject(SaveUpdateObj);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {

                return false;
            }
        }

        [OperationContract]
        public bool DeleteRace(z_race DeleteObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    z_race DelObj = context.z_race.FirstOrDefault(c => c.race_id == DeleteObj.race_id);
                    DelObj.isactive = false;
                    DelObj.isdelete = true;
                    DelObj.delete_user_id = DeleteObj.delete_user_id;
                    DelObj.delete_datetime = DeleteObj.delete_datetime;

                    return validateSaveUpdate(context.SaveChanges());
                }

            }
            catch (Exception)
            {

                return false;
            }
        }

        #endregion

        #region Electorial Division

        [OperationContract]
        public IEnumerable<z_electorial_division> GetElectorialDivision()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.z_electorial_division.Where(c => c.isactive == true && c.isdelete == false).ToList();
                    result.ForEach(e => context.Detach(e));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveElectorialDivision(z_electorial_division SaveUpdateObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (context.z_electorial_division.Count(c => c.electorial_division_id == SaveUpdateObj.electorial_division_id) > 0)
                    {
                        z_electorial_division UpdateObj = context.z_electorial_division.FirstOrDefault(c => c.electorial_division_id == SaveUpdateObj.electorial_division_id);
                        UpdateObj.electorial_division_name = SaveUpdateObj.electorial_division_name;
                        UpdateObj.isactive = SaveUpdateObj.isactive;
                        UpdateObj.modified_datetime = SaveUpdateObj.modified_datetime;
                        UpdateObj.modified_user_id = SaveUpdateObj.modified_user_id;

                        return validateSaveUpdate(context.SaveChanges());
                    }
                    else
                    {
                        SaveUpdateObj.isactive = true;
                        SaveUpdateObj.isdelete = false;
                        context.z_electorial_division.AddObject(SaveUpdateObj);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {

                return false;
            }
        }

        [OperationContract]
        public bool DeleteElectorialDivision(z_electorial_division DeleteObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    z_electorial_division DelObj = context.z_electorial_division.FirstOrDefault(c => c.electorial_division_id == DeleteObj.electorial_division_id);
                    DelObj.isactive = false;
                    DelObj.isdelete = true;
                    DelObj.delete_user_id = DeleteObj.delete_user_id;
                    DelObj.delete_datetime = DeleteObj.delete_datetime;

                    return validateSaveUpdate(context.SaveChanges());
                }

            }
            catch (Exception)
            {

                return false;
            }
        }

        #endregion

        #region Election Center

        [OperationContract]
        public IEnumerable<z_election_center> GetElectionCenter()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.z_election_center.Where(c => c.isactive == true && c.isdelete == false).ToList();
                    result.ForEach(e => context.Detach(e));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveElectionCenter(z_election_center SaveUpdateObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (context.z_election_center.Count(c => c.election_center_id == SaveUpdateObj.election_center_id) > 0)
                    {
                        z_election_center UpdateObj = context.z_election_center.FirstOrDefault(c => c.election_center_id == SaveUpdateObj.election_center_id);
                        UpdateObj.election_center = SaveUpdateObj.election_center;
                        UpdateObj.isactive = SaveUpdateObj.isactive;
                        UpdateObj.modified_datetime = SaveUpdateObj.modified_datetime;
                        UpdateObj.modified_user_id = SaveUpdateObj.modified_user_id;

                        return validateSaveUpdate(context.SaveChanges());
                    }
                    else
                    {
                        SaveUpdateObj.isactive = true;
                        SaveUpdateObj.isdelete = false;
                        context.z_election_center.AddObject(SaveUpdateObj);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {

                return false;
            }
        }

        [OperationContract]
        public bool DeleteElectionCenter(z_election_center DeleteObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    z_election_center DelObj = context.z_election_center.FirstOrDefault(c => c.election_center_id == DeleteObj.election_center_id);
                    DelObj.isactive = false;
                    DelObj.isdelete = true;
                    DelObj.delete_user_id = DeleteObj.delete_user_id;
                    DelObj.delete_datetime = DeleteObj.delete_datetime;

                    return validateSaveUpdate(context.SaveChanges());
                }

            }
            catch (Exception)
            {

                return false;
            }
        }

        #endregion

        #region Gramaniladhari Division

        [OperationContract]
        public IEnumerable<z_grama_niladhari_divition> GetGramaNiladhariDivition()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.z_grama_niladhari_divition.Where(c => c.isactive == true && c.isdelete == false).ToList();
                    result.ForEach(e => context.Detach(e));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveGramaNiladhariDivition(z_grama_niladhari_divition SaveUpdateObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (context.z_grama_niladhari_divition.Count(c => c.grama_niladhari_divition_id == SaveUpdateObj.grama_niladhari_divition_id) > 0)
                    {
                        z_grama_niladhari_divition UpdateObj = context.z_grama_niladhari_divition.FirstOrDefault(c => c.grama_niladhari_divition_id == SaveUpdateObj.grama_niladhari_divition_id);
                        UpdateObj.grama_niladhari_divition_name = SaveUpdateObj.grama_niladhari_divition_name;
                        UpdateObj.isactive = SaveUpdateObj.isactive;
                        UpdateObj.modified_datetime = SaveUpdateObj.modified_datetime;
                        UpdateObj.modified_user_id = SaveUpdateObj.modified_user_id;

                        return validateSaveUpdate(context.SaveChanges());
                    }
                    else
                    {
                        SaveUpdateObj.isactive = true;
                        SaveUpdateObj.isdelete = false;
                        context.z_grama_niladhari_divition.AddObject(SaveUpdateObj);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {

                return false;
            }
        }

        [OperationContract]
        public bool DeleteGramaNiladhariDivition(z_grama_niladhari_divition DeleteObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    z_grama_niladhari_divition DelObj = context.z_grama_niladhari_divition.FirstOrDefault(c => c.grama_niladhari_divition_id == DeleteObj.grama_niladhari_divition_id);
                    DelObj.isactive = false;
                    DelObj.isdelete = true;
                    DelObj.delete_user_id = DeleteObj.delete_user_id;
                    DelObj.delete_datetime = DeleteObj.delete_datetime;

                    return validateSaveUpdate(context.SaveChanges());
                }

            }
            catch (Exception)
            {

                return false;
            }
        }

        #endregion

        #region Nearest Police Station

        [OperationContract]
        public IEnumerable<z_nearest_police_station> GetNearestPoliceStation()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.z_nearest_police_station.Where(c => c.isactive == true && c.isdelete == false).ToList();
                    result.ForEach(e => context.Detach(e));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveNearestPoliceStation(z_nearest_police_station SaveUpdateObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    if (context.z_nearest_police_station.Count(c => c.nearest_police_station_id == SaveUpdateObj.nearest_police_station_id) > 0)
                    {
                        z_nearest_police_station UpdateObj = context.z_nearest_police_station.FirstOrDefault(c => c.nearest_police_station_id == SaveUpdateObj.nearest_police_station_id);
                        UpdateObj.nearest_police_station = SaveUpdateObj.nearest_police_station;
                        UpdateObj.isactive = SaveUpdateObj.isactive;
                        UpdateObj.modified_datetime = SaveUpdateObj.modified_datetime;
                        UpdateObj.modified_user_id = SaveUpdateObj.modified_user_id;

                        return validateSaveUpdate(context.SaveChanges());
                    }
                    else
                    {
                        SaveUpdateObj.isactive = true;
                        SaveUpdateObj.isdelete = false;
                        context.z_nearest_police_station.AddObject(SaveUpdateObj);
                        return validateSaveUpdate(context.SaveChanges());
                    }
                }
            }
            catch (Exception)
            {

                return false;
            }
        }

        [OperationContract]
        public bool DeleteNearestPoliceStation(z_nearest_police_station DeleteObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    z_nearest_police_station DelObj = context.z_nearest_police_station.FirstOrDefault(c => c.nearest_police_station_id == DeleteObj.nearest_police_station_id);
                    DelObj.isactive = false;
                    DelObj.isdelete = true;
                    DelObj.delete_user_id = DeleteObj.delete_user_id;
                    DelObj.delete_datetime = DeleteObj.delete_datetime;

                    return validateSaveUpdate(context.SaveChanges());
                }

            }
            catch (Exception)
            {

                return false;
            }
        }

        #endregion

        #region Additional Details

        [OperationContract]
        public IEnumerable<dtl_employee_Additional_details> GetEmployeeAdditionalDetails()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.dtl_employee_Additional_details.Where(c => c.isdelete == false).ToList();
                    result.ForEach(e => context.Detach(e));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        #endregion

        #endregion

        #endregion

        #region ETF & EPF Ereturn

        [OperationContract]

        public int GetEPFEreturnData(string From, string To, string Type)
        {
            int result;
            try
            {
                using (var context = new ERPEntities())
                {
                    context.EPFETFSixMonth(From, To, Type);
                    result = 1;
                    return result;
                }
            }
            catch (Exception)
            {
                result = 0;
                return result;

            }
        }

        [OperationContract]

        public int GetETFEreturnData(string From, string To, string Type)
        {
            int result;
            try
            {
                using (var context = new ERPEntities())
                {
                    context.EPFETFSixMonth(From, To, Type);
                    result = 1;
                    return result;
                }

            }
            catch (Exception)
            {

                result = 0;
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<GET_ETF_MONTHS_DETAIL_Result> GET_ETF_DataRows()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.GET_ETF_MONTHS_DETAIL().ToList();
                    return result;
                }

            }
            catch (Exception)
            {

                return null;
            }
        }
        #endregion

        #region Traning
        [OperationContract]
        public IEnumerable<z_TrainingCategory> GetAllTraningCatagory()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_TrainingCategory.Where(z => z.is_delete == false).ToList();
                result.ForEach(c => context.Detach(c));
                return result;
            }
        }
        [OperationContract]
        public bool UpdateTraningCatagory(z_TrainingCategory traningcatagory)
        {
            bool IsSuccess = false;
            using (var context = new ERPEntities())
            {
                context.z_TrainingCategory.Attach(context.z_TrainingCategory.Single(z => z.catagory_id == traningcatagory.catagory_id));
                context.z_TrainingCategory.ApplyCurrentValues(traningcatagory);
                int i = context.SaveChanges();
                return IsSuccess = validateSaveUpdate(i);
            }
        }
        [OperationContract]
        public bool SaveTraningCatagory(z_TrainingCategory traningcatagory)
        {
            bool IsSuccess = false;

            using (var context = new ERPEntities())
            {
                context.z_TrainingCategory.AddObject(traningcatagory);
                int i = context.SaveChanges();
                IsSuccess = validateSaveUpdate(i);
                return IsSuccess;
            }
        }
        [OperationContract]
        public IEnumerable<z_Trainer> GetAllTrainer()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_Trainer.Where(z => z.is_delete == false).ToList();
                result.ForEach(c => context.Detach(c));
                return result;
            }
        }
        [OperationContract]
        public bool SaveTrainer(z_Trainer trainer)
        {
            bool IsSuccess = false;

            using (var context = new ERPEntities())
            {
                context.z_Trainer.AddObject(trainer);
                int i = context.SaveChanges();
                IsSuccess = validateSaveUpdate(i);
                return IsSuccess;
            }
        }
        [OperationContract]
        public bool UpdateTrainer(z_Trainer trainer)
        {
            bool IsSuccess = false;

            using (var context = new ERPEntities())
            {
                context.z_Trainer.Attach(context.z_Trainer.Single(z => z.trainer_id == trainer.trainer_id));
                context.z_Trainer.ApplyCurrentValues(trainer);
                int i = context.SaveChanges();
                return IsSuccess = validateSaveUpdate(i);
            }
        }


        [OperationContract]
        public bool SaveMasTrainingPrograms(mas_TrainingProgram trainingprogram)
        {
            bool IsSuccess = false;

            using (var context = new ERPEntities())
            {
                context.mas_TrainingProgram.AddObject(trainingprogram);
                int i = context.SaveChanges();
                IsSuccess = validateSaveUpdate(i);
                return IsSuccess;
            }
        }

        [OperationContract]
        public bool UpdateMasTrainingPrograms(mas_TrainingProgram trainingprogram)
        {
            bool IsSuccess = false;

            using (var context = new ERPEntities())
            {
                context.mas_TrainingProgram.Attach(context.mas_TrainingProgram.Single(z => z.program_id == trainingprogram.program_id));
                context.mas_TrainingProgram.ApplyCurrentValues(trainingprogram);
                int i = context.SaveChanges();
                return IsSuccess = validateSaveUpdate(i);
            }
        }

        [OperationContract]
        public IEnumerable<mas_TrainingProgram> GetMasTraining()
        {
            using (var context = new ERPEntities())
            {
                var result = context.mas_TrainingProgram.Where(z => z.is_delete == false).ToList();
                result.ForEach(c => context.Detach(c));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<view_TrainingPrograms> GetMasTrainingProgramsFromView()
        {
            using (var context = new ERPEntities())
            {
                var result = context.view_TrainingPrograms.Where(z => z.is_delete == false).ToList();
                result.ForEach(c => context.Detach(c));
                return result;
            }
        }
        #endregion

        #region Manual Attendance

        [OperationContract]
        IEnumerable<mas_Employee> GetEmployeeBasicDetails()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.mas_Employee.Where(c => c.dtl_Employee.isActive == true && c.dtl_Employee.isdelete == false).Select(c => new { EMP_ID = c.emp_id, EMPLOYEE_ID = c.employee_id, FNAME = c.first_name, SNAME = c.second_name, INITS = c.initials }).ToList().Select(
                        c => new mas_Employee { emp_id = c.EMP_ID, employee_id = c.EMPLOYEE_ID, first_name = c.FNAME, second_name = c.SNAME, initials = c.INITS }
                        );
                    return result;
                }
            }
            catch (Exception)
            {
            }
            return new List<mas_Employee>();
        }

        [OperationContract]
        IEnumerable<dtl_AttendanceData> GetEmployeeDailyAttendance(string empID, DateTime selectedDate)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.dtl_AttendanceData.Where(c => c.emp_id == empID && c.attend_date == selectedDate.Date).ToList();
                    return result;
                }
            }
            catch (Exception)
            {
            }
            return new List<dtl_AttendanceData>();
        }

        [OperationContract]
        bool DeleteEmployeeCurrentAttendance(dtl_AttendanceData deletedAttendance)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var current = context.dtl_AttendanceData.FirstOrDefault(c => c.attendance_data_id == deletedAttendance.attendance_data_id);
                    if (current != null)
                    {
                        current.isdelete = deletedAttendance.isdelete;
                        if (validateSaveUpdate(context.SaveChanges()))
                            return true;
                    }
                }
            }
            catch (Exception)
            {
            }
            return false;
        }

        #endregion

        #region Employee History

        [OperationContract]
        public IEnumerable<his_Category> GetEmployeeHistoryCategory()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.his_Category.Where(c => c.Is_Active == true).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<his_Sub_Category> GetEmployeeHistorySubCategory()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.his_Sub_Category.Where(c => c.Is_Active == true).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        #endregion

        [OperationContract]
        public IEnumerable<TotalPaymentSumarry_Result> GetEmployeePayrollSummary(string periodID, string companyBranchID, string departmentID, string designationID, string sectionID, string gradeID, string employeeID, string paymetMethordId)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.TotalPaymentSumarry(periodID, companyBranchID, departmentID, designationID, sectionID, gradeID, employeeID, paymetMethordId).ToList();
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<EmployeeBenifitDetail_Result> GetEmployeeBenifitDetail(string periodID, string companyBranchID, string departmentID, string designationID, string sectionID, string gradeID, string employeeID, string paymetMethordId, string ruleId)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.EmployeeBenifitDetail(periodID, companyBranchID, departmentID, designationID, sectionID, gradeID, employeeID, paymetMethordId, ruleId).ToList();
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<EmployeeDeductionDetail_Result> GetEmployeeDeductionDetail(string periodID, string companyBranchID, string departmentID, string designationID, string sectionID, string gradeID, string employeeID, string paymetMethordId, string ruleId)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.EmployeeDeductionDetail(periodID, companyBranchID, departmentID, designationID, sectionID, gradeID, employeeID, paymetMethordId, ruleId).ToList();
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }
        [OperationContract]
        public IEnumerable<EmployeeFundDetail_Result> GetEmployeeFundDetail(string periodID, string companyBranchID, string departmentID, string designationID, string sectionID, string gradeID, string employeeID, string paymetMethordId, string ruleId)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.EmployeeFundDetail(periodID, companyBranchID, departmentID, designationID, sectionID, gradeID, employeeID, paymetMethordId, ruleId).ToList();
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }
        [OperationContract]
        public IEnumerable<GetEmployeeMonthlyPayrollSumarryReconsiliation_Result> GetEmployeePayrollForReconsilation(string periodID, string companyBranchID, string departmentID, string designationID, string sectionID, string gradeID, string employeeID, string paymetMethordId, bool isExecutive)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.GetEmployeeMonthlyPayrollSumarryReconsiliation(periodID, companyBranchID, departmentID, designationID, sectionID, gradeID, employeeID, paymetMethordId, isExecutive).ToList();
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        #region EmployeeBonusModule

        #region AsignBonusForEmployeesMethods

        [OperationContract]
        public IEnumerable<mas_EmployeeBonus> GetAssignedEmployeesForBonus()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.mas_EmployeeBonus.Where(c => c.isactive == true && c.isdelete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {

                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<AsignedEmployeesForBonusByBonusPeriodView> GetAsignedEmployeesForBounsDetails()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.AsignedEmployeesForBonusByBonusPeriodViews.Where(c => c.isactive == true && c.isdelete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {

                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveEmployeeWiseBonusToSelectedPeriod(List<AsignedEmployeesForBonusByBonusPeriodView> SaveObj)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    foreach (var item in SaveObj)
                    {
                        mas_EmployeeBonus temp = new mas_EmployeeBonus();
                        temp.AsignedDate = item.AsignedDate;
                        temp.Bonus_Period_id = item.Bonus_Period_id;
                        temp.BonusAmount = item.BonusAmount;
                        temp.BonusPercentage = item.BonusPercentage;
                        temp.Employee_Basic_Salary = item.Employee_Basic_Salary;
                        temp.employee_id = item.employee_id;
                        temp.FromBasicSalaryPercentage = item.FromBasicSalaryPercentage;
                        temp.FromStaticAmount = item.FromStaticAmount;
                        temp.Is_Processed = item.Is_Processed;
                        temp.isactive = item.isactive;
                        temp.isdelete = item.isdelete;
                        temp.save_datetime = item.save_datetime;
                        temp.save_user_id = item.save_user_id;
                        context.mas_EmployeeBonus.AddObject(temp);
                    }
                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {

                    return false;
                }
            }
        }

        [OperationContract]
        public bool DeleteEmployeeWiseBonusToSelectedPeriod(AsignedEmployeesForBonusByBonusPeriodView DeleteObj)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.mas_EmployeeBonus.FirstOrDefault(c => c.Employee_Bonus_id == DeleteObj.Employee_Bonus_id);
                    mas_EmployeeBonus temp = new mas_EmployeeBonus();
                    result.isactive = DeleteObj.isactive;
                    result.isdelete = DeleteObj.isdelete;
                    result.delete_datetime = DeleteObj.delete_datetime;
                    result.delete_user_id = DeleteObj.delete_user_id;
                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        [OperationContract]
        public IEnumerable<GetEmployeePaymentPeriodDateAndEmployeeWiseView> GetEmployeePaymentPeriodDateAndEmployeeWise(Guid Empid, DateTime SDate, DateTime EDate)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.GetEmployeePaymentPeriodDateAndEmployeeWiseViews.Where(c => c.employee_id == Empid && c.start_date >= SDate && c.start_date <= EDate).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public bool UpdateEmployeeBonus(AsignedEmployeesForBonusByBonusPeriodView UpdateObj)
        {
            using (var context = new ERPEntities())
            {
                var result = context.mas_EmployeeBonus.FirstOrDefault(c => c.Employee_Bonus_id == UpdateObj.Employee_Bonus_id);
                result.BonusAmount = UpdateObj.BonusAmount;
                result.BonusPercentage = UpdateObj.BonusPercentage;
                result.modified_datetime = DateTime.Now;
                result.modified_user_id = UpdateObj.modified_user_id;
                return validateSaveUpdate(context.SaveChanges());
            }
        }

        #endregion

        #region BonusPeriodMethods

        [OperationContract]
        public IEnumerable<z_BonusPeriod> GetBonusPeriod()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.z_BonusPeriod.Where(c => c.isactive == true && c.isdelete == false).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {

                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveBounsPeriod(z_BonusPeriod SaveObj1, z_EmployeeOtherPayments SaveObj2)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    z_BonusPeriod SaveObj = new z_BonusPeriod();
                    SaveObj.other_payment_id = SaveObj2.other_payment_id;
                    SaveObj.Bonus_Period_Name = SaveObj1.Bonus_Period_Name;
                    SaveObj.Bonus_Period_Start_Date = SaveObj1.Bonus_Period_Start_Date;
                    SaveObj.Bonus_Period_End_Date = SaveObj1.Bonus_Period_End_Date;
                    SaveObj.Bonus_Period_Description = SaveObj1.Bonus_Period_Description;
                    SaveObj.save_user_id = SaveObj1.save_user_id;
                    SaveObj.save_datetime = SaveObj1.save_datetime;
                    SaveObj.isdelete = SaveObj1.isdelete;
                    SaveObj.isactive = SaveObj1.isactive;
                    context.z_BonusPeriod.AddObject(SaveObj);
                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {

                    return false;
                }
            }
        }

        [OperationContract]
        public bool UpdateBonusPeriod(z_BonusPeriod UpdateObj, z_EmployeeOtherPayments UpdateObj1)
        {
            using (var Context = new ERPEntities())
            {
                try
                {
                    z_BonusPeriod result = Context.z_BonusPeriod.FirstOrDefault(c => c.Bonus_Period_id == UpdateObj.Bonus_Period_id);
                    result.Bonus_Period_Start_Date = UpdateObj.Bonus_Period_Start_Date;
                    result.Bonus_Period_End_Date = UpdateObj.Bonus_Period_End_Date;
                    result.Bonus_Period_Description = UpdateObj.Bonus_Period_Description;
                    result.other_payment_id = UpdateObj1.other_payment_id;
                    result.modified_user_id = UpdateObj.modified_user_id;
                    result.modified_datetime = UpdateObj.modified_datetime;
                    return validateSaveUpdate(Context.SaveChanges());
                }
                catch (Exception)
                {

                    return false;
                }
            }
        }

        [OperationContract]
        public bool DeleteBonusPeriod(z_BonusPeriod DeleteObj)
        {
            using (var Context = new ERPEntities())
            {
                try
                {
                    z_BonusPeriod result = Context.z_BonusPeriod.FirstOrDefault(c => c.Bonus_Period_id == DeleteObj.Bonus_Period_id);
                    result.isactive = DeleteObj.isactive;
                    result.isdelete = DeleteObj.isdelete;
                    result.delete_datetime = DeleteObj.delete_datetime;
                    result.delete_user_id = DeleteObj.delete_user_id;
                    return validateSaveUpdate(Context.SaveChanges());
                }
                catch (Exception)
                {

                    return false;
                }
            }
        }

        #endregion

        #region Employee Bonus Process Methods

        [OperationContract]
        public bool SaveEmployeeBonusProcess(List<EmployeeBonusProcessView> SaveObj, bool IsPayeeDeduction)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    if (IsPayeeDeduction)
                    {
                        foreach (var item in SaveObj)
                        {
                            trns_EmployeeBonus temp = new trns_EmployeeBonus();
                            decimal mValue = (decimal)(item.PayedBonusAmount / item.GrossSalary);
                            decimal roundedMValue = Math.Round(mValue, 1);
                            //decimal finalMprice = Math.Floor((roundedMValue)*10)/10;
                            decimal finalMprice = roundedMValue;
                            //if (finalMprice == 0)
                            //{
                            //    finalMprice = (decimal)0.50;
                            //}
                            var MPercentage = (context.z_BonusPayeeCalculation.FirstOrDefault(c => c.Mvalue == finalMprice && item.PayedBonusAmount >= c.GrossMothlyInCome_StartAmount && item.PayedBonusAmount <= c.GrossMothlyInCome_EndAmount));
                            temp.employee_id = item.employee_id;
                            if (MPercentage != null)
                            {
                                temp.PayeeAmount = (item.PayedBonusAmount * MPercentage.Rate_per_centum_ApplicabletoLumpSumPayments_Percentage) / 100;
                            }
                            else
                                temp.PayeeAmount = 0;
                            temp.Bonus_Period_id = item.Bonus_Period_id;
                            temp.Employee_Bonus_id = item.Employee_Bonus_id;
                            temp.GrossSalary = item.GrossSalary;
                            if (item.PayedBonusAmount >= 25000)
                            {
                                temp.PayedBonusAmount = item.PayedBonusAmount - temp.PayeeAmount - 25;
                                temp.stamp_duty = 25;
                            }
                            else
                            {
                                temp.PayedBonusAmount = item.PayedBonusAmount - temp.PayeeAmount;
                                temp.stamp_duty = 0;
                            }
                            if (MPercentage != null)
                            {
                                temp.Mtable_id = MPercentage.Mtable_id;
                            }
                            else
                                temp.Mtable_id = 0;
                            temp.is_PayeeDeduction = IsPayeeDeduction;
                            temp.PayrollMonths = item.PayrollMonths;
                            temp.save_datetime = item.save_datetime;
                            temp.save_user_id = item.save_user_id;
                            context.trns_EmployeeBonus.AddObject(temp);

                            var UpdateMas_EmployeeBonus = context.mas_EmployeeBonus.FirstOrDefault(c => c.employee_id == item.employee_id && c.Employee_Bonus_id == item.Employee_Bonus_id);
                            UpdateMas_EmployeeBonus.Is_Processed = true;
                            // UpdateMas_EmployeeBonus.isactive = false;
                        }
                    }
                    else
                    {
                        foreach (var item in SaveObj)
                        {
                            trns_EmployeeBonus temp = new trns_EmployeeBonus();
                            temp.employee_id = item.employee_id;
                            //temp.PayeeAmount = item.PayedBonusAmount;
                            temp.Bonus_Period_id = item.Bonus_Period_id;
                            temp.Employee_Bonus_id = item.Employee_Bonus_id;
                            temp.GrossSalary = item.GrossSalary;
                            //temp.PayedBonusAmount = item.PayedBonusAmount - temp.PayeeAmount;
                            // temp.Mtable_id = item.Mtable_id;
                            temp.is_PayeeDeduction = IsPayeeDeduction;
                            temp.PayedBonusAmount = item.PayedBonusAmount;
                            temp.PayrollMonths = item.PayrollMonths;
                            temp.save_datetime = item.save_datetime;
                            temp.save_user_id = item.save_user_id;
                            context.trns_EmployeeBonus.AddObject(temp);

                            var UpdateMas_EmployeeBonus = context.mas_EmployeeBonus.FirstOrDefault(c => c.employee_id == item.employee_id && c.Employee_Bonus_id == item.Employee_Bonus_id);
                            UpdateMas_EmployeeBonus.Is_Processed = true;
                            //UpdateMas_EmployeeBonus.isactive = false;
                        }
                    }
                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        #region Bonus Slip Transfer
        [OperationContract]
        public IEnumerable<BonusSlipTransferView> GetBonusAssignedEmployees(int bonusperiodid)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.BonusSlipTransferViews.Where(c => c.isdelete == false && c.Bonus_Period_id == bonusperiodid).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }
        #endregion

        #endregion

        #region Other Payments Category
        [OperationContract]
        public IEnumerable<z_EmployeeOtherPayments> GetEmployeeOtherPaymentsCategories()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.z_EmployeeOtherPayments.ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {

                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveEmployeeOtherPaymentsCategories(z_EmployeeOtherPayments SaveObj)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    context.z_EmployeeOtherPayments.AddObject(SaveObj);
                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {

                    return false;
                }
            }
        }

        [OperationContract]
        public bool UpdateEmployeeOtherPaymentsCategories(z_EmployeeOtherPayments UpdateObj)
        {
            using (var Context = new ERPEntities())
            {
                try
                {
                    z_EmployeeOtherPayments result = Context.z_EmployeeOtherPayments.FirstOrDefault(c => c.other_payment_id == UpdateObj.other_payment_id);
                    result.other_payment_name = UpdateObj.other_payment_name;
                    return validateSaveUpdate(Context.SaveChanges());
                }
                catch (Exception)
                {

                    return false;
                }
            }
        }
        #endregion

        #endregion

        #region External Bank Laon Slip Transfer
        [OperationContract]
        public IEnumerable<ExternalBankLoanSlipView> GetExternalBankLoanProcessedEmployees(Guid periodid)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.ExternalBankLoanSlipViews.Where(c => c.period_id == periodid).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }
        #endregion

        #region EPF Contribution New
        [OperationContract]
        public IEnumerable<EPFDetails_Result> GetEPFDetails(string periodID, string companyBranchID, string departmentID, string designationID, string sectionID, string gradeID)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.EPFDetails(periodID, companyBranchID, departmentID, designationID, sectionID, gradeID).ToList();
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }
        #endregion

        #region Employee Deduction Payment
        [OperationContract]
        public IEnumerable<EmployeeDeductionPaymentView> GetEmployeeDeductionPayments()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.EmployeeDeductionPaymentViews.Where(c => c.is_active == true && c.is_delete == false).ToList();
                    result.ForEach(e => context.Detach(e));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<trns_EmployeeDeductionPayment> GetTransferredEmployeeDeductionPayments()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.trns_EmployeeDeductionPayment.ToList();
                    result.ForEach(e => context.Detach(e));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveEmployeeDeductionPayments(trns_EmployeeDeductionPayment tedp)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    context.trns_EmployeeDeductionPayment.AddObject(tedp);
                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        [OperationContract]
        public bool SaveDeductionPayments(mas_EmployeeDeductionPayment edp)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    context.mas_EmployeeDeductionPayment.AddObject(edp);
                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        [OperationContract]
        public bool UpdateDeductionPayments(mas_EmployeeDeductionPayment edp)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    mas_EmployeeDeductionPayment updateedp = context.mas_EmployeeDeductionPayment.FirstOrDefault(c => c.deduction_payment_id == edp.deduction_payment_id);
                    if (updateedp != null)
                    {
                        updateedp.deduction_rule_id = edp.deduction_rule_id;
                        updateedp.companyBranch_id = edp.companyBranch_id;
                        updateedp.acc_no = edp.acc_no;
                        updateedp.acc_name = edp.acc_name;
                        updateedp.bank_id = edp.bank_id;
                        updateedp.branch_id = edp.branch_id;
                        updateedp.modified_user_id = edp.modified_user_id;
                        updateedp.modified_datetime = edp.modified_datetime;
                        return validateSaveUpdate(context.SaveChanges());
                    }
                    else
                        return false;
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        [OperationContract]
        public bool DeleteDeductionPayments(mas_EmployeeDeductionPayment edp)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    mas_EmployeeDeductionPayment deleteedp = context.mas_EmployeeDeductionPayment.FirstOrDefault(c => c.deduction_payment_id == edp.deduction_payment_id);
                    if (deleteedp != null)
                    {
                        deleteedp.is_delete = edp.is_delete;
                        deleteedp.delete_user_id = edp.delete_user_id;
                        deleteedp.delete_datetime = edp.delete_datetime;
                        return validateSaveUpdate(context.SaveChanges());
                    }
                    else
                        return false;
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }
        #endregion

        #region Employee Deduction Payment Slip Transfer
        [OperationContract]
        public IEnumerable<SlipTransferEmployeeDeductionView> GetSlipTransferDeduction(mas_CompanyRule ruleId, z_Period periodId)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.SlipTransferEmployeeDeductionViews.Where(c => c.deduction_rule_id == ruleId.rule_id && c.period_id == periodId.period_id).ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }
        #endregion

        #region EPF/ETF Generate Excel
        [OperationContract]
        public IEnumerable<Rpt_sp_EmployeeFundView> GetEmployeeFundDetails(Guid periodId)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.Rpt_sp_EmployeeFundView.Where(c => c.period_id == periodId && c.value > 0).ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }
        #endregion

        #region Generate Excel For Rules
        [OperationContract]
        public IEnumerable<LeiuLeavePaymentViewForExcel> GetEmployeeLeiuLeaveDetails(Guid periodId)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.LeiuLeavePaymentViewForExcels.Where(c => c.period_id == periodId).ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }
        #endregion

        #region Upload Excel For Rules
        [OperationContract]
        public IEnumerable<dtl_EmployeeOtherRulesData> GetEmployeeOtherRulesData(Guid PeriodID, Guid RuleID)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.dtl_EmployeeOtherRulesData.Where(c => c.periodID == PeriodID && c.ruleID == RuleID).ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public IEnumerable<dtl_EmployeeOtherRulesData> GetEmployeeOtherRulesDataForProcess(Guid PeriodID)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.dtl_EmployeeOtherRulesData.Where(c => c.periodID == PeriodID).ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        private bool saveUploadedData(IEnumerable<dtl_EmployeeOtherRulesData> quntity)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    foreach (dtl_EmployeeOtherRulesData item in quntity)
                    {
                        context.dtl_EmployeeOtherRulesData.AddObject(item);
                        context.SaveChanges();
                    }
                }
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool DeleteUploadedData(Guid PeriodID, Guid RuleID)
        {
            if (PeriodID != null && PeriodID != Guid.Empty && RuleID != null && RuleID != Guid.Empty)
            {
                try
                {
                    using (var context = new ERPEntities())
                    {
                        var result = context.ClearExcelRuleData(PeriodID.ToString(), RuleID.ToString());
                        return true;
                    }
                }
                catch (Exception)
                {

                    return false;
                }
            }
            else
            {
                return false;
            }
        }

        [OperationContract]
        public IEnumerable<trns_EmployeeOtherRulesData> GetProcessedEmployeeOtherRulesData(Guid PeriodID)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.trns_EmployeeOtherRulesData.Where(c => c.periodID == PeriodID).ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public bool DeleteProcessedData(Guid PeriodID)
        {
            if (PeriodID != null && PeriodID != Guid.Empty)
            {
                try
                {
                    using (var context = new ERPEntities())
                    {
                        var result = context.ClearProcessedExcelRuleData(PeriodID.ToString());
                        return true;
                    }
                }
                catch (Exception)
                {

                    return false;
                }
            }
            else
            {
                return false;
            }
        }

        [OperationContract]
        private bool saveProcessedData(List<trns_EmployeeOtherRulesData> processedData)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    foreach (trns_EmployeeOtherRulesData currentprocesseddata in processedData)
                    {
                        context.trns_EmployeeOtherRulesData.AddObject(currentprocesseddata);
                    }
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public IEnumerable<ExcelUploadedSlipTransferView> GetExcelSlipTransferData(Guid Payperiod)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.ExcelUploadedSlipTransferViews.Where(c => c.period_id == Payperiod && c.is_payee_deducted == true).ToList();
                    result.ForEach(r => context.Detach(r));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }
        #endregion

        #region Employee Third Party Payments
        [OperationContract]
        public IEnumerable<z_EmployeeThirdPartyPayments> GetThirdPartyCategories()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.z_EmployeeThirdPartyPayments.ToList();
                    result.ForEach(r => context.Detach(r));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public IEnumerable<dtl_trns_EmployeeThirdPartyPayments> GetEmployeeThirdPartyPayments(int Category)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.dtl_trns_EmployeeThirdPartyPayments.Where(c => c.category_id == Category).ToList();
                    result.ForEach(r => context.Detach(r));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public IEnumerable<EmployeeThirdPartyPaymentsView> GetEmployeeThirdPartyPaymentsFromView(int Category)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.EmployeeThirdPartyPaymentsViews.Where(c => c.is_processed == false && c.category_id == Category).ToList();
                    result.ForEach(r => context.Detach(r));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public bool DeleteThirdPartyPaymentsData(int CategoryID, DateTime Date)
        {
            if (CategoryID != 0 && Date != null)
            {
                try
                {
                    using (var context = new ERPEntities())
                    {
                        var result = context.ClearThirdPartyPaymentsData(CategoryID, Date);
                        return true;
                    }
                }
                catch (Exception)
                {

                    return false;
                }
            }
            else
            {
                return false;
            }
        }

        [OperationContract]
        private bool saveThirdPartyPaymentsData(IEnumerable<dtl_trns_EmployeeThirdPartyPayments> quntity)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    foreach (dtl_trns_EmployeeThirdPartyPayments item in quntity)
                    {
                        context.dtl_trns_EmployeeThirdPartyPayments.AddObject(item);
                        context.SaveChanges();
                    }
                }
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        private bool processThirdPartyPaymentsData(IEnumerable<dtl_trns_EmployeeThirdPartyPayments> quntity)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    foreach (dtl_trns_EmployeeThirdPartyPayments item in quntity)
                    {
                        dtl_trns_EmployeeThirdPartyPayments addData = context.dtl_trns_EmployeeThirdPartyPayments.FirstOrDefault(c => c.dtl_trns_id == item.dtl_trns_id);
                        addData.is_processed = item.is_processed;
                        addData.processed_datetime = item.processed_datetime;
                        addData.processed_userid = item.processed_userid;
                        context.SaveChanges();
                    }
                }
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }

        #region Third Party Payment Slip Transfer
        [OperationContract]
        private IEnumerable<EmployeeThirdPartyPaymentsSlipTransferSP_Result> GetThirdPartyPaymentsDataForSlipTransfer(string Category, DateTime FromDate, DateTime ToDate)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.EmployeeThirdPartyPaymentsSlipTransferSP(Category, FromDate, ToDate).ToList();
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }
        #endregion
        #endregion

        #region Manual Payroll

        [OperationContract]
        public IEnumerable<view_FixedRules> GetAllFixedRules()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.view_FixedRules.ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }

            }
        }

        [OperationContract]
        public IEnumerable<view_EmployeesAssignedRules> GetAllFixedRulesAssigedToEmployees(Guid RuleID)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.view_EmployeesAssignedRules.Where(c => c.rule_id == RuleID).ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveUpdateFixedRules(List<view_EmployeesAssignedRules> SaveObj, List<view_EmployeesAssignedRules> UpdateObj, Guid UserID)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    foreach (var item in UpdateObj)
                    {
                        var updateFixedRulesAmountIn_dtl_EmployeeRule = context.dtl_EmployeeRule.FirstOrDefault(c => c.employee_id == item.employee_id && c.rule_id == item.rule_id);
                        updateFixedRulesAmountIn_dtl_EmployeeRule.special_amount = item.special_amount;
                        var updateFixedRulesQuantityIn_dtl_EmployeeWiseFixedRuleQuantity = context.dtl_EmployeeWiseFixedRuleQuantity.FirstOrDefault(c => c.employee_id == item.employee_id && c.rule_id == item.rule_id);
                        if (updateFixedRulesQuantityIn_dtl_EmployeeWiseFixedRuleQuantity == null)
                        {
                            dtl_EmployeeWiseFixedRuleQuantity TempSaveQty = new dtl_EmployeeWiseFixedRuleQuantity();
                            TempSaveQty.employee_id = (Guid)item.employee_id;
                            TempSaveQty.rule_id = item.rule_id;
                            TempSaveQty.Quantity = (decimal)item.default_qty;
                            context.dtl_EmployeeWiseFixedRuleQuantity.AddObject(TempSaveQty);
                        }
                        else
                        {
                            updateFixedRulesQuantityIn_dtl_EmployeeWiseFixedRuleQuantity.Quantity = (decimal)item.default_qty;
                        }
                    }

                    foreach (var item in SaveObj)
                    {
                        dtl_EmployeeRule SaveFixedRules = new dtl_EmployeeRule();
                        SaveFixedRules.employee_id = (Guid)item.employee_id;
                        SaveFixedRules.rule_id = item.rule_id;
                        SaveFixedRules.special_amount = item.special_amount;
                        SaveFixedRules.is_special = true;
                        SaveFixedRules.isactive = true;
                        SaveFixedRules.isdelete = false;
                        SaveFixedRules.save_datetime = DateTime.Now;
                        SaveFixedRules.save_user_id = UserID;
                        context.dtl_EmployeeRule.AddObject(SaveFixedRules);

                        dtl_EmployeeWiseFixedRuleQuantity TempSaveQty = new dtl_EmployeeWiseFixedRuleQuantity();
                        TempSaveQty.employee_id = (Guid)item.employee_id;
                        TempSaveQty.rule_id = item.rule_id;
                        TempSaveQty.Quantity = (decimal)item.default_qty;
                        context.dtl_EmployeeWiseFixedRuleQuantity.AddObject(TempSaveQty);
                    }
                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {

                    return false;
                }
            }
        }

        [OperationContract]
        public bool DeleteEmployeesFiedRule(List<view_EmployeesAssignedRules> DeleteObj)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    foreach (var item in DeleteObj)
                    {
                        var result = context.dtl_EmployeeRule.FirstOrDefault(c => c.employee_id == item.employee_id && c.rule_id == item.rule_id);
                        result.isactive = false;
                        result.isdelete = true;
                    }
                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        [OperationContract]
        public IEnumerable<mas_CompanyRule> GetAllNonFixedRules()
        {
            try
            {
                List<mas_CompanyRule> AllActiveRules = GetCompanyRules().Where(c => c.isActive == true && c.isdelete == false).ToList();
                List<view_FixedRules> AllFixedRules = GetAllFixedRules().ToList();
                List<mas_CompanyRule> AllNonFixedRules = AllActiveRules.Where(c => !AllFixedRules.Any(d => c.rule_id == d.rule_id)).ToList();
                return AllNonFixedRules;
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public IEnumerable<view_EmployeeWiseAssignedRulesForNonFixed> GetCompanyRulesEmployeeWiseForNonFixed()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.view_EmployeeWiseAssignedRulesForNonFixed.Where(c => c.isactive == true && c.isdelete == false && c.EmployeeActive == true).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
                catch (Exception)
                {

                    return null;
                }
            }
        }

        [OperationContract]
        public bool SaveUpdateNonFixedRules(List<view_EmployeeWiseAssignedRulesForNonFixed> SaveObj, List<view_EmployeeWiseAssignedRulesForNonFixed> UpdateObj, Guid UserID)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    foreach (var item in UpdateObj)
                    {
                        var updateFixedRulesAmountIn_dtl_EmployeeRule = context.dtl_EmployeeRule.FirstOrDefault(c => c.employee_id == item.employee_id && c.rule_id == item.rule_id);
                        updateFixedRulesAmountIn_dtl_EmployeeRule.special_amount = item.special_amount;
                        updateFixedRulesAmountIn_dtl_EmployeeRule.is_special = item.is_special;

                    }

                    foreach (var item in SaveObj)
                    {
                        dtl_EmployeeRule SaveFixedRules = new dtl_EmployeeRule();
                        SaveFixedRules.employee_id = (Guid)item.employee_id;
                        SaveFixedRules.rule_id = item.rule_id;
                        SaveFixedRules.special_amount = item.special_amount;
                        SaveFixedRules.is_special = item.is_special;
                        SaveFixedRules.isactive = true;
                        SaveFixedRules.isdelete = false;
                        SaveFixedRules.save_datetime = DateTime.Now;
                        SaveFixedRules.save_user_id = UserID;
                        context.dtl_EmployeeRule.AddObject(SaveFixedRules);
                    }
                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        [OperationContract]
        public bool DeleteNonFixedRules(List<view_EmployeeWiseAssignedRulesForNonFixed> DeleteObj)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    foreach (var item in DeleteObj)
                    {
                        var result = context.dtl_EmployeeRule.FirstOrDefault(c => c.employee_id == item.employee_id && c.rule_id == item.rule_id);
                        result.isactive = false;
                        result.isdelete = true;
                    }
                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {

                    return false;
                }
            }
        }

        #region Employees Rule Process According to Pay Period

        [OperationContract]
        public IEnumerable<view_EmployeesAssignedRules> GetAllFixedRulesOfSelectedEmployee()
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.view_EmployeesAssignedRules.ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        [OperationContract]
        public IEnumerable<EmployeeRuleDetailsView> GetEmployeeFixedRulesAsignedtoPeriod(Guid PeriodID)
        {
            try
            {
                IEnumerable<EmployeeRuleDetailsView> AllAsignedRulesToCurrentPeriod = GetEmployeeRuleDetailsByPeriod(PeriodID);
                IEnumerable<EmployeeRuleDetailsView> AssignedFixedRules = AllAsignedRulesToCurrentPeriod.Where(c => GetAllFixedRules().Any(d => d.rule_id == c.rule_id));
                return AssignedFixedRules;
            }
            catch (Exception)
            {

                return null;
            }
        }

        [OperationContract]
        public IEnumerable<EmployeeRuleDetailsView> GetEmployeeNonFixedRulesAssignedToPeriod(Guid PeriodID)
        {
            try
            {
                IEnumerable<EmployeeRuleDetailsView> AllAsignedRulesToCurrentPeriod = GetEmployeeRuleDetailsByPeriod(PeriodID);
                IEnumerable<mas_CompanyRule> AllCompanyRules = GetAllNonFixedRules();
                IEnumerable<EmployeeRuleDetailsView> AssignedNonFixedRules = AllAsignedRulesToCurrentPeriod.Where(c => AllCompanyRules.Any(d => d.rule_id == c.rule_id) && c.EmployeeActive == true && c.EmployeeDelete == false);
                return AssignedNonFixedRules;
            }
            catch (Exception)
            {

                return null;
            }

        }

        [OperationContract]
        public IEnumerable<view_EmployeeWiseAssignedRulesForNonFixed> GetAllNonFixedRulesForAssignedEmployees()
        {
            try
            {
                IEnumerable<mas_CompanyRule> tempAllNonFixedRules = GetAllNonFixedRules();
                IEnumerable<view_EmployeeWiseAssignedRulesForNonFixed> EmpWiseAllNonFixedRules = GetCompanyRulesEmployeeWiseForNonFixed().Where(c => tempAllNonFixedRules.Any(d => d.rule_id == c.rule_id));
                return EmpWiseAllNonFixedRules;
            }
            catch (Exception)
            {

                return null;
            }

        }

        [OperationContract]
        public bool SaveEmployeeRulesPeriodWise(List<EmployeeRuleDetailsView> SaveObj, List<EmployeeRuleDetailsView> UpdateObj, Guid UserID)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    foreach (var item in SaveObj)
                    {
                        var dtl_EmployeeRuleResult = context.dtl_EmployeeRule.FirstOrDefault(c => c.employee_id == item.employee_id && c.rule_id == item.rule_id);
                        dtl_EmployeeRuleResult.special_amount = item.special_amount;
                        trns_EmployeePeriodQunatity temp = new trns_EmployeePeriodQunatity();
                        temp.period_id = item.period_id;
                        temp.rule_id = item.rule_id;
                        temp.employee_id = item.employee_id;
                        temp.quantity = item.quantity;
                        temp.save_datetime = DateTime.Now;
                        temp.save_user_id = UserID;
                        temp.status = "F";
                        temp.isdelete = false;
                        context.trns_EmployeePeriodQunatity.AddObject(temp);
                    }
                    foreach (var item in UpdateObj)
                    {
                        var dtl_EmployeeRuleResult = context.dtl_EmployeeRule.FirstOrDefault(c => c.employee_id == item.employee_id && c.rule_id == item.rule_id);
                        dtl_EmployeeRuleResult.special_amount = item.special_amount;
                        var trns_EmployeePeriodQuantityResult = context.trns_EmployeePeriodQunatity.FirstOrDefault(c => c.employee_id == item.employee_id && c.rule_id == item.rule_id && c.period_id == item.period_id);
                        trns_EmployeePeriodQuantityResult.quantity = item.quantity;
                        trns_EmployeePeriodQuantityResult.modified_datetime = DateTime.Now;
                        trns_EmployeePeriodQuantityResult.modified_user_id = UserID;
                        //trns_EmployeePeriodQuantityResult.status = "F";
                    }
                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {

                    return false;
                }
            }
        }

        [OperationContract]
        public bool DeleteEmployeeRuleFromPeriodQuantity(Guid DeleteEmp, Guid PeriodID)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = context.trns_EmployeePeriodQunatity.Where(c => c.employee_id == DeleteEmp && c.period_id == PeriodID);
                    foreach (var item in result)
                    {
                        context.trns_EmployeePeriodQunatity.DeleteObject(item);
                    }
                    return validateSaveUpdate(context.SaveChanges());
                }
                catch (Exception)
                {

                    return false;
                }
            }
        }

        #endregion

        #region Employee Rule Process Rule Wise To Pay Period

        [OperationContract]
        public bool SaveAllFixedRulesToEmpPeriodQty(Guid PeriodID, Guid UserID)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    List<EmployeeRuleDetailsView> AssignedRulesinPeriodQty = GetEmployeeFixedRulesAsignedtoPeriod(PeriodID).ToList();
                    List<view_EmployeesAssignedRules> AllFixedRulesOfEmployees = GetAllFixedRulesOfSelectedEmployee().ToList();
                    List<view_EmployeesAssignedRules> AllNotAssignedFixedRulesOfEmployeesToCurrentPeriod = AllFixedRulesOfEmployees.Where(c => !AssignedRulesinPeriodQty.Any(d => d.rule_id == c.rule_id && d.employee_id == c.employee_id)).ToList();
                    foreach (var item in AllNotAssignedFixedRulesOfEmployeesToCurrentPeriod)
                    {
                        trns_EmployeePeriodQunatity temp = new trns_EmployeePeriodQunatity();
                        temp.employee_id = item.employee_id;
                        temp.rule_id = item.rule_id;
                        temp.period_id = PeriodID;
                        temp.quantity = item.default_qty;
                        temp.save_datetime = DateTime.Now;
                        temp.save_user_id = UserID;
                        temp.status = "F";
                        temp.isdelete = false;
                        context.trns_EmployeePeriodQunatity.AddObject(temp);
                    }
                    return validateSaveUpdate(context.SaveChanges());

                }
                catch (Exception)
                {
                    return false;
                }

            }
        }



        #endregion

        #endregion

        #region Payroll Process New Methods

        [OperationContract]
        public IEnumerable<dtl_Employee> GetEmployeeDetailsPayroll(List<Guid> Employeeid)
        {
            using (var context = new ERPEntities())
            {
                var emp = new List<dtl_Employee>();
                foreach (var item in Employeeid)
                {
                    var results = context.dtl_Employee.FirstOrDefault(c => c.employee_id == item);
                    emp.Add(results);

                }
                emp.ForEach(e => context.Detach(e));
                return emp;

            }
        }

        [OperationContract]
        public IEnumerable<dtl_EmployeeRule> GetEmployeeRulePayroll(List<Guid> employeeId)
        {
            using (var context = new ERPEntities())
            {
                var Rules = new List<dtl_EmployeeRule>();
                foreach (var item in employeeId)
                {
                    var result = context.dtl_EmployeeRule.Where(c => c.employee_id == item).ToList();
                    result.ForEach(c => Rules.Add(c));
                }
                Rules.ForEach(e => context.Detach(e));
                return Rules;
            }

        }

        [OperationContract]
        private IEnumerable<trns_EmployeePeriodQunatity> GetAllTrnsPeriodQuantityPayroll(List<Guid> employeeId)
        {
            using (var context = new ERPEntities())
            {
                var PeriodQty = new List<trns_EmployeePeriodQunatity>();
                foreach (var item in employeeId)
                {
                    var results = context.trns_EmployeePeriodQunatity.Where(c => c.employee_id == item).ToList();
                    results.ForEach(c => PeriodQty.Add(c));
                }
                PeriodQty.ForEach(e => context.Detach(e));
                return PeriodQty;
            }
        }

        [OperationContract]
        public IEnumerable<dtl_EmployeeBasicSalary> GetEmployeeBasicSalaryPayroll(List<Guid> employeeId)
        {
            using (var context = new ERPEntities())
            {
                var result = new List<dtl_EmployeeBasicSalary>();
                foreach (var item in employeeId)
                {
                    result = context.dtl_EmployeeBasicSalary.Where(c => c.employee_id == item).ToList();
                }
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public IEnumerable<trns_InternalLoanPayment> GetLoanRemainingAmountPayroll(Guid PeriodID, List<Guid> employeeId)
        {
            using (var context = new ERPEntities())
            {
                try
                {
                    var result = new List<trns_InternalLoanPayment>();
                    foreach (var item in employeeId)
                    {
                        result = context.trns_InternalLoanPayment.Where(c => c.period_id == PeriodID).ToList();
                    }
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }

        }

        #endregion

        #region Send SMS
        [OperationContract]
        public IEnumerable<smssendview> GetEmployeeSalaryDetails(Guid periodId)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.smssendviews.Where(c => c.period_id == periodId).ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public IEnumerable<sendbonusotherpaymentsview> GetEmployeeOtherPaymentsDetails(int periodId)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.sendbonusotherpaymentsviews.Where(c => c.Bonus_Period_id == periodId).ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public IEnumerable<sendthirdpartypayment> GetEmployeeThirdPartyPaymentsDetails(int categoryId, DateTime SelectedDate)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.sendthirdpartypayments.Where(c => c.category_id == categoryId && c.processed_datetime == SelectedDate).ToList();
                    result.ForEach(c => context.Detach(c));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }
        #endregion

        #region Thakral DB

        [OperationContract]
        public string GetThakralDBConnection()
        {
            try
            {
                return ConfigurationManager.ConnectionStrings["ThakralDBConnectionString"].ConnectionString;
            }
            catch (Exception)
            {

                return "";
            }
        }

        [OperationContract]
        public string GetThakralDBName()
        {
            try
            {
                return ConfigurationManager.AppSettings["ThakralDBName"];
            }
            catch (Exception)
            {

                return "";
            }
        }

        [OperationContract]
        public IEnumerable<GetPayrollDataToMigrate_Result> GetEmployeeSalaryDetailsToThakralDB(Guid periodId)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.GetPayrollDataToMigrate(periodId.ToString()).ToList();
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public IEnumerable<GetOtherPaymentsDataToMigrate_Result> GetEmployeeOtherPaymentsDetailsToThakralDB(int periodId)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.GetOtherPaymentsDataToMigrate(periodId).ToList();
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }
        #endregion

        #region Admin Reversing
        [OperationContract]
        public IEnumerable<trns_EmployeeBonus> CheckToReverseBonusAndOtherPayments(int periodId)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.trns_EmployeeBonus.Where(c => c.Bonus_Period_id == periodId).ToList();
                    result.ForEach(e => context.Detach(e));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public bool ReverseBonusAndOtherPayments(int periodId)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    context.ReverseBonusAndOtherPaments(Convert.ToInt32(periodId));
                    return true;
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public IEnumerable<trns_ExtBankLoan> CheckToReverseExternalBankLoans(Guid periodId)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.trns_ExtBankLoan.Where(c => c.period_id == periodId).ToList();
                    result.ForEach(e => context.Detach(e));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public bool ReverseExternalBankLoans(Guid periodId)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    context.ReverseExternalBankLoans(periodId.ToString());
                    return true;
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public IEnumerable<trns_InternalLoanPayment> CheckToReverseInternalLoans(Guid periodId)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.trns_InternalLoanPayment.Where(c => c.period_id == periodId).ToList();
                    result.ForEach(e => context.Detach(e));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public bool ReverseInternalBankLoans(Guid periodId)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    List<trns_InternalLoanPayment> LoanList = context.trns_InternalLoanPayment.Where(c => c.period_id == periodId).ToList();
                    foreach (var currentloan in LoanList)
                    {
                        mas_InternalLoanDetails LoanDetails = context.mas_InternalLoanDetails.FirstOrDefault(c => c.InternalLoanID == currentloan.int_loan_id);
                        if (LoanDetails.is_Completed == true)
                        {
                            LoanDetails.is_Completed = false;
                            LoanDetails.is_active = true;
                        }
                        LoanDetails.LoanRemainingAmount = Convert.ToDecimal(LoanDetails.LoanRemainingAmount + currentloan.PaidAmount_WithoutIntrest);
                        context.SaveChanges();
                    }
                    context.ReverseInternalBankLoans(periodId.ToString());
                    return true;
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool SaveReverseLog(trns_ReverseLog SaveObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    context.trns_ReverseLog.AddObject(SaveObj);
                    context.SaveChanges();
                    return true;
                }
            }
            catch (Exception)
            {
                return false;
            }
        }
        #endregion

        #region HR Report Excel
        [OperationContract]
        public IEnumerable<EmployeeBasicDetailsView> GetEmployeeBasicDetailsForExcel()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.EmployeeBasicDetailsViews.ToList();
                    result.ForEach(e => context.Detach(e));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public IEnumerable<EmployeeAQDetailsView> GetEmployeeAQDetailsForExcel()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.EmployeeAQDetailsViews.ToList();
                    result.ForEach(e => context.Detach(e));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public IEnumerable<EmployeePQDetailsView> GetEmployeePQDetailsForExcel()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.EmployeePQDetailsViews.ToList();
                    result.ForEach(e => context.Detach(e));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public decimal GetEmployeeCOLAmount(Guid EmployeeID)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    decimal amount = 0;
                    if (context.dtl_EmployeeRule.FirstOrDefault(c => c.employee_id == EmployeeID && c.rule_id == new Guid("3801E505-73B7-4C56-9E6B-C929A42CF89B")) != null)
                        amount = (decimal)context.dtl_EmployeeRule.FirstOrDefault(c => c.employee_id == EmployeeID && c.rule_id == new Guid("3801E505-73B7-4C56-9E6B-C929A42CF89B")).special_amount;
                    else
                        amount = 0;

                    return amount;
                }
            }
            catch (Exception)
            {
                return 0;
            }
        }
        #endregion

        #region Get Employee EPF Name
        [OperationContract]
        public string GetEmployeeEPFName(Guid EmployeeID)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    string result = context.dtl_EmployeeOtherOfficialDetails.FirstOrDefault(c => c.employee_id == EmployeeID).epf_name;
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }
        #endregion

        #region Get Employee Existing OT Amount
        //[OperationContract]
        //public EmployeeOTView GetEmployeeExistingOTAmount(Guid EmployeeID, Guid PeriodID)
        //{
        //    try
        //    {
        //        using (var context = new ERPEntities())
        //        {
        //            var result = context.EmployeeOTViews.FirstOrDefault(c => c.employee_id == EmployeeID && c.period_id == PeriodID);
        //            return result;
        //        }
        //    }
        //    catch (Exception)
        //    {
        //        return null;
        //    }
        //}
        #endregion

        #region Get Employee Nopay Days
        [OperationContract]
        public IEnumerable<EmployeeNopayView> GetEmployeeNopayDays(Guid EmployeeID, DateTime FromDate, DateTime ToDate)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.EmployeeNopayViews.Where(c => c.employee_id == EmployeeID && c.attend_date >= FromDate && c.attend_date <= ToDate).ToList();
                    result.ForEach(d => context.Detach(d));
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }
        #endregion

        #region Nopay Report Operations
        [OperationContract]
        public bool SaveEmployeeNopayDataForReport(List<rpt_NopayReportData> NopayData)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    IEnumerable<rpt_NopayReportData> AllData = context.rpt_NopayReportData.ToList();
                    foreach (rpt_NopayReportData item in AllData)
                    {
                        context.rpt_NopayReportData.DeleteObject(item);
                    }
                    if (NopayData != null && NopayData.Count > 0)
                    {
                        foreach (rpt_NopayReportData item in NopayData)
                        {
                            context.rpt_NopayReportData.AddObject(item);
                        }
                    }
                    return validateSaveUpdate(context.SaveChanges());

                }
            }
            catch (Exception)
            {
                return false;
            }
        }
        #endregion

        #region Get Employee Short Leave Count
        [OperationContract]
        public decimal GetEmployeeShortLeaveCount(Guid EmployeeID, Guid CategoryID, DateTime start_date, DateTime end_date)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    decimal count = 0;
                    var result = context.trns_LeavePool.Where(c => c.emp_id == EmployeeID && c.leave_category_id == CategoryID && c.leave_date >= start_date && c.leave_date <= end_date && c.is_rejected == false).ToList();
                    if (result != null && result.Count > 0)
                    {
                        foreach (var item in result)
                        {
                            string Name = context.mas_LeaveDetail.FirstOrDefault(c => c.leave_detail_id == item.leave_detail_id).leave_detail_name;
                            if(Name == "Short Leave 1.5")
                            {
                                count += (decimal)0.75;
                            }
                            if(Name == "Short Leave 01")
                            {
                                count += (decimal)0.50;
                            }
                            if(Name == "Short Leave 0.5")
                            {
                                count += (decimal)0.25;
                            }
                        } 
                    }
                    return count;
                }
            }
            catch (Exception)
            {
                return 0;
            }
        }
        #endregion

        #region Leave Automate
        
        [OperationContract]
        public bool SaveEmployeeMasterLeaveDetails(dtl_EmployeeLeave DetailObj)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    context.dtl_EmployeeLeave.AddObject(DetailObj);
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception ex)
            {                
               return false;
            }
        }

        [OperationContract]
        public IEnumerable<Employee_Leave_Detail_View> GetEmployeeAutoLeaveDetailsView(Guid Period, Guid EmployeeId)
        {
            using (var context = new ERPEntities())
            {
                try
                {

                    var result = context.Employee_Leave_Detail_View.Where(c => c.leave_period_id == Period && c.emp_id == EmployeeId).ToList();
                    result.ForEach(s => context.Detach(s));
                    return result;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }

        #endregion

        #region z_Location Operation

        [OperationContract]
        public IEnumerable<z_Location> GetLocation()
        {
            using (var context = new ERPEntities())
            {
                var result = context.z_Location.ToList();
                result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public bool UpdateLocation(z_Location loc)
        {
            bool isSuccess = false;

            try
            {
                if (loc != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_Location newLoc = context.z_Location.FirstOrDefault(c => c.location_id == loc.location_id);
                        if (newLoc != null)
                        {
                            newLoc.loc_code = loc.loc_code;
                            newLoc.location_name = loc.location_name;
                            newLoc.address = loc.address;
                            newLoc.Tel = loc.Tel;
                            newLoc.latitude = loc.latitude;
                            newLoc.longtitude = loc.longtitude;
                            newLoc.modified_datetime = loc.modified_datetime;
                            int i = context.SaveChanges();
                            isSuccess = validateSaveUpdate(i);
                            return isSuccess;
                        }
                    }
                }
            }
            catch (Exception)
            {
                return isSuccess = false;
            }
            return isSuccess;
        }

        [OperationContract]
        public bool SaveLocation(z_Location loc)
        {
            try
            {
                if (loc != null)
                {
                    using (var context = new ERPEntities())
                    {
                        context.z_Location.AddObject(loc);
                        return this.validateSaveUpdate(context.SaveChanges());
                    }
                }
                return false;
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool DeleteLocation(z_Location loc)
        {
            bool isSuccess = false;
            try
            {
                if (loc != null)
                {
                    using (var context = new ERPEntities())
                    {
                        z_Location DeleteLocation = context.z_Location.First(c => c.location_id == loc.location_id);
                        DeleteLocation.is_delete = true;
                        DeleteLocation.delete_datetime = loc.delete_datetime;
                        int i = context.SaveChanges();
                        isSuccess = validateSaveUpdate(i);
                        return isSuccess;
                    }
                }
            }
            catch (Exception)
            {
                return isSuccess = false;
            }

            return isSuccess;
        }


        #endregion

        #region dtl_employeeLocation


        [OperationContract]
        public IEnumerable<AssignedEmployeeLocationView> GetEmployeeLocationView()
        {
            using (var context = new ERPEntities())
            {
                var result = context.AssignedEmployeeLocationViews.ToList();
                //result.ForEach(e => context.Detach(e));
                return result;
            }
        }

        [OperationContract]
        public bool SaveMoreEmployeeLocations(List<dtl_employeeLocation> AddedList)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    foreach (dtl_employeeLocation item in AddedList)
                    {
                        dtl_employeeLocation current = context.dtl_employeeLocation.FirstOrDefault(c => c.employee_id == item.employee_id && c.location_id == item.location_id);
                        if (current == null)
                        {
                            context.dtl_employeeLocation.AddObject(item);
                        }
                        else
                        {
                            current.location_id = item.location_id;
                            current.distance = item.distance;
                            current.is_active = item.is_active;
                            current.modified_datetime = System.DateTime.Now;
                        }
                    }

                    if (validateSaveUpdate(context.SaveChanges()))
                        return true;
                }
            }
            catch (Exception)
            {
                return false;
            }
            return false;
        }

        [OperationContract]
        public bool SaveEmployeeLocation(dtl_employeeLocation loc)
        {
            try
            {
                if (loc != null)
                {
                    using (var context = new ERPEntities())
                    {
                        context.dtl_employeeLocation.AddObject(loc);
                        return this.validateSaveUpdate(context.SaveChanges());
                    }
                }

                return false;
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool UpdateEmployeeLocation(dtl_employeeLocation loc)
        {
            try
            {
                if (loc != null)
                {
                    using (var context = new ERPEntities())
                    {
                        dtl_employeeLocation dtl = context.dtl_employeeLocation.FirstOrDefault(c => c.location_id == loc.location_id);
                        if (dtl != null)
                        {
                            dtl.location_id = loc.location_id;
                            dtl.employee_id = loc.employee_id;
                            dtl.distance = loc.distance;
                            dtl.is_active = loc.is_active;
                            dtl.modified_datetime = System.DateTime.Now;
                            return validateSaveUpdate(context.SaveChanges());
                        }
                    }
                }
                return false;
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]

        public bool DeleteEmployeeLocation(dtl_employeeLocation loc)
        {
            try
            {
                if (loc != null)
                {
                    using (var context = new ERPEntities())
                    {
                        dtl_employeeLocation dtl = context.dtl_employeeLocation.FirstOrDefault(c => c.employee_id == loc.employee_id && c.location_id == loc.location_id);

                        if (dtl != null)
                        {
                            dtl.is_delete = true;
                            dtl.is_active = false;
                            dtl.delete_datetime = System.DateTime.Now;
                            return this.validateSaveUpdate(context.SaveChanges());
                        }
                    }
                }
                return false;
            }
            catch (Exception)
            {

                return false;
            }
        }
        #endregion

        #region malith 2020-06-18
        //[OperationContract]
        //public bool SaveEmployeeTrnQuantities(IEnumerable<trns_EmployeeQuantityPeriod> Quantities)
        //{
        //    try
        //    {
        //        using (var context = new ERPEntities())
        //        {
        //            foreach (trns_EmployeeQuantityPeriod item in Quantities)
        //            {
        //                context.trns_EmployeeQuantityPeriod.AddObject(item);
        //            }
        //            return validateSaveUpdate(context.SaveChanges());

        //        }
        //    }
        //    catch (Exception)
        //    {
        //        return false;
        //    }
        //}
        #endregion

        // h 2020-08-10
        #region Notification

        #region check exist

        [OperationContract]
        public bool notif_checkNotificationExist(Guid employeeid, int header, DateTime date)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.sp_CheckEmployeeNotificationExist(employeeid, header, date);
                    if (Convert.ToInt32(result.First()) == 0)
                        return false;
                    else
                        return true;
                }
            }
            catch (Exception)
            {
                return true;
            }
        }

        #endregion

        #region save

        private bool notif_saveNotification(List<z_NotificationDetail> tosavelist)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    tosavelist.ForEach(c => context.z_NotificationDetail.AddObject(c));
                    return validateSaveUpdate(context.SaveChanges());
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        #endregion

        #region basic details

        [OperationContract]
        public bool notif_setEmployeeBasicdetails(DateTime monthstart, DateTime monthend)
        {
            try
            {
                List<EmployeeSumarryView> empdetails = GetAllEmployeeDetail().ToList();
                if (empdetails != null && empdetails.Count > 0)
                {
                    List<z_NotificationDetail> savelist = new List<z_NotificationDetail>();
                    // join date
                    foreach (EmployeeSumarryView emp in empdetails.Where(c => c.join_date != null && c.join_date >= monthstart && c.join_date <= monthend))
                    {
                        if (!notif_checkNotificationExist(emp.employee_id, 1, emp.join_date.Value))
                        {
                            z_NotificationDetail tosave = new z_NotificationDetail();
                            tosave.date = emp.join_date.Value;
                            tosave.employee_id = emp.employee_id;
                            tosave.header_id = 1;
                            tosave.save_datetime = DateTime.Now;

                            savelist.Add(tosave);
                        }
                    }
                    // confirm date
                    foreach (EmployeeSumarryView emp in empdetails.Where(c => c.prmernant_active_date != null && c.prmernant_active_date >= monthstart && c.prmernant_active_date <= monthend))
                    {
                        if (!notif_checkNotificationExist(emp.employee_id, 2, emp.prmernant_active_date.Value))
                        {
                            z_NotificationDetail tosave = new z_NotificationDetail();
                            tosave.date = emp.prmernant_active_date.Value;
                            tosave.employee_id = emp.employee_id;
                            tosave.header_id = 2;
                            tosave.save_datetime = DateTime.Now;

                            savelist.Add(tosave);
                        }
                    }
                    // birthday
                    foreach (EmployeeSumarryView emp in empdetails.Where(c => c.birthday != null && c.birthday.Value.Month == monthstart.Month))
                    {
                        if (!notif_checkNotificationExist(emp.employee_id, 3, emp.birthday.Value))
                        {
                            z_NotificationDetail tosave = new z_NotificationDetail();
                            tosave.date = emp.birthday.Value;
                            tosave.employee_id = emp.employee_id;
                            tosave.header_id = 3;
                            tosave.save_datetime = DateTime.Now;

                            savelist.Add(tosave);
                        }
                    }
                    // resign
                    foreach (EmployeeSumarryView emp in empdetails.Where(c => c.resign_date != null && c.resign_date >= monthstart && c.resign_date <= monthend))
                    {
                        if (!notif_checkNotificationExist(emp.employee_id, 4, emp.resign_date.Value))
                        {
                            z_NotificationDetail tosave = new z_NotificationDetail();
                            tosave.date = emp.resign_date.Value;
                            tosave.employee_id = emp.employee_id;
                            tosave.header_id = 4;
                            tosave.save_datetime = DateTime.Now;

                            savelist.Add(tosave);
                        }
                    }

                    if (savelist.Count > 0)
                    {
                        return notif_saveNotification(savelist);
                    }
                }
                return false;
            }
            catch (Exception)
            {
                return false;
            }
        }

        #endregion

        #region salary deposit & payslip

        [OperationContract]
        public bool notif_setEmployeeSalaryDepositDetail(List<Guid> emps, DateTime date, bool salaryslip, bool deposit)
        {
            try
            {
                List<z_NotificationDetail> savelist = new List<z_NotificationDetail>();
                foreach (Guid emp in emps)
                {
                    if (!notif_checkNotificationExist(emp, 5, date) && deposit)
                    {
                        z_NotificationDetail tosave = new z_NotificationDetail();
                        tosave.date = date;
                        tosave.employee_id = emp;
                        tosave.header_id = 5; // deposit
                        tosave.save_datetime = DateTime.Now;
                        savelist.Add(tosave);
                    }
                    if (!notif_checkNotificationExist(emp, 6, date) && salaryslip)
                    {
                        z_NotificationDetail tosave = new z_NotificationDetail();
                        tosave.date = date;
                        tosave.employee_id = emp;
                        tosave.header_id = 6; // payslip
                        tosave.save_datetime = DateTime.Now;
                        savelist.Add(tosave);
                    }
                }

                if (savelist.Count > 0)
                {
                    return notif_saveNotification(savelist);
                }
                return false;
            }
            catch (Exception)
            {
                return false;
            }
        }

        #endregion

        #region leave entitlement over

        [OperationContract]
        public bool notif_setEmployeeEntitlementOver(trns_LeavePool empleave, DateTime date)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    z_NotificationDetail tosave = new z_NotificationDetail();
                    tosave.date = date;
                    tosave.employee_id = (Guid)empleave.emp_id;
                    tosave.header_id = 11;
                    tosave.save_datetime = DateTime.Now;
                    tosave.additional_data = empleave.mas_LeaveDetail.leave_detail_name;

                    List<z_NotificationDetail> savelist = new List<z_NotificationDetail>();
                    savelist.Add(tosave);

                    return notif_saveNotification(savelist);
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        [OperationContract]
        public bool notif_setEmployeeSLEntitlementOver(trns_LeavePool empleave, DateTime date)
        {
            try
            {
                DateTime monthstart = new DateTime(date.Year, date.Month, 1);
                DateTime monthend = monthstart.AddMonths(1).AddDays(-1);

                List<sp_notif_getApprovedLeaveDeails_Result> leavesformonth = notif_getApprovedLeaves(monthstart, monthend, (Guid)empleave.leave_category_id, (Guid)empleave.emp_id);

                if (leavesformonth != null && leavesformonth.Count >= 2)
                {
                    using (var context = new ERPEntities())
                    {
                        z_NotificationDetail tosave = new z_NotificationDetail();
                        tosave.date = date;
                        tosave.employee_id = (Guid)empleave.emp_id;
                        tosave.header_id = 11;
                        tosave.save_datetime = DateTime.Now;
                        tosave.additional_data = empleave.mas_LeaveDetail.leave_detail_name;

                        List<z_NotificationDetail> savelist = new List<z_NotificationDetail>();
                        savelist.Add(tosave);

                        return notif_saveNotification(savelist);
                    }
                }
                return false;
            }
            catch (Exception)
            {
                return false;
            }
        }

        private List<sp_notif_getApprovedLeaveDeails_Result> notif_getApprovedLeaves(DateTime monthstart, DateTime monthend, Guid leavecategory, Guid employeeid)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.sp_notif_getApprovedLeaveDeails(monthstart, monthend, leavecategory, employeeid).ToList();
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        #endregion

        #region get data

        [OperationContract]
        public List<sp_notif_getNotificationEmployeeDetails_Result> notif_getEmployeeDetails()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.sp_notif_getNotificationEmployeeDetails().ToList();
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public List<sp_notif_getNotificationEmployeeSupervisorDetails_Result> notif_getEmployeeSupervisorDetails()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.sp_notif_getNotificationEmployeeSupervisorDetails().ToList();
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public List<z_NotificationHeader> notif_getNotificationHeader()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.z_NotificationHeader.ToList();
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public List<sp_notif_getTodayBirthdayList_Result> notif_getEmployeeBirthdays(DateTime today)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.sp_notif_getTodayBirthdayList(today).ToList();
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        private List<sp_notif_getProcessedAttendance_Result> notif_getProcessedAttendance(DateTime attenddate)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    List<sp_notif_getProcessedAttendance_Result> attendance = context.sp_notif_getProcessedAttendance(attenddate).ToList();
                    return attendance;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        [OperationContract]
        public List<sp_notif_getNotificationHRDetails_Result> notif_getHRDetails()
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    var result = context.sp_notif_getNotificationHRDetails().ToList();
                    return result;
                }
            }
            catch (Exception)
            {
                return null;
            }
        }
        #endregion

        #region set attendance notifications

        [OperationContract]
        public bool notif_setEmployeeAttendanceDetails(DateTime date)
        {
            try
            {
                List<z_NotificationDetail> savelist = new List<z_NotificationDetail>();
                List<sp_notif_getProcessedAttendance_Result> empattendance = notif_getProcessedAttendance(date);
                if (empattendance != null && empattendance.Count > 0)
                {
                    foreach (sp_notif_getProcessedAttendance_Result attendance in empattendance)
                    {
                        z_NotificationDetail tosave = new z_NotificationDetail();
                        tosave.date = date;
                        tosave.employee_id = (Guid)attendance.employee_id;
                        tosave.save_datetime = DateTime.Now;
                        tosave.header_id = 0;

                        if (attendance.attend_status_id == 3) //AttendStatus.INVALID)
                            tosave.header_id = 7;
                        else if (attendance.attend_status_id == 31) // AttendStatus.LATE_IN)
                        {
                            tosave.header_id = 8;
                            TimeSpan latetime = TimeSpan.FromSeconds((int)attendance.late_in_duration);
                            tosave.additional_data = latetime.ToString();
                        }
                        else if (attendance.attend_status_id == 6) // AttendStatus.MORNING_HALFDAY)
                            tosave.header_id = 9;
                        else if (attendance.attend_status_id == 9) // AttendStatus.EVENING_HALFDAY)
                            tosave.header_id = 9;
                        else if (attendance.attend_status_id == 2) // AttendStatus.ABSENT)
                            tosave.header_id = 10;

                        if (tosave.header_id > 0)
                            savelist.Add(tosave);
                    }

                    if (savelist.Count > 0)
                        return notif_saveNotification(savelist);
                }
                return false;
            }
            catch (Exception)
            {
                return false;
            }
        }

        #endregion

        #region clear sent

        [OperationContract]
        public bool notif_clearSentData(Guid employeeid, int headerid, DateTime date, string additionaldata)
        {
            try
            {
                using (var context = new ERPEntities())
                {
                    context.sp_notif_clearSentData(employeeid, headerid, date, additionaldata);
                    return true;
                }
            }
            catch (Exception)
            {
                return false;
            }
        }

        #endregion

        #endregion

    }
}

